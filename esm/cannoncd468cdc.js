class Z{constructor(t=[0,0,0,0,0,0,0,0,0]){this.elements=void 0,this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t=new c){const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e=new c){const s=this.elements,i=t.x,n=t.y,o=t.z;return e.x=s[0]*i+s[1]*n+s[2]*o,e.y=s[3]*i+s[4]*n+s[5]*o,e.z=s[6]*i+s[7]*n+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e=new Z){const s=this.elements,i=t.elements,n=e.elements,o=s[0],r=s[1],l=s[2],a=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],m=i[0],y=i[1],w=i[2],v=i[3],x=i[4],b=i[5],E=i[6],C=i[7],A=i[8];return n[0]=o*m+r*v+l*E,n[1]=o*y+r*x+l*C,n[2]=o*w+r*b+l*A,n[3]=a*m+d*v+u*E,n[4]=a*y+d*x+u*C,n[5]=a*w+d*b+u*A,n[6]=h*m+f*v+p*E,n[7]=h*y+f*x+p*C,n[8]=h*w+f*b+p*A,e}scale(t,e=new Z){const s=this.elements,i=e.elements;for(let n=0;n!==3;n++)i[3*n+0]=t.x*s[3*n+0],i[3*n+1]=t.y*s[3*n+1],i[3*n+2]=t.z*s[3*n+2];return e}solve(t,e=new c){const s=3,i=4,n=[];let o,r;for(o=0;o<s*i;o++)n.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)n[o+i*r]=this.elements[o+3*r];n[3+4*0]=t.x,n[3+4*1]=t.y,n[3+4*2]=t.z;let l=3;const a=l;let d;const u=4;let h;do{if(o=a-l,n[o+i*o]===0){for(r=o+1;r<a;r++)if(n[o+i*r]!==0){d=u;do h=u-d,n[h+i*o]+=n[h+i*r];while(--d);break}}if(n[o+i*o]!==0)for(r=o+1;r<a;r++){const f=n[o+i*r]/n[o+i*o];d=u;do h=u-d,n[h+i*r]=h<=o?0:n[h+i*r]-n[h+i*o]*f;while(--d)}}while(--l);if(e.z=n[2*i+3]/n[2*i+2],e.y=(n[1*i+3]-n[1*i+2]*e.z)/n[1*i+1],e.x=(n[0*i+3]-n[0*i+2]*e.z-n[0*i+1]*e.y)/n[0*i+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw"Could not solve equation! Got x=["+e.toString()+"], b=["+t.toString()+"], A=["+this.toString()+"]";return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t=new Z){const e=3,s=6,i=ke;let n,o;for(n=0;n<3;n++)for(o=0;o<3;o++)i[n+s*o]=this.elements[n+3*o];i[3+6*0]=1,i[3+6*1]=0,i[3+6*2]=0,i[4+6*0]=0,i[4+6*1]=1,i[4+6*2]=0,i[5+6*0]=0,i[5+6*1]=0,i[5+6*2]=1;let r=3;const l=r;let a;const d=s;let u;do{if(n=l-r,i[n+s*n]===0){for(o=n+1;o<l;o++)if(i[n+s*o]!==0){a=d;do u=d-a,i[u+s*n]+=i[u+s*o];while(--a);break}}if(i[n+s*n]!==0)for(o=n+1;o<l;o++){const h=i[n+s*o]/i[n+s*n];a=d;do u=d-a,i[u+s*o]=u<=n?0:i[u+s*o]-i[u+s*n]*h;while(--a)}}while(--r);n=2;do{o=n-1;do{const h=i[n+s*o]/i[n+s*n];a=s;do u=s-a,i[u+s*o]=i[u+s*o]-i[u+s*n]*h;while(--a)}while(o--)}while(--n);n=2;do{const h=1/i[n+s*n];a=s;do u=s-a,i[u+s*n]=i[u+s*n]*h;while(--a)}while(n--);n=2;do{o=2;do{if(u=i[e+o+s*n],isNaN(u)||u===1/0)throw"Could not reverse! A=["+this.toString()+"]";t.e(n,o,u)}while(o--)}while(n--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,n=t.w,o=e+e,r=s+s,l=i+i,a=e*o,d=e*r,u=e*l,h=s*r,f=s*l,p=i*l,m=n*o,y=n*r,w=n*l,v=this.elements;return v[3*0+0]=1-(h+p),v[3*0+1]=d-w,v[3*0+2]=u+y,v[3*1+0]=d+w,v[3*1+1]=1-(a+p),v[3*1+2]=f-m,v[3*2+0]=u-y,v[3*2+1]=f+m,v[3*2+2]=1-(a+h),this}transpose(t=new Z){const e=this.elements,s=t.elements;let i;return s[0]=e[0],s[4]=e[4],s[8]=e[8],i=e[1],s[1]=e[3],s[3]=i,i=e[2],s[2]=e[6],s[6]=i,i=e[5],s[5]=e[7],s[7]=i,t}}const ke=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t=0,e=0,s=0){this.x=void 0,this.y=void 0,this.z=void 0,this.x=t,this.y=e,this.z=s}cross(t,e=new c){const s=t.x,i=t.y,n=t.z,o=this.x,r=this.y,l=this.z;return e.x=r*n-l*i,e.y=l*s-o*n,e.z=o*i-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Z([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const n=1/i;this.x*=n,this.y*=n,this.z*=n}else this.x=0,this.y=0,this.z=0;return i}unit(t=new c){const e=this.x,s=this.y,i=this.z;let n=Math.sqrt(e*e+s*s+i*i);return n>0?(n=1/n,t.x=e*n,t.y=s*n,t.z=i*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i)}scale(t,e=new c){const s=this.x,i=this.y,n=this.z;return e.x=t*s,e.y=t*i,e.z=t*n,e}vmul(t,e=new c){return e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s=new c){return s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t=new c){return t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=je,n=1/s;i.set(this.x*n,this.y*n,this.z*n);const o=Ye;Math.abs(i.x)<.9?(o.set(1,0,0),i.cross(o,t)):(o.set(0,1,0),i.cross(o,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return this.x+","+this.y+","+this.z}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,n=this.y,o=this.z;s.x=i+(t.x-i)*e,s.y=n+(t.y-n)*e,s.z=o+(t.z-o)*e}almostEquals(t,e=1e-6){return!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t=1e-6){return!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(qt),qt.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=void 0;c.UNIT_X=void 0;c.UNIT_Y=void 0;c.UNIT_Z=void 0;c.ZERO=new c(0,0,0);c.UNIT_X=new c(1,0,0);c.UNIT_Y=new c(0,1,0);c.UNIT_Z=new c(0,0,1);const je=new c,Ye=new c,qt=new c;class X{constructor(t={}){this.lowerBound=void 0,this.upperBound=void 0,this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const n=this.lowerBound,o=this.upperBound,r=s;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let l=1;l<t.length;l++){let a=t[l];r&&(r.vmult(a,Ot),a=Ot),a.x>o.x&&(o.x=a.x),a.x<n.x&&(n.x=a.x),a.y>o.y&&(o.y=a.y),a.y<n.y&&(n.y=a.y),a.z>o.z&&(o.z=a.z),a.z<n.z&&(n.z=a.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),i&&(n.x-=i,n.y-=i,n.z-=i,o.x+=i,o.y+=i,o.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new X().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound,o=i.x<=s.x&&s.x<=n.x||e.x<=n.x&&n.x<=s.x,r=i.y<=s.y&&s.y<=n.y||e.y<=n.y&&n.y<=s.y,l=i.z<=s.z&&s.z<=n.z||e.z<=n.z&&n.z<=s.z;return o&&r&&l}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound;return e.x<=i.x&&s.x>=n.x&&e.y<=i.y&&s.y>=n.y&&e.z<=i.z&&s.z>=n.z}getCorners(t,e,s,i,n,o,r,l){const a=this.lowerBound,d=this.upperBound;t.copy(a),e.set(d.x,a.y,a.z),s.set(d.x,d.y,a.z),i.set(a.x,d.y,d.z),n.set(d.x,a.y,d.z),o.set(a.x,d.y,a.z),r.set(a.x,a.y,d.z),l.copy(d)}toLocalFrame(t,e){const s=Vt,i=s[0],n=s[1],o=s[2],r=s[3],l=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(i,n,o,r,l,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Vt,i=s[0],n=s[1],o=s[2],r=s[3],l=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(i,n,o,r,l,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*i,l=(this.upperBound.x-s.x)*i,a=(this.lowerBound.y-s.y)*n,d=(this.upperBound.y-s.y)*n,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,l),Math.min(a,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,l),Math.max(a,d)),Math.max(u,h));return!(p<0||f>p)}}const Ot=new c,Vt=[new c,new c,new c,new c,new c,new c,new c,new c];class kt{constructor(){this.matrix=void 0,this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const n=i;i=s,s=n}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:n}=e;if(n>i){const o=n;n=i,i=o}this.matrix[(i*(i+1)>>1)+n-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class jt{constructor(){this._listeners=void 0}addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const i=s[t].indexOf(e);return i!==-1&&s[t].splice(i,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let i=0,n=s.length;i<n;i++)s[i].call(this,t)}return this}}class j{constructor(t=0,e=0,s=0,i=1){this.x=void 0,this.y=void 0,this.z=void 0,this.w=void 0,this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return this.x+","+this.y+","+this.z+","+this.w}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t=new c){this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=He,i=De;t.tangents(s,i),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e=new j){const s=this.x,i=this.y,n=this.z,o=this.w,r=t.x,l=t.y,a=t.z,d=t.w;return e.x=s*d+o*r+i*a-n*l,e.y=i*d+o*l+n*r-s*a,e.z=n*d+o*a+s*l-i*r,e.w=o*d-s*r-i*l-n*a,e}inverse(t=new j){const e=this.x,s=this.y,i=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+s*s+i*i+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t=new j){return t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e=new c){const s=t.x,i=t.y,n=t.z,o=this.x,r=this.y,l=this.z,a=this.w,d=a*s+r*n-l*i,u=a*i+l*s-o*n,h=a*n+o*i-r*s,f=-o*s-r*i-l*n;return e.x=d*a+f*-o+u*-l-h*-r,e.y=u*a+f*-r+h*-o-d*-l,e.z=h*a+f*-l+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e="YZX"){let s,i,n;const o=this.x,r=this.y,l=this.z,a=this.w;switch(e){case"YZX":const d=o*r+l*a;if(d>.499&&(s=2*Math.atan2(o,a),i=Math.PI/2,n=0),d<-.499&&(s=-2*Math.atan2(o,a),i=-Math.PI/2,n=0),s===void 0){const u=o*o,h=r*r,f=l*l;s=Math.atan2(2*r*a-2*o*l,1-2*h-2*f),i=Math.asin(2*d),n=Math.atan2(2*o*a-2*r*l,1-2*u-2*f)}break;default:throw new Error("Euler order "+e+" not supported yet.")}t.y=s,t.z=i,t.x=n}setFromEuler(t,e,s,i="XYZ"){const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),l=Math.sin(t/2),a=Math.sin(e/2),d=Math.sin(s/2);return i==="XYZ"?(this.x=l*o*r+n*a*d,this.y=n*a*r-l*o*d,this.z=n*o*d+l*a*r,this.w=n*o*r-l*a*d):i==="YXZ"?(this.x=l*o*r+n*a*d,this.y=n*a*r-l*o*d,this.z=n*o*d-l*a*r,this.w=n*o*r+l*a*d):i==="ZXY"?(this.x=l*o*r-n*a*d,this.y=n*a*r+l*o*d,this.z=n*o*d+l*a*r,this.w=n*o*r-l*a*d):i==="ZYX"?(this.x=l*o*r-n*a*d,this.y=n*a*r+l*o*d,this.z=n*o*d-l*a*r,this.w=n*o*r+l*a*d):i==="YZX"?(this.x=l*o*r+n*a*d,this.y=n*a*r+l*o*d,this.z=n*o*d-l*a*r,this.w=n*o*r-l*a*d):i==="XZY"&&(this.x=l*o*r-n*a*d,this.y=n*a*r-l*o*d,this.z=n*o*d+l*a*r,this.w=n*o*r+l*a*d),this}clone(){return new j(this.x,this.y,this.z,this.w)}slerp(t,e,s=new j){const i=this.x,n=this.y,o=this.z,r=this.w;let l=t.x,a=t.y,d=t.z,u=t.w,h,f,p,m,y;return f=i*l+n*a+o*d+r*u,f<0&&(f=-f,l=-l,a=-a,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),m=Math.sin((1-e)*h)/p,y=Math.sin(e*h)/p):(m=1-e,y=e),s.x=m*i+y*l,s.y=m*n+y*a,s.z=m*o+y*d,s.w=m*r+y*u,s}integrate(t,e,s,i=new j){const n=t.x*s.x,o=t.y*s.y,r=t.z*s.z,l=this.x,a=this.y,d=this.z,u=this.w,h=e*.5;return i.x+=h*(n*u+o*d-r*a),i.y+=h*(o*u+r*l-n*d),i.z+=h*(r*u+n*a-o*l),i.w+=h*(-n*l-o*a-r*d),i}}const He=new c,De=new c,Ge={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class F{constructor(t={}){this.id=void 0,this.type=void 0,this.boundingSphereRadius=void 0,this.collisionResponse=void 0,this.collisionFilterGroup=void 0,this.collisionFilterMask=void 0,this.material=void 0,this.body=void 0,this.id=F.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw"computeBoundingSphereRadius() not implemented for shape type "+this.type}volume(){throw"volume() not implemented for shape type "+this.type}calculateLocalInertia(t,e){throw"calculateLocalInertia() not implemented for shape type "+this.type}calculateWorldAABB(t,e,s,i){throw"calculateWorldAABB() not implemented for shape type "+this.type}}F.idCounter=0;F.types=Ge;class O{constructor(t={}){this.position=void 0,this.quaternion=void 0,this.position=new c,this.quaternion=new j,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e=new c){return this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i=new c){return s.vsub(t,i),e.conjugate(Yt),Yt.vmult(i,i),i}static pointToWorldFrame(t,e,s,i=new c){return e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s=new c){return t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i=new c){return e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const Yt=new j;class ct extends F{constructor(t={}){const{vertices:e=[],faces:s=[],normals:i=[],axes:n,boundingSphereRadius:o}=t;super({type:F.types.CONVEXPOLYHEDRON});this.vertices=void 0,this.faces=void 0,this.faceNormals=void 0,this.worldVertices=void 0,this.worldVerticesNeedsUpdate=void 0,this.worldFaceNormals=void 0,this.worldFaceNormalsNeedsUpdate=void 0,this.uniqueAxes=void 0,this.uniqueEdges=void 0,this.vertices=e,this.faces=s,this.faceNormals=i,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new c;for(let n=0;n!==t.length;n++){const o=t[n],r=o.length;for(let l=0;l!==r;l++){const a=(l+1)%r;e[o[l]].vsub(e[o[a]],i),i.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(i)||s[u].almostEquals(i)){d=!0;break}d||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let i=0;i<this.faces[t].length;i++)if(!this.vertices[this.faces[t][i]])throw new Error("Vertex "+this.faces[t][i]+" not found!");const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(".faceNormals["+t+"] = Vec3("+e.toString()+") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.");for(let i=0;i<this.faces[t].length;i++)console.warn(".vertices["+this.faces[t][i]+"] = Vec3("+this.vertices[this.faces[t][i]].toString()+")")}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],n=this.vertices[s[1]],o=this.vertices[s[2]];ct.computeNormal(i,n,o,e)}static computeNormal(t,e,s,i){const n=new c,o=new c;e.vsub(t,o),s.vsub(e,n),n.cross(o,i),i.isZero()||i.normalize()}clipAgainstHull(t,e,s,i,n,o,r,l,a){const d=new c;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),n.vmult(d,d);const m=d.dot(o);m>h&&(h=m,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const m=s.vertices[s.faces[u][p]],y=new c;y.copy(m),n.vmult(y,y),i.vadd(y,y),f.push(y)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,l,a)}findSeparatingAxis(t,e,s,i,n,o,r,l){const a=new c,d=new c,u=new c,h=new c,f=new c,p=new c;let m=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],a);const v=y.testSepAxis(a,t,e,s,i,n);if(v===!1)return!1;v<m&&(m=v,o.copy(a))}else{const w=r?r.length:y.faces.length;for(let v=0;v<w;v++){const x=r?r[v]:v;a.copy(y.faceNormals[x]),s.vmult(a,a);const b=y.testSepAxis(a,t,e,s,i,n);if(b===!1)return!1;b<m&&(m=b,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){n.vmult(t.uniqueAxes[w],d);const v=y.testSepAxis(d,t,e,s,i,n);if(v===!1)return!1;v<m&&(m=v,o.copy(d))}else{const w=l?l.length:t.faces.length;for(let v=0;v<w;v++){const x=l?l[v]:v;d.copy(t.faceNormals[x]),n.vmult(d,d);const b=y.testSepAxis(d,t,e,s,i,n);if(b===!1)return!1;b<m&&(m=b,o.copy(d))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],h);for(let v=0;v!==t.uniqueEdges.length;v++)if(n.vmult(t.uniqueEdges[v],f),h.cross(f,p),!p.almostZero()){p.normalize();const x=y.testSepAxis(p,t,e,s,i,n);if(x===!1)return!1;x<m&&(m=x,o.copy(p))}}return i.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,i,n,o){const r=this;ct.project(r,t,s,i,Ft),ct.project(e,t,n,o,Nt);const l=Ft[0],a=Ft[1],d=Nt[0],u=Nt[1];if(l<u||d<a)return!1;const h=l-u,f=d-a;return h<f?h:f}calculateLocalInertia(t,e){const s=new c,i=new c;this.computeLocalAABB(i,s);const n=s.x-i.x,o=s.y-i.y,r=s.z-i.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*n*2*n+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,i,n,o,r){const l=new c,a=new c,d=new c,u=new c,h=new c,f=new c,p=new c,m=new c,y=this,w=[],v=i,x=w;let b=-1,E=Number.MAX_VALUE;for(let R=0;R<y.faces.length;R++){l.copy(y.faceNormals[R]),s.vmult(l,l);const _=l.dot(t);_<E&&(E=_,b=R)}if(b<0)return;const C=y.faces[b];C.connectedFaces=[];for(let R=0;R<y.faces.length;R++)for(let _=0;_<y.faces[R].length;_++)C.indexOf(y.faces[R][_])!==-1&&R!==b&&C.connectedFaces.indexOf(R)===-1&&C.connectedFaces.push(R);const A=C.length;for(let R=0;R<A;R++){const _=y.vertices[C[R]],W=y.vertices[C[(R+1)%A]];_.vsub(W,a),d.copy(a),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[b]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(_),s.vmult(f,f),e.vadd(f,f);const g=C.connectedFaces[R];p.copy(this.faceNormals[g]);const z=this.getPlaneConstantOfFace(g);m.copy(p),s.vmult(m,m);const I=z-m.dot(e);for(this.clipFaceAgainstPlane(v,x,m,I);v.length;)v.shift();for(;x.length;)v.push(x.shift())}p.copy(this.faceNormals[b]);const P=this.getPlaneConstantOfFace(b);m.copy(p),s.vmult(m,m);const L=P-m.dot(e);for(let R=0;R<v.length;R++){let _=m.dot(v[R])+L;if(_<=n&&(console.log("clamped: depth="+_+" to minDist="+n),_=n),_<=o){const W=v[R];if(_<=1e-6){const g={point:W,normal:m,depth:_};r.push(g)}}}}clipFaceAgainstPlane(t,e,s,i){let n,o;const r=t.length;if(r<2)return e;let l=t[t.length-1],a=t[0];n=s.dot(l)+i;for(let d=0;d<r;d++){if(a=t[d],o=s.dot(a)+i,n<0)if(o<0){const u=new c;u.copy(a),e.push(u)}else{const u=new c;l.lerp(a,n/(n-o),u),e.push(u)}else if(o<0){const u=new c;l.lerp(a,n/(n-o),u),e.push(u),e.push(a)}l=a,n=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,i=this.worldVertices;for(let n=0;n!==this.vertices.length;n++)e.vmult(s[n],i[n]),t.vadd(i[n],i[n]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const n=s[i];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,i=this.worldFaceNormals;for(let n=0;n!==e;n++)t.vmult(s[n],i[n]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const n=this.vertices;let o,r,l,a,d,u,h=new c;for(let f=0;f<n.length;f++){h.copy(n[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(a===void 0||p.x>a)&&(a=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(l===void 0||p.z<l)&&(l=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,l),i.set(a,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t=new c){const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let n=0;n<s;n++){const o=i[n];e.vmult(o,o)}for(let n=0;n<this.faceNormals.length;n++){const o=this.faceNormals[n];e.vmult(o,o)}}if(t)for(let n=0;n<s;n++){const o=i[n];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,n=new c;this.getAveragePointLocal(n);for(let o=0;o<this.faces.length;o++){let r=i[o];const l=e[s[o][0]],a=new c;t.vsub(l,a);const d=r.dot(a),u=new c;n.vsub(l,u);const h=r.dot(u);if(d<0&&h>0||d>0&&h<0)return!1}return-1}static project(t,e,s,i,n){const o=t.vertices.length,r=Ue;let l=0,a=0;const d=Xe,u=t.vertices;d.setZero(),O.vectorToLocalFrame(s,i,e,r),O.pointToLocalFrame(s,i,d,d);const h=d.dot(r);a=l=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>l&&(l=p),p<a&&(a=p)}if(a-=h,l-=h,a>l){const f=a;a=l,l=f}n[0]=l,n[1]=a}}const Ft=[],Nt=[],Ue=new c,Xe=new c;class Rt extends F{constructor(t){super({type:F.types.BOX});this.halfExtents=void 0,this.convexPolyhedronRepresentation=void 0,this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=c,n=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],l=new ct({vertices:n,faces:o,axes:r});this.convexPolyhedronRepresentation=l,l.material=this.material}calculateLocalInertia(t,e=new c){return Rt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),e!==void 0)for(let n=0;n!==s.length;n++)e.vmult(s[n],s[n]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,n=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let o=0;o<n.length;o++)nt.set(n[o][0],n[o][1],n[o][2]),e.vmult(nt,nt),t.vadd(nt,nt),s(nt.x,nt.y,nt.z)}calculateWorldAABB(t,e,s,i){const n=this.halfExtents;K[0].set(n.x,n.y,n.z),K[1].set(-n.x,n.y,n.z),K[2].set(-n.x,-n.y,n.z),K[3].set(-n.x,-n.y,-n.z),K[4].set(n.x,-n.y,-n.z),K[5].set(n.x,n.y,-n.z),K[6].set(-n.x,n.y,-n.z),K[7].set(n.x,-n.y,n.z);const o=K[0];e.vmult(o,o),t.vadd(o,o),i.copy(o),s.copy(o);for(let r=1;r<8;r++){const l=K[r];e.vmult(l,l),t.vadd(l,l);const a=l.x,d=l.y,u=l.z;a>i.x&&(i.x=a),d>i.y&&(i.y=d),u>i.z&&(i.z=u),a<s.x&&(s.x=a),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const nt=new c,K=[new c,new c,new c,new c,new c,new c,new c,new c],Pt={DYNAMIC:1,STATIC:2,KINEMATIC:4},Bt={AWAKE:0,SLEEPY:1,SLEEPING:2};class N extends jt{constructor(t={}){super();this.id=void 0,this.index=void 0,this.world=void 0,this.preStep=void 0,this.postStep=void 0,this.vlambda=void 0,this.collisionFilterGroup=void 0,this.collisionFilterMask=void 0,this.collisionResponse=void 0,this.position=void 0,this.previousPosition=void 0,this.interpolatedPosition=void 0,this.initPosition=void 0,this.velocity=void 0,this.initVelocity=void 0,this.force=void 0,this.mass=void 0,this.invMass=void 0,this.material=void 0,this.linearDamping=void 0,this.type=void 0,this.allowSleep=void 0,this.sleepState=void 0,this.sleepSpeedLimit=void 0,this.sleepTimeLimit=void 0,this.timeLastSleepy=void 0,this.wakeUpAfterNarrowphase=void 0,this.torque=void 0,this.quaternion=void 0,this.initQuaternion=void 0,this.previousQuaternion=void 0,this.interpolatedQuaternion=void 0,this.angularVelocity=void 0,this.initAngularVelocity=void 0,this.shapes=void 0,this.shapeOffsets=void 0,this.shapeOrientations=void 0,this.inertia=void 0,this.invInertia=void 0,this.invInertiaWorld=void 0,this.invMassSolve=void 0,this.invInertiaSolve=void 0,this.invInertiaWorldSolve=void 0,this.fixedRotation=void 0,this.angularDamping=void 0,this.linearFactor=void 0,this.angularFactor=void 0,this.aabb=void 0,this.aabbNeedsUpdate=void 0,this.boundingRadius=void 0,this.wlambda=void 0,this.isTrigger=void 0,this.id=N.idCounter++,this.index=-1,this.world=null,this.preStep=null,this.postStep=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?N.STATIC:N.DYNAMIC,typeof t.type==typeof N.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep!="undefined"?t.allowSleep:!0,this.sleepState=N.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit!="undefined"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit!="undefined"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new j,this.initQuaternion=new j,this.previousQuaternion=new j,this.interpolatedQuaternion=new j,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new Z,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new Z,this.fixedRotation=typeof t.fixedRotation!="undefined"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping!="undefined"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new X,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=N.AWAKE,this.wakeUpAfterNarrowphase=!1,t===N.SLEEPING&&this.dispatchEvent(N.wakeupEvent)}sleep(){this.sleepState=N.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===N.AWAKE&&s<i?(this.sleepState=N.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(N.sleepyEvent)):e===N.SLEEPY&&s>i?this.wakeUp():e===N.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(N.sleepEvent))}}updateSolveMassProperties(){this.sleepState===N.SLEEPING||this.type===N.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e=new c){return t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e=new c){return this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e=new c){return this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e=new c){return this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new c,n=new j;return e&&i.copy(e),s&&n.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let n=0;n!==s;n++){const o=t[n];o.updateBoundingSphereRadius();const r=e[n].length(),l=o.boundingSphereRadius;r+l>i&&(i=r+l)}this.boundingRadius=i}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,n=$e,o=Ze,r=this.quaternion,l=this.aabb,a=Ke;for(let d=0;d!==i;d++){const u=t[d];r.vmult(e[d],n),n.vadd(this.position,n),r.mult(s[d],o),u.calculateWorldAABB(n,o,a.lowerBound,a.upperBound),d===0?l.copy(a):l.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Qe,i=Je;s.setRotationFromQuaternion(this.quaternion),s.transpose(i),s.scale(e,s),s.mmult(i,this.invInertiaWorld)}}applyForce(t,e=new c){if(this.type!==N.DYNAMIC)return;this.sleepState===N.SLEEPING&&this.wakeUp();const s=ts;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e=new c){if(this.type!==N.DYNAMIC)return;const s=es,i=ss;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyTorque(t){this.type===N.DYNAMIC&&(this.sleepState===N.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e=new c){if(this.type!==N.DYNAMIC)return;this.sleepState===N.SLEEPING&&this.wakeUp();const s=e,i=is;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const n=ns;s.cross(t,n),this.invInertiaWorld.vmult(n,n),this.angularVelocity.vadd(n,this.angularVelocity)}applyLocalImpulse(t,e=new c){if(this.type!==N.DYNAMIC)return;const s=os,i=rs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=ls;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Rt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===N.DYNAMIC||this.type===N.KINEMATIC)||this.sleepState===N.SLEEPING)return;const i=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,l=this.torque,a=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;i.x+=r.x*f*h.x,i.y+=r.y*f*h.y,i.z+=r.z*f*h.z;const p=u.elements,m=this.angularFactor,y=l.x*m.x,w=l.y*m.y,v=l.z*m.z;n.x+=t*(p[0]*y+p[1]*w+p[2]*v),n.y+=t*(p[3]*y+p[4]*w+p[5]*v),n.z+=t*(p[6]*y+p[7]*w+p[8]*v),o.x+=i.x*t,o.y+=i.y*t,o.z+=i.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}N.idCounter=0;N.COLLIDE_EVENT_NAME="collide";N.DYNAMIC=Pt.DYNAMIC;N.STATIC=Pt.STATIC;N.KINEMATIC=Pt.KINEMATIC;N.AWAKE=Bt.AWAKE;N.SLEEPY=Bt.SLEEPY;N.SLEEPING=Bt.SLEEPING;N.wakeupEvent={type:"wakeup"};N.sleepyEvent={type:"sleepy"};N.sleepEvent={type:"sleep"};const $e=new c,Ze=new j,Ke=new X,Qe=new Z,Je=new Z,ts=new c,es=new c,ss=new c,is=new c,ns=new c,os=new c,rs=new c,ls=new c;class Ht{constructor(){this.world=void 0,this.useBoundingBoxes=void 0,this.dirty=void 0,this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)==0||(e.collisionFilterGroup&t.collisionFilterMask)==0||((t.type&N.STATIC)!=0||t.sleepState===N.SLEEPING)&&((e.type&N.STATIC)!=0||e.sleepState===N.SLEEPING))}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const n=cs;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2;n.lengthSquared()<o&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=as,i=hs,n=ds,o=t.length;for(let r=0;r!==o;r++)i[r]=t[r],n[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const l=i[r].id,a=n[r].id,d=l<a?l+","+a:a+","+l;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const l=s.keys.pop(),a=s[l];t.push(i[a]),e.push(n[a]),delete s[l]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const i=t.shapes[0],n=e.shapes[0];return Math.pow(i.boundingSphereRadius+n.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const cs=new c,as={keys:[]},hs=[],ds=[];new c;class us extends Ht{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,n=i.length;let o,r;for(let l=0;l!==n;l++)for(let a=0;a!==l;a++)o=i[l],r=i[a],!!this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s=[]){for(let i=0;i<t.bodies.length;i++){const n=t.bodies[i];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&s.push(n)}return s}}class wt{constructor(){this.rayFromWorld=void 0,this.rayToWorld=void 0,this.hitNormalWorld=void 0,this.hitPointWorld=void 0,this.hasHit=void 0,this.shape=void 0,this.body=void 0,this.hitFaceIndex=void 0,this.distance=void 0,this.shouldStop=void 0,this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=n,this.body=o,this.distance=r}}let Dt,Gt,Ut,Xt,$t,Zt,Kt;const Tt={CLOSEST:1,ANY:2,ALL:4};Dt=F.types.SPHERE;Gt=F.types.PLANE;Ut=F.types.BOX;Xt=F.types.CYLINDER;$t=F.types.CONVEXPOLYHEDRON;Zt=F.types.HEIGHTFIELD;Kt=F.types.TRIMESH;class Y{get[Dt](){return this._intersectSphere}get[Gt](){return this._intersectPlane}get[Ut](){return this._intersectBox}get[Xt](){return this._intersectConvex}get[$t](){return this._intersectConvex}get[Zt](){return this._intersectHeightfield}get[Kt](){return this._intersectTrimesh}constructor(t=new c,e=new c){this.from=void 0,this.to=void 0,this.direction=void 0,this.precision=void 0,this.checkCollisionResponse=void 0,this.skipBackfaces=void 0,this.collisionFilterMask=void 0,this.collisionFilterGroup=void 0,this.mode=void 0,this.result=void 0,this.hasHit=void 0,this.callback=void 0,this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Y.ANY,this.result=new wt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||Y.ANY,this.result=e.result||new wt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask!="undefined"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup!="undefined"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse!="undefined"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Qt),_t.length=0,t.broadphase.aabbQuery(t,Qt,_t),this.intersectBodies(_t),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)==0||(t.collisionFilterGroup&this.collisionFilterMask)==0)return;const i=ps,n=fs;for(let o=0,r=t.shapes.length;o<r;o++){const l=t.shapes[o];if(!(s&&!l.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],n),t.quaternion.vmult(t.shapeOffsets[o],i),i.vadd(t.position,i),this.intersectShape(l,n,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,i=t.length;!this.result.shouldStop&&s<i;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){const n=this.from;if(Fs(n,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,n)}_intersectPlane(t,e,s,i,n){const o=this.from,r=this.to,l=this.direction,a=new c(0,0,1);e.vmult(a,a);const d=new c;o.vsub(s,d);const u=d.dot(a);r.vsub(s,d);const h=d.dot(a);if(u*h>0||o.distanceTo(r)<u)return;const f=a.dot(l);if(Math.abs(f)<this.precision)return;const p=new c,m=new c,y=new c;o.vsub(s,p);const w=-a.dot(p)/f;l.scale(w,m),o.vadd(m,y),this.reportIntersection(a,y,n,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,n=this.from;e.x=Math.min(i.x,n.x),e.y=Math.min(i.y,n.y),e.z=Math.min(i.z,n.z),s.x=Math.max(i.x,n.x),s.y=Math.max(i.y,n.y),s.z=Math.max(i.z,n.z)}_intersectHeightfield(t,e,s,i,n){t.data,t.elementSize;const o=vs;o.from.copy(this.from),o.to.copy(this.to),O.pointToLocalFrame(s,e,o.from,o.from),O.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=ms;let l,a,d,u;l=a=0,d=u=t.data.length-1;const h=new X;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),l=Math.max(l,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=l;f<d;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),O.pointToWorldFrame(s,e,t.pillarOffset,xt),this._intersectConvex(t.pillarConvex,e,xt,i,n,Jt),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),O.pointToWorldFrame(s,e,t.pillarOffset,xt),this._intersectConvex(t.pillarConvex,e,xt,i,n,Jt)}}}_intersectSphere(t,e,s,i,n){const o=this.from,r=this.to,l=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-l**2,h=d**2-4*a*u,f=ys,p=ws;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1);else{const m=(-d-Math.sqrt(h))/(2*a),y=(-d+Math.sqrt(h))/(2*a);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1))}}_intersectConvex(t,e,s,i,n,o){const r=xs,l=te,a=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,m=this.to,y=p.distanceTo(m),w=a?a.length:d.length,v=this.result;for(let x=0;!v.shouldStop&&x<w;x++){const b=a?a[x]:x,E=d[b],C=h[b],A=e,P=s;l.copy(u[E[0]]),A.vmult(l,l),l.vadd(P,l),l.vsub(p,l),A.vmult(C,r);const L=f.dot(r);if(Math.abs(L)<this.precision)continue;const R=r.dot(l)/L;if(!(R<0)){f.scale(R,U),U.vadd(p,U),$.copy(u[E[0]]),A.vmult($,$),P.vadd($,$);for(let _=1;!v.shouldStop&&_<E.length-1;_++){Q.copy(u[E[_]]),J.copy(u[E[_+1]]),A.vmult(Q,Q),A.vmult(J,J),P.vadd(Q,Q),P.vadd(J,J);const W=U.distanceTo(p);!(Y.pointInTriangle(U,$,Q,J)||Y.pointInTriangle(U,Q,$,J))||W>y||this.reportIntersection(r,U,n,i,b)}}}}_intersectTrimesh(t,e,s,i,n,o){const r=gs,l=zs,a=As,d=te,u=bs,h=Es,f=Ss,p=Is,m=Cs,y=t.indices;t.vertices;const w=this.from,v=this.to,x=this.direction;a.position.copy(s),a.quaternion.copy(e),O.vectorToLocalFrame(s,e,x,u),O.pointToLocalFrame(s,e,w,h),O.pointToLocalFrame(s,e,v,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const b=h.distanceSquared(f);t.tree.rayQuery(this,a,l);for(let E=0,C=l.length;!this.result.shouldStop&&E!==C;E++){const A=l[E];t.getNormal(A,r),t.getVertex(y[A*3],$),$.vsub(h,d);const P=u.dot(r),L=r.dot(d)/P;if(L<0)continue;u.scale(L,U),U.vadd(h,U),t.getVertex(y[A*3+1],Q),t.getVertex(y[A*3+2],J);const R=U.distanceSquared(h);!(Y.pointInTriangle(U,Q,$,J)||Y.pointInTriangle(U,$,Q,J))||R>b||(O.vectorToWorldFrame(e,r,m),O.pointToWorldFrame(s,e,U,p),this.reportIntersection(m,p,n,i,A))}l.length=0}reportIntersection(t,e,s,i,n){const o=this.from,r=this.to,l=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof n!="undefined"?n:-1,this.mode){case Y.ALL:this.hasHit=!0,a.set(o,r,t,e,s,i,l),a.hasHit=!0,this.callback(a);break;case Y.CLOSEST:(l<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,i,l));break;case Y.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,i,l),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,i){i.vsub(e,ot),s.vsub(e,dt),t.vsub(e,Lt);const n=ot.dot(ot),o=ot.dot(dt),r=ot.dot(Lt),l=dt.dot(dt),a=dt.dot(Lt);let d,u;return(d=l*r-o*a)>=0&&(u=n*a-o*r)>=0&&d+u<n*l-o*o}}Y.CLOSEST=Tt.CLOSEST;Y.ANY=Tt.ANY;Y.ALL=Tt.ALL;const Qt=new X,_t=[],dt=new c,Lt=new c,ps=new c,fs=new j,U=new c,$=new c,Q=new c,J=new c,Jt={faceList:[0]},xt=new c,vs=new Y,ms=[],ys=new c,ws=new c,xs=new c,te=new c,gs=new c,bs=new c,Es=new c,Ss=new c,Cs=new c,Is=new c;new X;const zs=[],As=new O,ot=new c,gt=new c;function Fs(T,t,e){e.vsub(T,ot);const s=ot.dot(t);return t.scale(s,gt),gt.vadd(T,gt),e.distanceTo(gt)}class ut extends Ht{static checkBounds(t,e,s){let i,n;s===0?(i=t.position.x,n=e.position.x):s===1?(i=t.position.y,n=e.position.y):s===2&&(i=t.position.z,n=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,l=i+o;return n-r<l}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let n;for(n=e-1;n>=0&&!(t[n].aabb.lowerBound.x<=i.aabb.lowerBound.x);n--)t[n+1]=t[n];t[n+1]=i}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let n;for(n=e-1;n>=0&&!(t[n].aabb.lowerBound.y<=i.aabb.lowerBound.y);n--)t[n+1]=t[n];t[n+1]=i}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let n;for(n=e-1;n>=0&&!(t[n].aabb.lowerBound.z<=i.aabb.lowerBound.z);n--)t[n+1]=t[n];t[n+1]=i}return t}constructor(t){super();this.axisList=void 0,this.world=void 0,this.axisIndex=void 0,this._addBodyHandler=void 0,this._removeBodyHandler=void 0,this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const i=e.indexOf(s.body);i!==-1&&e.splice(i,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,n=i.length,o=this.axisIndex;let r,l;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==n;r++){const a=i[r];for(l=r+1;l<n;l++){const d=i[l];if(!!this.needBroadphaseCollision(a,d)){if(!ut.checkBounds(a,d,o))break;this.intersectionTest(a,d,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let i=0;i!==s;i++){const n=t[i];n.aabbNeedsUpdate&&n.updateAABB()}e===0?ut.insertionSortX(t):e===1?ut.insertionSortY(t):e===2&&ut.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,n=0,o=0;const r=this.axisList,l=r.length,a=1/l;for(let f=0;f!==l;f++){const p=r[f],m=p.position.x;t+=m,e+=m*m;const y=p.position.y;s+=y,i+=y*y;const w=p.position.z;n+=w,o+=w*w}const d=e-t*t*a,u=i-s*s*a,h=o-n*n*a;d>u?d>h?this.axisIndex=0:this.axisIndex=2:u>h?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s=[]){this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let n="x";i===1&&(n="y"),i===2&&(n="z");const o=this.axisList;e.lowerBound[n],e.upperBound[n];for(let r=0;r<o.length;r++){const l=o[r];l.aabbNeedsUpdate&&l.updateAABB(),l.aabb.overlaps(e)&&s.push(l)}return s}}class ee{static defaults(t={},e){for(let s in e)s in t||(t[s]=e[s]);return t}}class se{constructor(){this.spatial=void 0,this.rotational=void 0,this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class pt{constructor(t,e,s=-1e6,i=1e6){this.id=void 0,this.minForce=void 0,this.maxForce=void 0,this.bi=void 0,this.bj=void 0,this.si=void 0,this.sj=void 0,this.a=void 0,this.b=void 0,this.eps=void 0,this.jacobianElementA=void 0,this.jacobianElementB=void 0,this.enabled=void 0,this.multiplier=void 0,this.id=pt.idCounter++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new se,this.jacobianElementB=new se,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,n=t,o=s;this.a=4/(o*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(o*o*n*(1+4*i))}computeB(t,e,s){const i=this.computeGW(),n=this.computeGq(),o=this.computeGiMf();return-n*t-i*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.position,o=i.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.velocity,o=i.velocity,r=s.angularVelocity,l=i.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,l)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.vlambda,o=i.vlambda,r=s.wlambda,l=i.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,l)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.force,o=s.torque,r=i.force,l=i.torque,a=s.invMassSolve,d=i.invMassSolve;return n.scale(a,ie),r.scale(d,ne),s.invInertiaWorldSolve.vmult(o,oe),i.invInertiaWorldSolve.vmult(l,re),t.multiplyVectors(ie,oe)+e.multiplyVectors(ne,re)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.invMassSolve,o=i.invMassSolve,r=s.invInertiaWorldSolve,l=i.invInertiaWorldSolve;let a=n+o;return r.vmult(t.rotational,bt),a+=bt.dot(t.rotational),l.vmult(e.rotational,bt),a+=bt.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,n=this.bj,o=Ns;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,s.spatial,n.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda),n.invInertiaWorldSolve.vmult(s.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}pt.idCounter=0;const ie=new c,ne=new c,oe=new c,re=new c,bt=new c,Ns=new c;class Rs extends pt{constructor(t,e,s=1e6){super(t,e,0,s);this.restitution=void 0,this.ri=void 0,this.rj=void 0,this.ni=void 0,this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,i=this.bi,n=this.bj,o=this.ri,r=this.rj,l=Ps,a=Bs,d=i.velocity,u=i.angularVelocity;i.force,i.torque;const h=n.velocity,f=n.angularVelocity;n.force,n.torque;const p=Ts,m=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;o.cross(w,l),r.cross(w,a),w.negate(m.spatial),l.negate(m.rotational),y.spatial.copy(w),y.rotational.copy(a),p.copy(n.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(o,p);const v=w.dot(p),x=this.restitution+1,b=x*h.dot(w)-x*d.dot(w)+f.dot(a)-u.dot(l),E=this.computeGiMf();return-v*e-b*s-t*E}getImpactVelocityAlongNormal(){const t=_s,e=Ls,s=Ms,i=Ws,n=qs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,n),this.ni.dot(n)}}const Ps=new c,Bs=new c,Ts=new c,_s=new c,Ls=new c,Ms=new c,Ws=new c,qs=new c;new c;new c;new c;new c;new c;new c;class le extends pt{constructor(t,e,s){super(t,e,-s,s);this.ri=void 0,this.rj=void 0,this.t=void 0,this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,i=this.rj,n=Os,o=Vs,r=this.t;s.cross(r,n),i.cross(r,o);const l=this.jacobianElementA,a=this.jacobianElementB;r.negate(l.spatial),n.negate(l.rotational),a.spatial.copy(r),a.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Os=new c,Vs=new c;class Et{constructor(t,e,s){this.id=void 0,this.materials=void 0,this.friction=void 0,this.restitution=void 0,this.contactEquationStiffness=void 0,this.contactEquationRelaxation=void 0,this.frictionEquationStiffness=void 0,this.frictionEquationRelaxation=void 0,s=ee.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Et.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Et.idCounter=0;class St{constructor(t={}){this.name=void 0,this.id=void 0,this.friction=void 0,this.restitution=void 0;let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=St.idCounter++,this.friction=typeof t.friction!="undefined"?t.friction:-1,this.restitution=typeof t.restitution!="undefined"?t.restitution:-1}}St.idCounter=0;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class ks{constructor(t={}){this.maxSuspensionTravel=void 0,this.customSlidingRotationalSpeed=void 0,this.useCustomSlidingRotationalSpeed=void 0,this.sliding=void 0,this.chassisConnectionPointLocal=void 0,this.chassisConnectionPointWorld=void 0,this.directionLocal=void 0,this.directionWorld=void 0,this.axleLocal=void 0,this.axleWorld=void 0,this.suspensionRestLength=void 0,this.suspensionMaxLength=void 0,this.radius=void 0,this.suspensionStiffness=void 0,this.dampingCompression=void 0,this.dampingRelaxation=void 0,this.frictionSlip=void 0,this.forwardAcceleration=void 0,this.sideAcceleration=void 0,this.steering=void 0,this.rotation=void 0,this.deltaRotation=void 0,this.rollInfluence=void 0,this.maxSuspensionForce=void 0,this.engineForce=void 0,this.brake=void 0,this.isFrontWheel=void 0,this.clippedInvContactDotSuspension=void 0,this.suspensionRelativeVelocity=void 0,this.suspensionForce=void 0,this.slipInfo=void 0,this.skidInfo=void 0,this.suspensionLength=void 0,this.sideImpulse=void 0,this.forwardImpulse=void 0,this.raycastResult=void 0,this.worldTransform=void 0,this.isInContact=void 0,t=ee.defaults(t,{chassisConnectionPointLocal:new c,chassisConnectionPointWorld:new c,directionLocal:new c,directionWorld:new c,axleLocal:new c,axleWorld:new c,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new wt,this.worldTransform=new O,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,ae),t.getVelocityAtWorldPoint(ae,ce);const i=e.hitNormalWorld.dot(ce);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=1/.1;else{const n=-1/s;this.suspensionRelativeVelocity=i*n,this.clippedInvContactDotSuspension=n}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const ce=new c,ae=new c;class _n{constructor(t){this.chassisBody=void 0,this.wheelInfos=void 0,this.sliding=void 0,this.world=void 0,this.indexRightAxis=void 0,this.indexForwardAxis=void 0,this.indexUpAxis=void 0,this.constraints=void 0,this.preStepCallback=void 0,this.currentVehicleSpeedKmHour=void 0,this.numWheelsOnGround=void 0,this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=typeof t.indexRightAxis!="undefined"?t.indexRightAxis:2,this.indexForwardAxis=typeof t.indexForwardAxis!="undefined"?t.indexForwardAxis:0,this.indexUpAxis=typeof t.indexUpAxis!="undefined"?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t={}){const e=new ks(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){const s=this.wheelInfos[e];s.steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(t===0?1:0,t===1?1:0,t===2?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,i=this.chassisBody;for(let u=0;u<s;u++)this.updateWheelTransform(u);this.currentVehicleSpeedKmHour=3.6*i.velocity.length();const n=new c;this.getVehicleAxisWorld(this.indexForwardAxis,n),n.dot(i.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let u=0;u<s;u++)this.castRay(e[u]);this.updateSuspension(t);const o=new c,r=new c;for(let u=0;u<s;u++){const h=e[u];let f=h.suspensionForce;f>h.maxSuspensionForce&&(f=h.maxSuspensionForce),h.raycastResult.hitNormalWorld.scale(f*t,o),h.raycastResult.hitPointWorld.vsub(i.position,r),i.applyImpulse(o,r)}this.updateFriction(t);const l=new c,a=new c,d=new c;for(let u=0;u<s;u++){const h=e[u];i.getVelocityAtWorldPoint(h.chassisConnectionPointWorld,d);let f=1;switch(this.indexUpAxis){case 1:f=-1;break}if(h.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,a);const p=a.dot(h.raycastResult.hitNormalWorld);h.raycastResult.hitNormalWorld.scale(p,l),a.vsub(l,a);const m=a.dot(d);h.deltaRotation=f*m*t/h.radius}(h.sliding||!h.isInContact)&&h.engineForce!==0&&h.useCustomSlidingRotationalSpeed&&(h.deltaRotation=(h.engineForce>0?1:-1)*h.customSlidingRotationalSpeed*t),Math.abs(h.brake)>Math.abs(h.engineForce)&&(h.deltaRotation=0),h.rotation+=h.deltaRotation,h.deltaRotation*=.99}}updateSuspension(t){const s=this.chassisBody.mass,i=this.wheelInfos,n=i.length;for(let o=0;o<n;o++){const r=i[o];if(r.isInContact){let l;const a=r.suspensionRestLength,d=r.suspensionLength,u=a-d;l=r.suspensionStiffness*u*r.clippedInvContactDotSuspension;const h=r.suspensionRelativeVelocity;let f;h<0?f=r.dampingCompression:f=r.dampingRelaxation,l-=f*h,r.suspensionForce=l*s,r.suspensionForce<0&&(r.suspensionForce=0)}else r.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=Ds,s=Gs;this.updateWheelTransformWorld(t);const i=this.chassisBody;let n=-1;const o=t.suspensionRestLength+t.radius;t.directionWorld.scale(o,e);const r=t.chassisConnectionPointWorld;r.vadd(e,s);const l=t.raycastResult;l.reset();const a=i.collisionResponse;i.collisionResponse=!1,this.world.rayTest(r,s,l),i.collisionResponse=a;const d=l.body;if(t.raycastResult.groundObject=0,d){n=l.distance,t.raycastResult.hitNormalWorld=l.hitNormalWorld,t.isInContact=!0;const u=l.distance;t.suspensionLength=u-t.radius;const h=t.suspensionRestLength-t.maxSuspensionTravel,f=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<h&&(t.suspensionLength=h),t.suspensionLength>f&&(t.suspensionLength=f,t.raycastResult.reset());const p=t.raycastResult.hitNormalWorld.dot(t.directionWorld),m=new c;i.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,m);const y=t.raycastResult.hitNormalWorld.dot(m);if(p>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=1/.1;else{const w=-1/p;t.suspensionRelativeVelocity=y*w,t.clippedInvContactDotSuspension=w}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return n}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=js,s=Ys,i=Hs,n=this.wheelInfos[t];this.updateWheelTransformWorld(n),n.directionLocal.scale(-1,e),s.copy(n.axleLocal),e.cross(s,i),i.normalize(),s.normalize();const o=n.steering,r=new j;r.setFromAxisAngle(e,o);const l=new j;l.setFromAxisAngle(s,n.rotation);const a=n.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,a),a.mult(l,a),a.normalize();const d=n.worldTransform.position;d.copy(n.directionWorld),d.scale(n.suspensionLength,d),d.vadd(n.chassisConnectionPointWorld,d)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=Xs,s=this.wheelInfos,i=s.length,n=this.chassisBody,o=Zs,r=$s;this.numWheelsOnGround=0;for(let d=0;d<i;d++){const u=s[d];u.raycastResult.body&&this.numWheelsOnGround++,u.sideImpulse=0,u.forwardImpulse=0,o[d]||(o[d]=new c),r[d]||(r[d]=new c)}for(let d=0;d<i;d++){const u=s[d],h=u.raycastResult.body;if(h){const f=r[d];this.getWheelTransformWorld(d).vectorToWorldFrame(Us[this.indexRightAxis],f);const m=u.raycastResult.hitNormalWorld,y=f.dot(m);m.scale(y,e),f.vsub(e,f),f.normalize(),m.cross(f,o[d]),o[d].normalize(),u.sideImpulse=ai(n,u.raycastResult.hitPointWorld,h,u.raycastResult.hitPointWorld,f),u.sideImpulse*=Ks}}const l=1,a=.5;this.sliding=!1;for(let d=0;d<i;d++){const u=s[d],h=u.raycastResult.body;let f=0;if(u.slipInfo=1,h){const p=0,m=u.brake?u.brake:p;f=ei(n,h,u.raycastResult.hitPointWorld,o[d],m),f+=u.engineForce*t;const y=m/f;u.slipInfo*=y}if(u.forwardImpulse=0,u.skidInfo=1,h){u.skidInfo=1;const p=u.suspensionForce*t*u.frictionSlip,y=p*p;u.forwardImpulse=f;const w=u.forwardImpulse*a/u.forwardAcceleration,v=u.sideImpulse*l/u.sideAcceleration,x=w*w+v*v;if(u.sliding=!1,x>y){this.sliding=!0,u.sliding=!0;const b=p/Math.sqrt(x);u.skidInfo*=b}}}if(this.sliding)for(let d=0;d<i;d++){const u=s[d];u.sideImpulse!==0&&u.skidInfo<1&&(u.forwardImpulse*=u.skidInfo,u.sideImpulse*=u.skidInfo)}for(let d=0;d<i;d++){const u=s[d],h=new c;if(u.raycastResult.hitPointWorld.vsub(n.position,h),u.forwardImpulse!==0){const f=new c;o[d].scale(u.forwardImpulse,f),n.applyImpulse(f,h)}if(u.sideImpulse!==0){const f=u.raycastResult.body,p=new c;u.raycastResult.hitPointWorld.vsub(f.position,p);const m=new c;r[d].scale(u.sideImpulse,m),n.vectorToLocalFrame(h,h),h["xyz"[this.indexUpAxis]]*=u.rollInfluence,n.vectorToWorldFrame(h,h),n.applyImpulse(m,h),m.scale(-1,m),f.applyImpulse(m,p)}}}}const js=new c,Ys=new c,Hs=new c;new Y;const Ds=new c,Gs=new c,Us=[new c(1,0,0),new c(0,1,0),new c(0,0,1)],Xs=new c,$s=[],Zs=[],Ks=1,Qs=new c,Js=new c,ti=new c;function ei(T,t,e,s,i){let n=0;const o=e,r=Qs,l=Js,a=ti;T.getVelocityAtWorldPoint(o,r),t.getVelocityAtWorldPoint(o,l),r.vsub(l,a);const d=s.dot(a),u=he(T,e,s),h=he(t,e,s),p=1/(u+h);return n=-d*p,i<n&&(n=i),n<-i&&(n=-i),n}const si=new c,ii=new c,ni=new c,oi=new c;function he(T,t,e){const s=si,i=ii,n=ni,o=oi;return t.vsub(T.position,s),s.cross(e,i),T.invInertiaWorld.vmult(i,o),o.cross(s,n),T.invMass+e.dot(n)}const ri=new c,li=new c,ci=new c;function ai(T,t,e,s,i){if(i.lengthSquared()>1.1)return 0;const o=ri,r=li,l=ci;T.getVelocityAtWorldPoint(t,o),e.getVelocityAtWorldPoint(s,r),o.vsub(r,l);const a=i.dot(l),d=.2,u=1/(T.invMass+e.invMass);return-d*a*u}class Ln extends F{constructor(t){super({type:F.types.SPHERE});if(this.radius=void 0,this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e=new c){const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,i){const n=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const l=o[r];s[l]=t[l]-n,i[l]=t[l]+n}}}new c;new c;new c;new c;new c;new c;new c;new c;new c;class Mn extends ct{constructor(t=1,e=1,s=1,i=8){if(t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const n=i,o=[],r=[],l=[],a=[],d=[],u=Math.cos,h=Math.sin;o.push(new c(-e*h(0),-s*.5,e*u(0))),a.push(0),o.push(new c(-t*h(0),s*.5,t*u(0))),d.push(1);for(let p=0;p<n;p++){const m=2*Math.PI/n*(p+1),y=2*Math.PI/n*(p+.5);p<n-1?(o.push(new c(-e*h(m),-s*.5,e*u(m))),a.push(2*p+2),o.push(new c(-t*h(m),s*.5,t*u(m))),d.push(2*p+3),l.push([2*p,2*p+1,2*p+3,2*p+2])):l.push([2*p,2*p+1,1,0]),(n%2==1||p<n/2)&&r.push(new c(-h(y),0,u(y)))}l.push(a),r.push(new c(0,1,0));const f=[];for(let p=0;p<d.length;p++)f.push(d[d.length-p-1]);l.push(f);super({vertices:o,faces:l,axes:r});this.radiusTop=void 0,this.radiusBottom=void 0,this.height=void 0,this.numSegments=void 0,this.type=F.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=i}}new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new X;new c;new X;new c;new c;new c;new c;new c;new c;new c;new X;new c;new O;new X;class hi{constructor(){this.equations=void 0,this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class di extends hi{constructor(){super();this.iterations=void 0,this.tolerance=void 0,this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,l=e.bodies,a=l.length,d=t;let u,h,f,p,m,y;if(r!==0)for(let b=0;b!==a;b++)l[b].updateSolveMassProperties();const w=pi,v=fi,x=ui;w.length=r,v.length=r,x.length=r;for(let b=0;b!==r;b++){const E=o[b];x[b]=0,v[b]=E.computeB(d),w[b]=1/E.computeC()}if(r!==0){for(let C=0;C!==a;C++){const A=l[C],P=A.vlambda,L=A.wlambda;P.set(0,0,0),L.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let C=0;C!==r;C++){const A=o[C];u=v[C],h=w[C],y=x[C],m=A.computeGWlambda(),f=h*(u-m-A.eps*y),y+f<A.minForce?f=A.minForce-y:y+f>A.maxForce&&(f=A.maxForce-y),x[C]+=f,p+=f>0?f:-f,A.addToWlambda(f)}if(p*p<n)break}for(let C=0;C!==a;C++){const A=l[C],P=A.velocity,L=A.angularVelocity;A.vlambda.vmul(A.linearFactor,A.vlambda),P.vadd(A.vlambda,P),A.wlambda.vmul(A.angularFactor,A.wlambda),L.vadd(A.wlambda,L)}let b=o.length;const E=1/d;for(;b--;)o[b].multiplier=x[b]*E}return s}}const ui=[],pi=[],fi=[];class vi{constructor(){this.objects=[],this.type=Object}release(...t){const e=t.length;for(let s=0;s!==e;s++)this.objects.push(t[s]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class mi extends vi{constructor(...t){super(...t);this.type=c}constructObject(){return new c}}let de,ue,pe,fe,ve,me,ye,we,xe,ge,be,Ee,Se,Ce,Ie,ze,Ae,Fe,Ne,Re,Pe,Be,Te,_e,Le;const V={sphereSphere:F.types.SPHERE,spherePlane:F.types.SPHERE|F.types.PLANE,boxBox:F.types.BOX|F.types.BOX,sphereBox:F.types.SPHERE|F.types.BOX,planeBox:F.types.PLANE|F.types.BOX,convexConvex:F.types.CONVEXPOLYHEDRON,sphereConvex:F.types.SPHERE|F.types.CONVEXPOLYHEDRON,planeConvex:F.types.PLANE|F.types.CONVEXPOLYHEDRON,boxConvex:F.types.BOX|F.types.CONVEXPOLYHEDRON,sphereHeightfield:F.types.SPHERE|F.types.HEIGHTFIELD,boxHeightfield:F.types.BOX|F.types.HEIGHTFIELD,convexHeightfield:F.types.CONVEXPOLYHEDRON|F.types.HEIGHTFIELD,sphereParticle:F.types.PARTICLE|F.types.SPHERE,planeParticle:F.types.PLANE|F.types.PARTICLE,boxParticle:F.types.BOX|F.types.PARTICLE,convexParticle:F.types.PARTICLE|F.types.CONVEXPOLYHEDRON,cylinderCylinder:F.types.CYLINDER,sphereCylinder:F.types.SPHERE|F.types.CYLINDER,planeCylinder:F.types.PLANE|F.types.CYLINDER,boxCylinder:F.types.BOX|F.types.CYLINDER,convexCylinder:F.types.CONVEXPOLYHEDRON|F.types.CYLINDER,heightfieldCylinder:F.types.HEIGHTFIELD|F.types.CYLINDER,particleCylinder:F.types.PARTICLE|F.types.CYLINDER,sphereTrimesh:F.types.SPHERE|F.types.TRIMESH,planeTrimesh:F.types.PLANE|F.types.TRIMESH};de=V.sphereSphere;ue=V.spherePlane;pe=V.boxBox;fe=V.sphereBox;ve=V.planeBox;me=V.convexConvex;ye=V.sphereConvex;we=V.planeConvex;xe=V.boxConvex;ge=V.sphereHeightfield;be=V.boxHeightfield;Ee=V.convexHeightfield;Se=V.sphereParticle;Ce=V.planeParticle;Ie=V.boxParticle;ze=V.convexParticle;Ae=V.cylinderCylinder;Fe=V.sphereCylinder;Ne=V.planeCylinder;Re=V.boxCylinder;Pe=V.convexCylinder;Be=V.heightfieldCylinder;Te=V.particleCylinder;_e=V.sphereTrimesh;Le=V.planeTrimesh;class yi{get[de](){return this.sphereSphere}get[ue](){return this.spherePlane}get[pe](){return this.boxBox}get[fe](){return this.sphereBox}get[ve](){return this.planeBox}get[me](){return this.convexConvex}get[ye](){return this.sphereConvex}get[we](){return this.planeConvex}get[xe](){return this.boxConvex}get[ge](){return this.sphereHeightfield}get[be](){return this.boxHeightfield}get[Ee](){return this.convexHeightfield}get[Se](){return this.sphereParticle}get[Ce](){return this.planeParticle}get[Ie](){return this.boxParticle}get[ze](){return this.convexParticle}get[Ae](){return this.convexConvex}get[Fe](){return this.sphereConvex}get[Ne](){return this.planeConvex}get[Re](){return this.boxConvex}get[Pe](){return this.convexConvex}get[Be](){return this.heightfieldCylinder}get[Te](){return this.particleCylinder}get[_e](){return this.sphereTrimesh}get[Le](){return this.planeTrimesh}constructor(t){this.contactPointPool=void 0,this.frictionEquationPool=void 0,this.result=void 0,this.frictionResult=void 0,this.v3pool=void 0,this.world=void 0,this.currentContactMaterial=void 0,this.enableFrictionReduction=void 0,this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new mi,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Rs(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const l=this.currentContactMaterial;r.restitution=l.restitution,r.setSpookParams(l.contactEquationStiffness,l.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,d=i.material||e.material;return a&&d&&a.restitution>=0&&d.restitution>=0&&(r.restitution=a.restitution*d.restitution),r.si=n||s,r.sj=o||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,n=t.si,o=t.sj,r=this.world,l=this.currentContactMaterial;let a=l.friction;const d=n.material||s.material,u=o.material||i.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(a=d.friction*u.friction),a>0){const h=a*r.gravity.length();let f=s.invMass+i.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new le(s,i,h*f),y=p.length?p.pop():new le(s,i,h*f);return m.bi=y.bi=s,m.bj=y.bj=i,m.minForce=y.minForce=-h*f,m.maxForce=y.maxForce=h*f,m.ri.copy(t.ri),m.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(m.t,y.t),m.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),y.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),m.enabled=y.enabled=t.enabled,e.push(m,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];rt.setZero(),at.setZero(),ht.setZero();const n=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==n?(rt.vadd(e.ni,rt),at.vadd(e.ri,at),ht.vadd(e.rj,ht)):(rt.vsub(e.ni,rt),at.vadd(e.rj,at),ht.vadd(e.ri,ht));const o=1/t;at.scale(o,s.ri),ht.scale(o,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),rt.normalize(),rt.tangents(s.t,i.t)}getContacts(t,e,s,i,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=i,this.frictionResult=o;const l=gi,a=bi,d=wi,u=xi;for(let h=0,f=t.length;h!==f;h++){const p=t[h],m=e[h];let y=null;p.material&&m.material&&(y=s.getContactMaterial(p.material,m.material)||null);const w=p.type&N.KINEMATIC&&m.type&N.STATIC||p.type&N.STATIC&&m.type&N.KINEMATIC||p.type&N.KINEMATIC&&m.type&N.KINEMATIC;for(let v=0;v<p.shapes.length;v++){p.quaternion.mult(p.shapeOrientations[v],l),p.quaternion.vmult(p.shapeOffsets[v],d),d.vadd(p.position,d);const x=p.shapes[v];for(let b=0;b<m.shapes.length;b++){m.quaternion.mult(m.shapeOrientations[b],a),m.quaternion.vmult(m.shapeOffsets[b],u),u.vadd(m.position,u);const E=m.shapes[b];if(!(x.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(u)>x.boundingSphereRadius+E.boundingSphereRadius)continue;let C=null;x.material&&E.material&&(C=s.getContactMaterial(x.material,E.material)||null),this.currentContactMaterial=C||y||s.defaultContactMaterial;const A=x.type|E.type,P=this[A];if(P){let L=!1;x.type<E.type?L=P.call(this,x,E,d,u,l,a,p,m,x,E,w):L=P.call(this,E,x,u,d,a,l,m,p,x,E,w),L&&w&&(s.shapeOverlapKeeper.set(x.id,E.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,i,n,o,r,l,a,d,u){if(u)return s.distanceSquared(i)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,l,t,e,a,d);i.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(i,h.rj),h.rj.vsub(l.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,i,n,o,r,l,a,d,u){const h=this.createContactEquation(r,l,t,e,a,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(i,Ct),h.ni.scale(h.ni.dot(Ct),Me),Ct.vsub(Me,h.rj),-Ct.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(i,p),p.vsub(l.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,i,n,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,n,o,r,l,t,e,u)}sphereBox(t,e,s,i,n,o,r,l,a,d,u){const h=this.v3pool,f=Ui;s.vsub(i,It),e.getSideNormals(f,o);const p=t.radius;let m=!1;const y=$i,w=Zi,v=Ki;let x=null,b=0,E=0,C=0,A=null;for(let S=0,k=f.length;S!==k&&m===!1;S++){const M=Hi;M.copy(f[S]);const q=M.length();M.normalize();const G=It.dot(M);if(G<q+p&&G>0){const D=Di,B=Gi;D.copy(f[(S+1)%3]),B.copy(f[(S+2)%3]);const lt=D.length(),yt=B.length();D.normalize(),B.normalize();const zt=It.dot(D),At=It.dot(B);if(zt<lt&&zt>-lt&&At<yt&&At>-yt){const Wt=Math.abs(G-q-p);if((A===null||Wt<A)&&(A=Wt,E=zt,C=At,x=q,y.copy(M),w.copy(D),v.copy(B),b++,u))return!0}}}if(b){m=!0;const S=this.createContactEquation(r,l,t,e,a,d);y.scale(-p,S.ri),S.ni.copy(y),S.ni.negate(S.ni),y.scale(x,y),w.scale(E,w),y.vadd(w,y),v.scale(C,v),y.vadd(v,S.rj),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.vadd(i,S.rj),S.rj.vsub(l.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}let P=h.get();const L=Xi;for(let S=0;S!==2&&!m;S++)for(let k=0;k!==2&&!m;k++)for(let M=0;M!==2&&!m;M++)if(P.set(0,0,0),S?P.vadd(f[0],P):P.vsub(f[0],P),k?P.vadd(f[1],P):P.vsub(f[1],P),M?P.vadd(f[2],P):P.vsub(f[2],P),i.vadd(P,L),L.vsub(s,L),L.lengthSquared()<p*p){if(u)return!0;m=!0;const q=this.createContactEquation(r,l,t,e,a,d);q.ri.copy(L),q.ri.normalize(),q.ni.copy(q.ri),q.ri.scale(p,q.ri),q.rj.copy(P),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),q.rj.vadd(i,q.rj),q.rj.vsub(l.position,q.rj),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}h.release(P),P=null;const R=h.get(),_=h.get(),W=h.get(),g=h.get(),z=h.get(),I=f.length;for(let S=0;S!==I&&!m;S++)for(let k=0;k!==I&&!m;k++)if(S%3!=k%3){f[k].cross(f[S],R),R.normalize(),f[S].vadd(f[k],_),W.copy(s),W.vsub(_,W),W.vsub(i,W);const M=W.dot(R);R.scale(M,g);let q=0;for(;q===S%3||q===k%3;)q++;z.copy(s),z.vsub(g,z),z.vsub(_,z),z.vsub(i,z);const G=Math.abs(M),D=z.length();if(G<f[q].length()&&D<p){if(u)return!0;m=!0;const B=this.createContactEquation(r,l,t,e,a,d);_.vadd(g,B.rj),B.rj.copy(B.rj),z.negate(B.ni),B.ni.normalize(),B.ri.copy(B.rj),B.ri.vadd(i,B.ri),B.ri.vsub(s,B.ri),B.ri.normalize(),B.ri.scale(p,B.ri),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),B.rj.vadd(i,B.rj),B.rj.vsub(l.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}}h.release(R,_,W,g,z)}planeBox(t,e,s,i,n,o,r,l,a,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,n,o,r,l,t,e,u)}convexConvex(t,e,s,i,n,o,r,l,a,d,u,h,f){const p=pn;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,n,i,o,p,h,f)){const m=[],y=fn;t.clipAgainstHull(s,n,e,i,o,p,-100,100,m);let w=0;for(let v=0;v!==m.length;v++){if(u)return!0;const x=this.createContactEquation(r,l,t,e,a,d),b=x.ri,E=x.rj;p.negate(x.ni),m[v].normal.negate(y),y.scale(m[v].depth,y),m[v].point.vadd(y,b),E.copy(m[v].point),b.vsub(s,b),E.vsub(i,E),b.vadd(s,b),b.vsub(r.position,b),E.vadd(i,E),E.vsub(l.position,E),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,i,n,o,r,l,a,d,u){const h=this.v3pool;s.vsub(i,Qi);const f=e.faceNormals,p=e.faces,m=e.vertices,y=t.radius;let w=!1;for(let v=0;v!==m.length;v++){const x=m[v],b=sn;o.vmult(x,b),i.vadd(b,b);const E=en;if(b.vsub(s,E),E.lengthSquared()<y*y){if(u)return!0;w=!0;const C=this.createContactEquation(r,l,t,e,a,d);C.ri.copy(E),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(y,C.ri),b.vsub(i,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(i,C.rj),C.rj.vsub(l.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let v=0,x=p.length;v!==x&&w===!1;v++){const b=f[v],E=p[v],C=nn;o.vmult(b,C);const A=on;o.vmult(m[E[0]],A),A.vadd(i,A);const P=rn;C.scale(-y,P),s.vadd(P,P);const L=ln;P.vsub(A,L);const R=L.dot(C),_=cn;if(s.vsub(A,_),R<0&&_.dot(C)>0){const W=[];for(let g=0,z=E.length;g!==z;g++){const I=h.get();o.vmult(m[E[g]],I),i.vadd(I,I),W.push(I)}if(Yi(W,C,s)){if(u)return!0;w=!0;const g=this.createContactEquation(r,l,t,e,a,d);C.scale(-y,g.ri),C.negate(g.ni);const z=h.get();C.scale(-R,z);const I=h.get();C.scale(-y,I),s.vsub(i,g.rj),g.rj.vadd(I,g.rj),g.rj.vadd(z,g.rj),g.rj.vadd(i,g.rj),g.rj.vsub(l.position,g.rj),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),h.release(z),h.release(I),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult);for(let S=0,k=W.length;S!==k;S++)h.release(W[S]);return}else for(let g=0;g!==E.length;g++){const z=h.get(),I=h.get();o.vmult(m[E[(g+1)%E.length]],z),o.vmult(m[E[(g+2)%E.length]],I),i.vadd(z,z),i.vadd(I,I);const S=Ji;I.vsub(z,S);const k=tn;S.unit(k);const M=h.get(),q=h.get();s.vsub(z,q);const G=q.dot(k);k.scale(G,M),M.vadd(z,M);const D=h.get();if(M.vsub(s,D),G>0&&G*G<S.lengthSquared()&&D.lengthSquared()<y*y){if(u)return!0;const B=this.createContactEquation(r,l,t,e,a,d);M.vsub(i,B.rj),M.vsub(s,B.ni),B.ni.normalize(),B.ni.scale(y,B.ri),B.rj.vadd(i,B.rj),B.rj.vsub(l.position,B.rj),B.ri.vadd(s,B.ri),B.ri.vsub(r.position,B.ri),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult);for(let lt=0,yt=W.length;lt!==yt;lt++)h.release(W[lt]);h.release(z),h.release(I),h.release(M),h.release(D),h.release(q);return}h.release(z),h.release(I),h.release(M),h.release(D),h.release(q)}for(let g=0,z=W.length;g!==z;g++)h.release(W[g])}}}planeConvex(t,e,s,i,n,o,r,l,a,d,u){const h=an,f=hn;f.set(0,0,1),n.vmult(f,f);let p=0;const m=dn;for(let y=0;y!==e.vertices.length;y++)if(h.copy(e.vertices[y]),o.vmult(h,h),i.vadd(h,h),h.vsub(s,m),f.dot(m)<=0){if(u)return!0;const v=this.createContactEquation(r,l,t,e,a,d),x=un;f.scale(f.dot(m),x),h.vsub(x,x),x.vsub(s,v.ri),v.ni.copy(f),h.vsub(i,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(r.position,v.ri),v.rj.vadd(i,v.rj),v.rj.vsub(l.position,v.rj),this.result.push(v),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,n,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,n,o,r,l,t,e,u)}sphereHeightfield(t,e,s,i,n,o,r,l,a,d,u){const h=e.data,f=t.radius,p=e.elementSize,m=zn,y=In;O.pointToLocalFrame(i,o,s,y);let w=Math.floor((y.x-f)/p)-1,v=Math.ceil((y.x+f)/p)+1,x=Math.floor((y.y-f)/p)-1,b=Math.ceil((y.y+f)/p)+1;if(v<0||b<0||w>h.length||x>h[0].length)return;w<0&&(w=0),v<0&&(v=0),x<0&&(x=0),b<0&&(b=0),w>=h.length&&(w=h.length-1),v>=h.length&&(v=h.length-1),b>=h[0].length&&(b=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const E=[];e.getRectMinMax(w,x,v,b,E);const C=E[0],A=E[1];if(y.z-f>A||y.z+f<C)return;const P=this.result;for(let L=w;L<v;L++)for(let R=x;R<b;R++){const _=P.length;let W=!1;if(e.getConvexTrianglePillar(L,R,!1),O.pointToWorldFrame(i,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(W=this.sphereConvex(t,e.pillarConvex,s,m,n,o,r,l,t,e,u)),u&&W||(e.getConvexTrianglePillar(L,R,!0),O.pointToWorldFrame(i,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(W=this.sphereConvex(t,e.pillarConvex,s,m,n,o,r,l,t,e,u)),u&&W))return!0;if(P.length-_>2)return}}boxHeightfield(t,e,s,i,n,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,n,o,r,l,t,e,u)}convexHeightfield(t,e,s,i,n,o,r,l,a,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=Sn,y=Cn,w=En;O.pointToLocalFrame(i,o,s,w);let v=Math.floor((w.x-p)/f)-1,x=Math.ceil((w.x+p)/f)+1,b=Math.floor((w.y-p)/f)-1,E=Math.ceil((w.y+p)/f)+1;if(x<0||E<0||v>h.length||b>h[0].length)return;v<0&&(v=0),x<0&&(x=0),b<0&&(b=0),E<0&&(E=0),v>=h.length&&(v=h.length-1),x>=h.length&&(x=h.length-1),E>=h[0].length&&(E=h[0].length-1),b>=h[0].length&&(b=h[0].length-1);const C=[];e.getRectMinMax(v,b,x,E,C);const A=C[0],P=C[1];if(!(w.z-p>P||w.z+p<A))for(let L=v;L<x;L++)for(let R=b;R<E;R++){let _=!1;if(e.getConvexTrianglePillar(L,R,!1),O.pointToWorldFrame(i,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(_=this.convexConvex(t,e.pillarConvex,s,m,n,o,r,l,null,null,u,y,null)),u&&_||(e.getConvexTrianglePillar(L,R,!0),O.pointToWorldFrame(i,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(_=this.convexConvex(t,e.pillarConvex,s,m,n,o,r,l,null,null,u,y,null)),u&&_))return!0}}sphereParticle(t,e,s,i,n,o,r,l,a,d,u){const h=wn;if(h.set(0,0,1),i.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(l,r,e,t,a,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,i,n,o,r,l,a,d,u){const h=vn;h.set(0,0,1),r.quaternion.vmult(h,h);const f=mn;if(i.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const m=this.createContactEquation(l,r,e,t,a,d);m.ni.copy(h),m.ni.negate(m.ni),m.ri.set(0,0,0);const y=yn;h.scale(h.dot(i),y),i.vsub(y,y),m.rj.copy(y),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,i,n,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,n,o,r,l,t,e,u)}convexParticle(t,e,s,i,n,o,r,l,a,d,u){let h=-1;const f=gn,p=bn;let m=null;const y=xn;if(y.copy(i),y.vsub(s,y),n.conjugate(We),We.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let w=0,v=t.faces.length;w!==v;w++){const x=[t.worldVertices[t.faces[w][0]]],b=t.worldFaceNormals[w];i.vsub(x[0],qe);const E=-b.dot(qe);if(m===null||Math.abs(E)<Math.abs(m)){if(u)return!0;m=E,h=w,f.copy(b)}}if(h!==-1){const w=this.createContactEquation(l,r,e,t,a,d);f.scale(m,p),p.vadd(i,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const v=w.ri,x=w.rj;v.vadd(i,v),v.vsub(l.position,v),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,i,n,o,r,l,a,d,u){return this.convexHeightfield(e,t,i,s,o,n,l,r,a,d,u)}particleCylinder(t,e,s,i,n,o,r,l,a,d,u){return this.convexParticle(e,t,i,s,o,n,l,r,a,d,u)}sphereTrimesh(t,e,s,i,n,o,r,l,a,d,u){const h=Ni,f=Ri,p=Pi,m=Bi,y=Ti,w=_i,v=qi,x=Fi,b=zi,E=Oi;O.pointToLocalFrame(i,o,s,y);const C=t.radius;v.lowerBound.set(y.x-C,y.y-C,y.z-C),v.upperBound.set(y.x+C,y.y+C,y.z+C),e.getTrianglesInAABB(v,E);const A=Ai,P=t.radius*t.radius;for(let g=0;g<E.length;g++)for(let z=0;z<3;z++)if(e.getVertex(e.indices[E[g]*3+z],A),A.vsub(y,b),b.lengthSquared()<=P){if(x.copy(A),O.pointToWorldFrame(i,o,x,A),A.vsub(s,b),u)return!0;let I=this.createContactEquation(r,l,t,e,a,d);I.ni.copy(b),I.ni.normalize(),I.ri.copy(I.ni),I.ri.scale(t.radius,I.ri),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),I.rj.copy(A),I.rj.vsub(l.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult)}for(let g=0;g<E.length;g++)for(let z=0;z<3;z++){e.getVertex(e.indices[E[g]*3+z],h),e.getVertex(e.indices[E[g]*3+(z+1)%3],f),f.vsub(h,p),y.vsub(f,w);const I=w.dot(p);y.vsub(h,w);let S=w.dot(p);if(S>0&&I<0&&(y.vsub(h,w),m.copy(p),m.normalize(),S=w.dot(m),m.scale(S,w),w.vadd(h,w),w.distanceTo(y)<t.radius)){if(u)return!0;const M=this.createContactEquation(r,l,t,e,a,d);w.vsub(y,M.ni),M.ni.normalize(),M.ni.scale(t.radius,M.ri),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),O.pointToWorldFrame(i,o,w,w),w.vsub(l.position,M.rj),O.vectorToWorldFrame(o,M.ni,M.ni),O.vectorToWorldFrame(o,M.ri,M.ri),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult)}}const L=Li,R=Mi,_=Wi,W=Ii;for(let g=0,z=E.length;g!==z;g++){e.getTriangleVertices(E[g],L,R,_),e.getNormal(E[g],W),y.vsub(L,w);let I=w.dot(W);if(W.scale(I,w),y.vsub(w,w),I=w.distanceTo(y),Y.pointInTriangle(w,L,R,_)&&I<t.radius){if(u)return!0;let S=this.createContactEquation(r,l,t,e,a,d);w.vsub(y,S.ni),S.ni.normalize(),S.ni.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),O.pointToWorldFrame(i,o,w,w),w.vsub(l.position,S.rj),O.vectorToWorldFrame(o,S.ni,S.ni),O.vectorToWorldFrame(o,S.ri,S.ri),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,i,n,o,r,l,a,d,u){const h=new c,f=Ei;f.set(0,0,1),n.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const m=new c;m.copy(h),O.pointToWorldFrame(i,o,m,h);const y=Si;if(h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const v=this.createContactEquation(r,l,t,e,a,d);v.ni.copy(f);const x=Ci;f.scale(y.dot(f),x),h.vsub(x,x),v.ri.copy(x),v.ri.vsub(r.position,v.ri),v.rj.copy(h),v.rj.vsub(l.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const rt=new c,at=new c,ht=new c,wi=new c,xi=new c,gi=new j,bi=new j,Ei=new c,Si=new c,Ci=new c,Ii=new c,zi=new c,Ai=new c,Fi=new c,Ni=new c,Ri=new c,Pi=new c,Bi=new c,Ti=new c,_i=new c,Li=new c,Mi=new c,Wi=new c,qi=new X,Oi=[],Ct=new c,Me=new c,Vi=new c,ki=new c,ji=new c;function Yi(T,t,e){let s=null;const i=T.length;for(let n=0;n!==i;n++){const o=T[n],r=Vi;T[(n+1)%i].vsub(o,r);const l=ki;r.cross(t,l);const a=ji;e.vsub(o,a);const d=l.dot(a);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const It=new c,Hi=new c,Di=new c,Gi=new c,Ui=[new c,new c,new c,new c,new c,new c],Xi=new c,$i=new c,Zi=new c,Ki=new c,Qi=new c,Ji=new c,tn=new c,en=new c,sn=new c,nn=new c,on=new c,rn=new c,ln=new c,cn=new c,an=new c,hn=new c,dn=new c,un=new c,pn=new c,fn=new c,vn=new c,mn=new c,yn=new c,wn=new c,We=new j,xn=new c,gn=new c,qe=new c,bn=new c,En=new c,Sn=new c,Cn=[0],In=new c,zn=new c;class Oe{constructor(){this.current=void 0,this.previous=void 0,this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let n=0;for(;s>i[n];)n++;if(s!==i[n]){for(let o=i.length-1;o>=n;o--)i[o+1]=i[o];i[n]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,n=s.length,o=i.length;let r=0;for(let l=0;l<n;l++){let a=!1;const d=s[l];for(;d>i[r];)r++;a=d===i[r],a||Ve(t,d)}r=0;for(let l=0;l<o;l++){let a=!1;const d=i[l];for(;d>s[r];)r++;a=s[r]===d,a||Ve(e,d)}}}function Ve(T,t){T.push((t&4294901760)>>16,t&65535)}class An{constructor(){this.data={keys:[]}}get(t,e){if(t>e){const s=e;e=t,t=s}return this.data[t+"-"+e]}set(t,e,s){if(t>e){const n=e;e=t,t=n}const i=t+"-"+e;this.get(t,e)||this.data.keys.push(i),this.data[i]=s}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Wn extends jt{constructor(t={}){super();this.dt=void 0,this.allowSleep=void 0,this.contacts=void 0,this.frictionEquations=void 0,this.quatNormalizeSkip=void 0,this.quatNormalizeFast=void 0,this.time=void 0,this.stepnumber=void 0,this.default_dt=void 0,this.nextId=void 0,this.gravity=void 0,this.broadphase=void 0,this.bodies=void 0,this.hasActiveBodies=void 0,this.solver=void 0,this.constraints=void 0,this.narrowphase=void 0,this.collisionMatrix=void 0,this.collisionMatrixPrevious=void 0,this.bodyOverlapKeeper=void 0,this.shapeOverlapKeeper=void 0,this.materials=void 0,this.contactmaterials=void 0,this.contactMaterialTable=void 0,this.defaultMaterial=void 0,this.defaultContactMaterial=void 0,this.doProfiling=void 0,this.profile=void 0,this.accumulator=void 0,this.subsystems=void 0,this.addBodyEvent=void 0,this.removeBodyEvent=void 0,this.idToBodyMap=void 0,this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),this.broadphase=t.broadphase!==void 0?t.broadphase:new us,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new di,this.constraints=[],this.narrowphase=new yi(this),this.collisionMatrix=new kt,this.collisionMatrixPrevious=new kt,this.bodyOverlapKeeper=new Oe,this.shapeOverlapKeeper=new Oe,this.materials=[],this.contactmaterials=[],this.contactMaterialTable=new An,this.defaultMaterial=new St("default"),this.defaultContactMaterial=new Et(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}numObjects(){return this.bodies.length}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof wt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s={},i){return s.mode=Y.ALL,s.from=t,s.to=e,s.callback=i,Mt.intersectWorld(this,s)}raycastAny(t,e,s={},i){return s.mode=Y.ANY,s.from=t,s.to=e,s.result=i,Mt.intersectWorld(this,s)}raycastClosest(t,e,s={},i){return s.mode=Y.CLOSEST,s.from=t,s.to=e,s.result=i,Mt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof N&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(i!==-1){s.splice(i,1);for(let n=0;n!==s.length;n++)s[n].index=n;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const i=e[s].shapes;for(let n=0;n<i.length;n++){const o=i[n];if(o.id===t)return o}}return null}addMaterial(t){this.materials.push(t)}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}step(t,e,s=10){if(e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=H.now();let n=0;for(;this.accumulator>=t&&n<s&&(this.internalStep(t),this.accumulator-=t,n++,!(H.now()-i>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const l=this.bodies[r];l.previousPosition.lerp(l.position,o,l.interpolatedPosition),l.previousQuaternion.slerp(l.quaternion,o,l.interpolatedQuaternion),l.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Bn,i=Tn,n=this.numObjects(),o=this.bodies,r=this.solver,l=this.gravity,a=this.doProfiling,d=this.profile,u=N.DYNAMIC;let h=-1/0;const f=this.constraints,p=Pn;l.length();const m=l.x,y=l.y,w=l.z;let v=0;for(a&&(h=H.now()),v=0;v!==n;v++){const g=o[v];if(g.type===u){const z=g.force,I=g.mass;z.x+=I*m,z.y+=I*y,z.z+=I*w}}for(let g=0,z=this.subsystems.length;g!==z;g++)this.subsystems[g].update();a&&(h=H.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),a&&(d.broadphase=H.now()-h);let x=f.length;for(v=0;v!==x;v++){const g=f[v];if(!g.collideConnected)for(let z=s.length-1;z>=0;z-=1)(g.bodyA===s[z]&&g.bodyB===i[z]||g.bodyB===s[z]&&g.bodyA===i[z])&&(s.splice(z,1),i.splice(z,1))}this.collisionMatrixTick(),a&&(h=H.now());const b=Rn,E=e.length;for(v=0;v!==E;v++)b.push(e[v]);e.length=0;const C=this.frictionEquations.length;for(v=0;v!==C;v++)p.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,b,this.frictionEquations,p),a&&(d.narrowphase=H.now()-h),a&&(h=H.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const A=e.length;for(let g=0;g!==A;g++){const z=e[g],I=z.bi,S=z.bj,k=z.si,M=z.sj;let q;if(I.material&&S.material?q=this.getContactMaterial(I.material,S.material)||this.defaultContactMaterial:q=this.defaultContactMaterial,q.friction,I.material&&S.material&&(I.material.friction>=0&&S.material.friction>=0&&I.material.friction*S.material.friction,I.material.restitution>=0&&S.material.restitution>=0&&(z.restitution=I.material.restitution*S.material.restitution)),r.addEquation(z),I.allowSleep&&I.type===N.DYNAMIC&&I.sleepState===N.SLEEPING&&S.sleepState===N.AWAKE&&S.type!==N.STATIC){const G=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),D=S.sleepSpeedLimit**2;G>=D*2&&(I.wakeUpAfterNarrowphase=!0)}if(S.allowSleep&&S.type===N.DYNAMIC&&S.sleepState===N.SLEEPING&&I.sleepState===N.AWAKE&&I.type!==N.STATIC){const G=I.velocity.lengthSquared()+I.angularVelocity.lengthSquared(),D=I.sleepSpeedLimit**2;G>=D*2&&(S.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(I,S,!0),this.collisionMatrixPrevious.get(I,S)||(ft.body=S,ft.contact=z,I.dispatchEvent(ft),ft.body=I,S.dispatchEvent(ft)),this.bodyOverlapKeeper.set(I.id,S.id),this.shapeOverlapKeeper.set(k.id,M.id)}for(this.emitContactEvents(),a&&(d.makeContactConstraints=H.now()-h,h=H.now()),v=0;v!==n;v++){const g=o[v];g.wakeUpAfterNarrowphase&&(g.wakeUp(),g.wakeUpAfterNarrowphase=!1)}for(x=f.length,v=0;v!==x;v++){const g=f[v];g.update();for(let z=0,I=g.equations.length;z!==I;z++){const S=g.equations[z];r.addEquation(S)}}r.solve(t,this),a&&(d.solve=H.now()-h),r.removeAllEquations();const P=Math.pow;for(v=0;v!==n;v++){const g=o[v];if(g.type&u){const z=P(1-g.linearDamping,t),I=g.velocity;I.scale(z,I);const S=g.angularVelocity;if(S){const k=P(1-g.angularDamping,t);S.scale(k,S)}}}for(this.dispatchEvent(Nn),v=0;v!==n;v++){const g=o[v];g.preStep&&g.preStep.call(g)}a&&(h=H.now());const R=this.stepnumber%(this.quatNormalizeSkip+1)==0,_=this.quatNormalizeFast;for(v=0;v!==n;v++)o[v].integrate(t,R,_);for(this.clearForces(),this.broadphase.dirty=!0,a&&(d.integrate=H.now()-h),this.stepnumber+=1,this.dispatchEvent(Fn),v=0;v!==n;v++){const g=o[v],z=g.postStep;z&&z.call(g)}let W=!0;if(this.allowSleep)for(W=!1,v=0;v!==n;v++){const g=o[v];g.sleepTick(this.time),g.sleepState!==N.SLEEPING&&(W=!0)}this.hasActiveBodies=W}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(tt,et),t){for(let n=0,o=tt.length;n<o;n+=2)vt.bodyA=this.getBodyById(tt[n]),vt.bodyB=this.getBodyById(tt[n+1]),this.dispatchEvent(vt);vt.bodyA=vt.bodyB=null}if(e){for(let n=0,o=et.length;n<o;n+=2)mt.bodyA=this.getBodyById(et[n]),mt.bodyB=this.getBodyById(et[n+1]),this.dispatchEvent(mt);mt.bodyA=mt.bodyB=null}tt.length=et.length=0;const s=this.hasAnyEventListener("beginShapeContact"),i=this.hasAnyEventListener("endShapeContact");if((s||i)&&this.shapeOverlapKeeper.getDiff(tt,et),s){for(let n=0,o=tt.length;n<o;n+=2){const r=this.getShapeById(tt[n]),l=this.getShapeById(tt[n+1]);st.shapeA=r,st.shapeB=l,r&&(st.bodyA=r.body),l&&(st.bodyB=l.body),this.dispatchEvent(st)}st.bodyA=st.bodyB=st.shapeA=st.shapeB=null}if(i){for(let n=0,o=et.length;n<o;n+=2){const r=this.getShapeById(et[n]),l=this.getShapeById(et[n+1]);it.shapeA=r,it.shapeB=l,r&&(it.bodyA=r.body),l&&(it.bodyB=l.body),this.dispatchEvent(it)}it.bodyA=it.bodyB=it.shapeA=it.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const i=t[s];i.force,i.torque,i.force.set(0,0,0),i.torque.set(0,0,0)}}}new X;const Mt=new Y,H=globalThis.performance||{};if(!H.now){let T=Date.now();H.timing&&H.timing.navigationStart&&(T=H.timing.navigationStart),H.now=()=>Date.now()-T}const Fn={type:"postStep"},Nn={type:"preStep"},ft={type:N.COLLIDE_EVENT_NAME,body:null,contact:null},Rn=[],Pn=[],Bn=[],Tn=[],tt=[],et=[],vt={type:"beginContact",bodyA:null,bodyB:null},mt={type:"endContact",bodyA:null,bodyB:null},st={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},it={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};export{Rt as B,ct as C,St as M,j as Q,_n as R,F as S,c as V,Wn as W,Ln as a,Mn as b,Pt as c,N as d,Et as e,ut as f};
