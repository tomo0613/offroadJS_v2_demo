import{M as Ce,S as jt,B as Ht,P as Gt,a as it,C as Se,b as Bt,F as Ft}from"./three-c64a4383.js";class Z{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new l);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new l);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Z);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],a=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],m=n[0],y=n[1],w=n[2],v=n[3],b=n[4],E=n[5],I=n[6],R=n[7],M=n[8];return i[0]=o*m+r*v+c*I,i[1]=o*y+r*b+c*R,i[2]=o*w+r*E+c*M,i[3]=a*m+d*v+u*I,i[4]=a*y+d*b+u*R,i[5]=a*w+d*E+u*M,i[6]=h*m+f*v+p*I,i[7]=h*y+f*b+p*R,i[8]=h*w+f*E+p*M,e}scale(t,e){e===void 0&&(e=new Z);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new l);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let c=3;const a=c;let d;const u=4;let h;do{if(o=a-c,i[o+n*o]===0){for(r=o+1;r<a;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<a;r++){const f=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--c);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Z);const e=3,s=6,n=ze;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const c=r;let a;const d=s;let u;do{if(i=c-r,n[i+s*i]===0){for(o=i+1;o<c;o++)if(n[i+s*o]!==0){a=d;do u=d-a,n[u+s*i]+=n[u+s*o];while(--a);break}}if(n[i+s*i]!==0)for(o=i+1;o<c;o++){const h=n[i+s*o]/n[i+s*i];a=d;do u=d-a,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--a)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];a=s;do u=s-a,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--a)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];a=s;do u=s-a,n[u+s*i]=n[u+s*i]*h;while(--a)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,a=e*o,d=e*r,u=e*c,h=s*r,f=s*c,p=n*c,m=i*o,y=i*r,w=i*c,v=this.elements;return v[3*0+0]=1-(h+p),v[3*0+1]=d-w,v[3*0+2]=u+y,v[3*1+0]=d+w,v[3*1+1]=1-(a+p),v[3*1+2]=f-m,v[3*2+0]=u-y,v[3*2+1]=f+m,v[3*2+2]=1-(a+h),this}transpose(t){t===void 0&&(t=new Z);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const ze=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class l{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new l(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new l(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Z([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new l);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new l);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new l),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new l),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new l),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Ie,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Ae;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(Dt),Dt.almostEquals(t,e)}clone(){return new l(this.x,this.y,this.z)}}l.ZERO=new l(0,0,0);l.UNIT_X=new l(1,0,0);l.UNIT_Y=new l(0,1,0);l.UNIT_Z=new l(0,0,1);const Ie=new l,Ae=new l,Dt=new l;class U{constructor(t){t===void 0&&(t={}),this.lowerBound=new l,this.upperBound=new l,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let a=t[c];r&&(r.vmult(a,Yt),a=Yt),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new U().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,c=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&c}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const a=this.lowerBound,d=this.upperBound;t.copy(a),e.set(d.x,a.y,a.z),s.set(d.x,d.y,a.z),n.set(a.x,d.y,d.z),i.set(d.x,a.y,d.z),o.set(a.x,d.y,a.z),r.set(a.x,a.y,d.z),c.copy(d)}toLocalFrame(t,e){const s=Xt,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Xt,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(a,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,c),Math.max(a,d)),Math.max(u,h));return!(p<0||f>p)}}const Yt=new l,Xt=[new l,new l,new l,new l,new l,new l,new l,new l];class Ut{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class pe{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class j{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new l),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Re,n=Be;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new j);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,a=t.z,d=t.w;return e.x=s*d+o*r+n*a-i*c,e.y=n*d+o*c+i*r-s*a,e.z=i*d+o*a+s*c-n*r,e.w=o*d-s*r-n*c-i*a,e}inverse(t){t===void 0&&(t=new j);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new j),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new l);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,a=this.w,d=a*s+r*i-c*n,u=a*n+c*s-o*i,h=a*i+o*n-r*s,f=-o*s-r*n-c*i;return e.x=d*a+f*-o+u*-c-h*-r,e.y=u*a+f*-r+h*-o-d*-c,e.z=h*a+f*-c+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,c=this.z,a=this.w;switch(e){case"YZX":const d=o*r+c*a;if(d>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,f=c*c;s=Math.atan2(2*r*a-2*o*c,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*a-2*r*c,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),a=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=c*o*r+i*a*d,this.y=i*a*r-c*o*d,this.z=i*o*d+c*a*r,this.w=i*o*r-c*a*d):n==="YXZ"?(this.x=c*o*r+i*a*d,this.y=i*a*r-c*o*d,this.z=i*o*d-c*a*r,this.w=i*o*r+c*a*d):n==="ZXY"?(this.x=c*o*r-i*a*d,this.y=i*a*r+c*o*d,this.z=i*o*d+c*a*r,this.w=i*o*r-c*a*d):n==="ZYX"?(this.x=c*o*r-i*a*d,this.y=i*a*r+c*o*d,this.z=i*o*d-c*a*r,this.w=i*o*r+c*a*d):n==="YZX"?(this.x=c*o*r+i*a*d,this.y=i*a*r+c*o*d,this.z=i*o*d-c*a*r,this.w=i*o*r-c*a*d):n==="XZY"&&(this.x=c*o*r-i*a*d,this.y=i*a*r-c*o*d,this.z=i*o*d+c*a*r,this.w=i*o*r+c*a*d),this}clone(){return new j(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new j);const n=this.x,i=this.y,o=this.z,r=this.w;let c=t.x,a=t.y,d=t.z,u=t.w,h,f,p,m,y;return f=n*c+i*a+o*d+r*u,f<0&&(f=-f,c=-c,a=-a,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),m=Math.sin((1-e)*h)/p,y=Math.sin(e*h)/p):(m=1-e,y=e),s.x=m*n+y*c,s.y=m*i+y*a,s.z=m*o+y*d,s.w=m*r+y*u,s}integrate(t,e,s,n){n===void 0&&(n=new j);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,a=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*a),n.y+=h*(o*u+r*c-i*d),n.z+=h*(r*u+i*a-o*c),n.w+=h*(-i*c-o*a-r*d),n}}const Re=new l,Be=new l,Fe={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class F{constructor(t){t===void 0&&(t={}),this.id=F.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}F.idCounter=0;F.types=Fe;class V{constructor(t){t===void 0&&(t={}),this.position=new l,this.quaternion=new j,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return V.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return V.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),s.vsub(t,n),e.conjugate($t),$t.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new l),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new l),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new l),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const $t=new j;class dt extends F{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:F.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new l;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){const a=(c+1)%r;e[o[c]].vsub(e[o[a]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new l;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];dt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new l,o=new l;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,a){const d=new l;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),i.vmult(d,d);const m=d.dot(o);m>h&&(h=m,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const m=s.vertices[s.faces[u][p]],y=new l;y.copy(m),i.vmult(y,y),n.vadd(y,y),f.push(y)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,a)}findSeparatingAxis(t,e,s,n,i,o,r,c){const a=new l,d=new l,u=new l,h=new l,f=new l,p=new l;let m=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],a);const v=y.testSepAxis(a,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,o.copy(a))}else{const w=r?r.length:y.faces.length;for(let v=0;v<w;v++){const b=r?r[v]:v;a.copy(y.faceNormals[b]),s.vmult(a,a);const E=y.testSepAxis(a,t,e,s,n,i);if(E===!1)return!1;E<m&&(m=E,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const v=y.testSepAxis(d,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,o.copy(d))}else{const w=c?c.length:t.faces.length;for(let v=0;v<w;v++){const b=c?c[v]:v;d.copy(t.faceNormals[b]),i.vmult(d,d);const E=y.testSepAxis(d,t,e,s,n,i);if(E===!1)return!1;E<m&&(m=E,o.copy(d))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],h);for(let v=0;v!==t.uniqueEdges.length;v++)if(i.vmult(t.uniqueEdges[v],f),h.cross(f,p),!p.almostZero()){p.normalize();const b=y.testSepAxis(p,t,e,s,n,i);if(b===!1)return!1;b<m&&(m=b,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;dt.project(r,t,s,n,Nt),dt.project(e,t,i,o,Mt);const c=Nt[0],a=Nt[1],d=Mt[0],u=Mt[1];if(c<u||d<a)return!1;const h=c-u,f=d-a;return h<f?h:f}calculateLocalInertia(t,e){const s=new l,n=new l;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new l,a=new l,d=new l,u=new l,h=new l,f=new l,p=new l,m=new l,y=this,w=[],v=n,b=w;let E=-1,I=Number.MAX_VALUE;for(let B=0;B<y.faces.length;B++){c.copy(y.faceNormals[B]),s.vmult(c,c);const T=c.dot(t);T<I&&(I=T,E=B)}if(E<0)return;const R=y.faces[E];R.connectedFaces=[];for(let B=0;B<y.faces.length;B++)for(let T=0;T<y.faces[B].length;T++)R.indexOf(y.faces[B][T])!==-1&&B!==E&&R.connectedFaces.indexOf(B)===-1&&R.connectedFaces.push(B);const M=R.length;for(let B=0;B<M;B++){const T=y.vertices[R[B]],N=y.vertices[R[(B+1)%M]];T.vsub(N,a),d.copy(a),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[E]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(T),s.vmult(f,f),e.vadd(f,f);const x=R.connectedFaces[B];p.copy(this.faceNormals[x]);const A=this.getPlaneConstantOfFace(x);m.copy(p),s.vmult(m,m);const z=A-m.dot(e);for(this.clipFaceAgainstPlane(v,b,m,z);v.length;)v.shift();for(;b.length;)v.push(b.shift())}p.copy(this.faceNormals[E]);const C=this.getPlaneConstantOfFace(E);m.copy(p),s.vmult(m,m);const S=C-m.dot(e);for(let B=0;B<v.length;B++){let T=m.dot(v[B])+S;if(T<=i&&(console.log(`clamped: depth=${T} to minDist=${i}`),T=i),T<=o){const N=v[B];if(T<=1e-6){const x={point:N,normal:m,depth:T};r.push(x)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],a=t[0];i=s.dot(c)+n;for(let d=0;d<r;d++){if(a=t[d],o=s.dot(a)+n,i<0)if(o<0){const u=new l;u.copy(a),e.push(u)}else{const u=new l;c.lerp(a,i/(i-o),u),e.push(u)}else if(o<0){const u=new l;c.lerp(a,i/(i-o),u),e.push(u),e.push(a)}c=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new l);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new l);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,a,d,u,h=new l;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(a===void 0||p.x>a)&&(a=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(c===void 0||p.z<c)&&(c=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,c),n.set(a,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new l);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new l;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let c=n[r];const a=e[s[r][0]],d=new l;t.vsub(a,d);const u=c.dot(d),h=new l;o.vsub(a,h);const f=c.dot(h);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Ne;let c=0,a=0;const d=Me,u=t.vertices;d.setZero(),V.vectorToLocalFrame(s,n,e,r),V.pointToLocalFrame(s,n,d,d);const h=d.dot(r);a=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<a&&(a=p)}if(a-=h,c-=h,a>c){const f=a;a=c,c=f}i[0]=c,i[1]=a}}const Nt=[],Mt=[];new l;const Ne=new l,Me=new l;class Wt extends F{constructor(t){super({type:F.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=l,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new dt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new l),Wt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)ot.set(i[o][0],i[o][1],i[o][2]),e.vmult(ot,ot),t.vadd(ot,ot),s(ot.x,ot.y,ot.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;K[0].set(i.x,i.y,i.z),K[1].set(-i.x,i.y,i.z),K[2].set(-i.x,-i.y,i.z),K[3].set(-i.x,-i.y,-i.z),K[4].set(i.x,-i.y,-i.z),K[5].set(i.x,i.y,-i.z),K[6].set(-i.x,i.y,-i.z),K[7].set(i.x,-i.y,i.z);const o=K[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=K[r];e.vmult(c,c),t.vadd(c,c);const a=c.x,d=c.y,u=c.z;a>n.x&&(n.x=a),d>n.y&&(n.y=d),u>n.z&&(n.z=u),a<s.x&&(s.x=a),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const ot=new l,K=[new l,new l,new l,new l,new l,new l,new l,new l],qt={DYNAMIC:1,STATIC:2,KINEMATIC:4},kt={AWAKE:0,SLEEPY:1,SLEEPING:2};class P extends pe{constructor(t){t===void 0&&(t={}),super(),this.id=P.idCounter++,this.index=-1,this.world=null,this.vlambda=new l,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new l,this.previousPosition=new l,this.interpolatedPosition=new l,this.initPosition=new l,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new l,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new l,this.force=new l;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?P.STATIC:P.DYNAMIC,typeof t.type==typeof P.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=P.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new l,this.quaternion=new j,this.initQuaternion=new j,this.previousQuaternion=new j,this.interpolatedQuaternion=new j,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new l,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new l,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new l,this.invInertia=new l,this.invInertiaWorld=new Z,this.invMassSolve=0,this.invInertiaSolve=new l,this.invInertiaWorldSolve=new Z,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new l(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new l(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new U,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new l,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=P.AWAKE,this.wakeUpAfterNarrowphase=!1,t===P.SLEEPING&&this.dispatchEvent(P.wakeupEvent)}sleep(){this.sleepState=P.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===P.AWAKE&&s<n?(this.sleepState=P.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(P.sleepyEvent)):e===P.SLEEPY&&s>n?this.wakeUp():e===P.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(P.sleepEvent))}}updateSolveMassProperties(){this.sleepState===P.SLEEPING||this.type===P.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new l),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new l),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new l),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new l,i=new j;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Te,o=Pe,r=this.quaternion,c=this.aabb,a=_e;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),d===0?c.copy(a):c.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Le,n=We;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new l),this.type!==P.DYNAMIC)return;this.sleepState===P.SLEEPING&&this.wakeUp();const s=ke;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new l),this.type!==P.DYNAMIC)return;const s=Ve,n=Oe;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===P.DYNAMIC&&(this.sleepState===P.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new l),this.type!==P.DYNAMIC)return;this.sleepState===P.SLEEPING&&this.wakeUp();const s=e,n=je;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=He;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new l),this.type!==P.DYNAMIC)return;const s=Ge,n=De;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Ye;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Wt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new l;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===P.DYNAMIC||this.type===P.KINEMATIC)||this.sleepState===P.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,a=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=u.elements,m=this.angularFactor,y=c.x*m.x,w=c.y*m.y,v=c.z*m.z;i.x+=t*(p[0]*y+p[1]*w+p[2]*v),i.y+=t*(p[3]*y+p[4]*w+p[5]*v),i.z+=t*(p[6]*y+p[7]*w+p[8]*v),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}P.idCounter=0;P.COLLIDE_EVENT_NAME="collide";P.DYNAMIC=qt.DYNAMIC;P.STATIC=qt.STATIC;P.KINEMATIC=qt.KINEMATIC;P.AWAKE=kt.AWAKE;P.SLEEPY=kt.SLEEPY;P.SLEEPING=kt.SLEEPING;P.wakeupEvent={type:"wakeup"};P.sleepyEvent={type:"sleepy"};P.sleepEvent={type:"sleep"};const Te=new l,Pe=new j,_e=new U,Le=new Z,We=new Z,qe=new Z,ke=new l,Ve=new l,Oe=new l,je=new l,He=new l,Ge=new l,De=new l,Ye=new l;class fe{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&P.STATIC||t.sleepState===P.SLEEPING)&&(e.type&P.STATIC||e.sleepState===P.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=Xe;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=Ue,n=$e,i=Ze,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,a=i[r].id,d=c<a?`${c},${a}`:`${a},${c}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),a=s[c];t.push(n[a]),e.push(i[a]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new l;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Xe=new l;new l;new j;new l;const Ue={keys:[]},$e=[],Ze=[];new l;new l;new l;class Ke extends fe{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let a=0;a!==c;a++)o=n[c],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class yt{constructor(){this.rayFromWorld=new l,this.rayToWorld=new l,this.hitNormalWorld=new l,this.hitPointWorld=new l,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let me,ve,ye,we,xe,ge,be;const Vt={CLOSEST:1,ANY:2,ALL:4};me=F.types.SPHERE;ve=F.types.PLANE;ye=F.types.BOX;we=F.types.CYLINDER;xe=F.types.CONVEXPOLYHEDRON;ge=F.types.HEIGHTFIELD;be=F.types.TRIMESH;class H{get[me](){return this._intersectSphere}get[ve](){return this._intersectPlane}get[ye](){return this._intersectBox}get[we](){return this._intersectConvex}get[xe](){return this._intersectConvex}get[ge](){return this._intersectHeightfield}get[be](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new l),e===void 0&&(e=new l),this.from=t.clone(),this.to=e.clone(),this.direction=new l,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=H.ANY,this.result=new yt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||H.ANY,this.result=e.result||new yt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Zt),Tt.length=0,t.broadphase.aabbQuery(t,Zt,Tt),this.intersectBodies(Tt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=Qe,i=Je;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if(!(s&&!c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(ps(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,a=new l(0,0,1);e.vmult(a,a);const d=new l;o.vsub(s,d);const u=d.dot(a);r.vsub(s,d);const h=d.dot(a);if(u*h>0||o.distanceTo(r)<u)return;const f=a.dot(c);if(Math.abs(f)<this.precision)return;const p=new l,m=new l,y=new l;o.vsub(s,p);const w=-a.dot(p)/f;c.scale(w,m),o.vadd(m,y),this.reportIntersection(a,y,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=ts;o.from.copy(this.from),o.to.copy(this.to),V.pointToLocalFrame(s,e,o.from,o.from),V.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=es;let c,a,d,u;c=a=0,d=u=t.data.length-1;const h=new U;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),c=Math.max(c,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<d;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),V.pointToWorldFrame(s,e,t.pillarOffset,gt),this._intersectConvex(t.pillarConvex,e,gt,n,i,Kt),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),V.pointToWorldFrame(s,e,t.pillarOffset,gt),this._intersectConvex(t.pillarConvex,e,gt,n,i,Kt)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,c=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-c**2,h=d**2-4*a*u,f=ss,p=ns;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const m=(-d-Math.sqrt(h))/(2*a),y=(-d+Math.sqrt(h))/(2*a);if(m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=is,c=Qt,a=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,m=this.to,y=p.distanceTo(m),w=a?a.length:d.length,v=this.result;for(let b=0;!v.shouldStop&&b<w;b++){const E=a?a[b]:b,I=d[E],R=h[E],M=e,C=s;c.copy(u[I[0]]),M.vmult(c,c),c.vadd(C,c),c.vsub(p,c),M.vmult(R,r);const S=f.dot(r);if(Math.abs(S)<this.precision)continue;const B=r.dot(c)/S;if(!(B<0)){f.scale(B,X),X.vadd(p,X),$.copy(u[I[0]]),M.vmult($,$),C.vadd($,$);for(let T=1;!v.shouldStop&&T<I.length-1;T++){Q.copy(u[I[T]]),J.copy(u[I[T+1]]),M.vmult(Q,Q),M.vmult(J,J),C.vadd(Q,Q),C.vadd(J,J);const N=X.distanceTo(p);!(H.pointInTriangle(X,$,Q,J)||H.pointInTriangle(X,Q,$,J))||N>y||this.reportIntersection(r,X,i,n,E)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=os,c=ds,a=us,d=Qt,u=rs,h=cs,f=ls,p=hs,m=as,y=t.indices;t.vertices;const w=this.from,v=this.to,b=this.direction;a.position.copy(s),a.quaternion.copy(e),V.vectorToLocalFrame(s,e,b,u),V.pointToLocalFrame(s,e,w,h),V.pointToLocalFrame(s,e,v,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const E=h.distanceSquared(f);t.tree.rayQuery(this,a,c);for(let I=0,R=c.length;!this.result.shouldStop&&I!==R;I++){const M=c[I];t.getNormal(M,r),t.getVertex(y[M*3],$),$.vsub(h,d);const C=u.dot(r),S=r.dot(d)/C;if(S<0)continue;u.scale(S,X),X.vadd(h,X),t.getVertex(y[M*3+1],Q),t.getVertex(y[M*3+2],J);const B=X.distanceSquared(h);!(H.pointInTriangle(X,Q,$,J)||H.pointInTriangle(X,$,Q,J))||B>E||(V.vectorToWorldFrame(e,r,m),V.pointToWorldFrame(s,e,X,p),this.reportIntersection(m,p,i,n,M))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case H.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,c),a.hasHit=!0,this.callback(a);break;case H.CLOSEST:(c<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c));break;case H.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,c),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,ct),s.vsub(e,ut),t.vsub(e,Pt);const i=ct.dot(ct),o=ct.dot(ut),r=ct.dot(Pt),c=ut.dot(ut),a=ut.dot(Pt);let d,u;return(d=c*r-o*a)>=0&&(u=i*a-o*r)>=0&&d+u<i*c-o*o}}H.CLOSEST=Vt.CLOSEST;H.ANY=Vt.ANY;H.ALL=Vt.ALL;const Zt=new U,Tt=[],ut=new l,Pt=new l,Qe=new l,Je=new j,X=new l,$=new l,Q=new l,J=new l;new l;new yt;const Kt={faceList:[0]},gt=new l,ts=new H,es=[],ss=new l,ns=new l,is=new l;new l;new l;const Qt=new l,os=new l,rs=new l,cs=new l,ls=new l,as=new l,hs=new l;new U;const ds=[],us=new V,ct=new l,bt=new l;function ps(_,t,e){e.vsub(_,ct);const s=ct.dot(t);return t.scale(s,bt),bt.vadd(_,bt),e.distanceTo(bt)}class vt extends fe{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,c=n+o;return i-r<c}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,o=this.axisIndex;let r,c;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==i;r++){const a=n[r];for(c=r+1;c<i;c++){const d=n[c];if(this.needBroadphaseCollision(a,d)){if(!vt.checkBounds(a,d,o))break;this.intersectionTest(a,d,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?vt.insertionSortX(t):e===1?vt.insertionSortY(t):e===2&&vt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,o=0;const r=this.axisList,c=r.length,a=1/c;for(let f=0;f!==c;f++){const p=r[f],m=p.position.x;t+=m,e+=m*m;const y=p.position.y;s+=y,n+=y*y;const w=p.position.z;i+=w,o+=w*w}const d=e-t*t*a,u=n-s*s*a,h=o-i*i*a;d>u?d>h?this.axisIndex=0:this.axisIndex=2:u>h?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const o=this.axisList;e.lowerBound[i],e.upperBound[i];for(let r=0;r<o.length;r++){const c=o[r];c.aabbNeedsUpdate&&c.updateAABB(),c.aabb.overlaps(e)&&s.push(c)}return s}}class Ee{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Jt{constructor(){this.spatial=new l,this.rotational=new l}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class wt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=wt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Jt,this.jacobianElementB=new Jt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,c=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,c=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,c=n.torque,a=s.invMassSolve,d=n.invMassSolve;return i.scale(a,te),r.scale(d,ee),s.invInertiaWorldSolve.vmult(o,se),n.invInertiaWorldSolve.vmult(c,ne),t.multiplyVectors(te,se)+e.multiplyVectors(ee,ne)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,c=n.invInertiaWorldSolve;let a=i+o;return r.vmult(t.rotational,Et),a+=Et.dot(t.rotational),c.vmult(e.rotational,Et),a+=Et.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=fs;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}wt.idCounter=0;const te=new l,ee=new l,se=new l,ne=new l,Et=new l,fs=new l;class ms extends wt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new l,this.rj=new l,this.ni=new l}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=vs,a=ys,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=ws,m=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;o.cross(w,c),r.cross(w,a),w.negate(m.spatial),c.negate(m.rotational),y.spatial.copy(w),y.rotational.copy(a),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const v=w.dot(p),b=this.restitution+1,E=b*h.dot(w)-b*d.dot(w)+f.dot(a)-u.dot(c),I=this.computeGiMf();return-v*e-E*s-t*I}getImpactVelocityAlongNormal(){const t=xs,e=gs,s=bs,n=Es,i=Cs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const vs=new l,ys=new l,ws=new l,xs=new l,gs=new l,bs=new l,Es=new l,Cs=new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;class ie extends wt{constructor(t,e,s){super(t,e,-s,s),this.ri=new l,this.rj=new l,this.t=new l}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Ss,o=zs,r=this.t;s.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,a=this.jacobianElementB;r.negate(c.spatial),i.negate(c.rotational),a.spatial.copy(r),a.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Ss=new l,zs=new l;class zt{constructor(t,e,s){s=Ee.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=zt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}zt.idCounter=0;class It{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=It.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}It.idCounter=0;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;class Is{constructor(t){t===void 0&&(t={}),t=Ee.defaults(t,{chassisConnectionPointLocal:new l,chassisConnectionPointWorld:new l,directionLocal:new l,directionWorld:new l,axleLocal:new l,axleWorld:new l,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new yt,this.worldTransform=new V,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,re),t.getVelocityAtWorldPoint(re,oe);const n=e.hitNormalWorld.dot(oe);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=1/.1;else{const i=-1/s;this.suspensionRelativeVelocity=n*i,this.clippedInvContactDotSuspension=i}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const oe=new l,re=new l;class gi{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=typeof t.indexRightAxis<"u"?t.indexRightAxis:2,this.indexForwardAxis=typeof t.indexForwardAxis<"u"?t.indexForwardAxis:0,this.indexUpAxis=typeof t.indexUpAxis<"u"?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){t===void 0&&(t={});const e=new Is(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){const s=this.wheelInfos[e];s.steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(t===0?1:0,t===1?1:0,t===2?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,n=this.chassisBody;for(let u=0;u<s;u++)this.updateWheelTransform(u);this.currentVehicleSpeedKmHour=3.6*n.velocity.length();const i=new l;this.getVehicleAxisWorld(this.indexForwardAxis,i),i.dot(n.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let u=0;u<s;u++)this.castRay(e[u]);this.updateSuspension(t);const o=new l,r=new l;for(let u=0;u<s;u++){const h=e[u];let f=h.suspensionForce;f>h.maxSuspensionForce&&(f=h.maxSuspensionForce),h.raycastResult.hitNormalWorld.scale(f*t,o),h.raycastResult.hitPointWorld.vsub(n.position,r),n.applyImpulse(o,r)}this.updateFriction(t);const c=new l,a=new l,d=new l;for(let u=0;u<s;u++){const h=e[u];n.getVelocityAtWorldPoint(h.chassisConnectionPointWorld,d);let f=1;switch(this.indexUpAxis){case 1:f=-1;break}if(h.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,a);const p=a.dot(h.raycastResult.hitNormalWorld);h.raycastResult.hitNormalWorld.scale(p,c),a.vsub(c,a);const m=a.dot(d);h.deltaRotation=f*m*t/h.radius}(h.sliding||!h.isInContact)&&h.engineForce!==0&&h.useCustomSlidingRotationalSpeed&&(h.deltaRotation=(h.engineForce>0?1:-1)*h.customSlidingRotationalSpeed*t),Math.abs(h.brake)>Math.abs(h.engineForce)&&(h.deltaRotation=0),h.rotation+=h.deltaRotation,h.deltaRotation*=.99}}updateSuspension(t){const s=this.chassisBody.mass,n=this.wheelInfos,i=n.length;for(let o=0;o<i;o++){const r=n[o];if(r.isInContact){let c;const a=r.suspensionRestLength,d=r.suspensionLength,u=a-d;c=r.suspensionStiffness*u*r.clippedInvContactDotSuspension;const h=r.suspensionRelativeVelocity;let f;h<0?f=r.dampingCompression:f=r.dampingRelaxation,c-=f*h,r.suspensionForce=c*s,r.suspensionForce<0&&(r.suspensionForce=0)}else r.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=Fs,s=Ns;this.updateWheelTransformWorld(t);const n=this.chassisBody;let i=-1;const o=t.suspensionRestLength+t.radius;t.directionWorld.scale(o,e);const r=t.chassisConnectionPointWorld;r.vadd(e,s);const c=t.raycastResult;c.reset();const a=n.collisionResponse;n.collisionResponse=!1,this.world.rayTest(r,s,c),n.collisionResponse=a;const d=c.body;if(t.raycastResult.groundObject=0,d){i=c.distance,t.raycastResult.hitNormalWorld=c.hitNormalWorld,t.isInContact=!0;const u=c.distance;t.suspensionLength=u-t.radius;const h=t.suspensionRestLength-t.maxSuspensionTravel,f=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<h&&(t.suspensionLength=h),t.suspensionLength>f&&(t.suspensionLength=f,t.raycastResult.reset());const p=t.raycastResult.hitNormalWorld.dot(t.directionWorld),m=new l;n.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,m);const y=t.raycastResult.hitNormalWorld.dot(m);if(p>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=1/.1;else{const w=-1/p;t.suspensionRelativeVelocity=y*w,t.clippedInvContactDotSuspension=w}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return i}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=As,s=Rs,n=Bs,i=this.wheelInfos[t];this.updateWheelTransformWorld(i),i.directionLocal.scale(-1,e),s.copy(i.axleLocal),e.cross(s,n),n.normalize(),s.normalize();const o=i.steering,r=new j;r.setFromAxisAngle(e,o);const c=new j;c.setFromAxisAngle(s,i.rotation);const a=i.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,a),a.mult(c,a),a.normalize();const d=i.worldTransform.position;d.copy(i.directionWorld),d.scale(i.suspensionLength,d),d.vadd(i.chassisConnectionPointWorld,d)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=Ts,s=this.wheelInfos,n=s.length,i=this.chassisBody,o=_s,r=Ps;this.numWheelsOnGround=0;for(let d=0;d<n;d++){const u=s[d];u.raycastResult.body&&this.numWheelsOnGround++,u.sideImpulse=0,u.forwardImpulse=0,o[d]||(o[d]=new l),r[d]||(r[d]=new l)}for(let d=0;d<n;d++){const u=s[d],h=u.raycastResult.body;if(h){const f=r[d];this.getWheelTransformWorld(d).vectorToWorldFrame(Ms[this.indexRightAxis],f);const m=u.raycastResult.hitNormalWorld,y=f.dot(m);m.scale(y,e),f.vsub(e,f),f.normalize(),m.cross(f,o[d]),o[d].normalize(),u.sideImpulse=Us(i,u.raycastResult.hitPointWorld,h,u.raycastResult.hitPointWorld,f),u.sideImpulse*=Ls}}const c=1,a=.5;this.sliding=!1;for(let d=0;d<n;d++){const u=s[d],h=u.raycastResult.body;let f=0;if(u.slipInfo=1,h){const m=u.brake?u.brake:0;f=Vs(i,h,u.raycastResult.hitPointWorld,o[d],m),f+=u.engineForce*t;const y=m/f;u.slipInfo*=y}if(u.forwardImpulse=0,u.skidInfo=1,h){u.skidInfo=1;const p=u.suspensionForce*t*u.frictionSlip,y=p*p;u.forwardImpulse=f;const w=u.forwardImpulse*a/u.forwardAcceleration,v=u.sideImpulse*c/u.sideAcceleration,b=w*w+v*v;if(u.sliding=!1,b>y){this.sliding=!0,u.sliding=!0;const E=p/Math.sqrt(b);u.skidInfo*=E}}}if(this.sliding)for(let d=0;d<n;d++){const u=s[d];u.sideImpulse!==0&&u.skidInfo<1&&(u.forwardImpulse*=u.skidInfo,u.sideImpulse*=u.skidInfo)}for(let d=0;d<n;d++){const u=s[d],h=new l;if(u.raycastResult.hitPointWorld.vsub(i.position,h),u.forwardImpulse!==0){const f=new l;o[d].scale(u.forwardImpulse,f),i.applyImpulse(f,h)}if(u.sideImpulse!==0){const f=u.raycastResult.body,p=new l;u.raycastResult.hitPointWorld.vsub(f.position,p);const m=new l;r[d].scale(u.sideImpulse,m),i.vectorToLocalFrame(h,h),h["xyz"[this.indexUpAxis]]*=u.rollInfluence,i.vectorToWorldFrame(h,h),i.applyImpulse(m,h),m.scale(-1,m),f.applyImpulse(m,p)}}}}new l;new l;new l;const As=new l,Rs=new l,Bs=new l;new H;new l;const Fs=new l,Ns=new l,Ms=[new l(1,0,0),new l(0,1,0),new l(0,0,1)],Ts=new l,Ps=[],_s=[],Ls=1,Ws=new l,qs=new l,ks=new l;function Vs(_,t,e,s,n){let i=0;const o=e,r=Ws,c=qs,a=ks;_.getVelocityAtWorldPoint(o,r),t.getVelocityAtWorldPoint(o,c),r.vsub(c,a);const d=s.dot(a),u=ce(_,e,s),h=ce(t,e,s),p=1/(u+h);return i=-d*p,n<i&&(i=n),i<-n&&(i=-n),i}const Os=new l,js=new l,Hs=new l,Gs=new l;function ce(_,t,e){const s=Os,n=js,i=Hs,o=Gs;return t.vsub(_.position,s),s.cross(e,n),_.invInertiaWorld.vmult(n,o),o.cross(s,i),_.invMass+e.dot(i)}const Ds=new l,Ys=new l,Xs=new l;function Us(_,t,e,s,n){if(n.lengthSquared()>1.1)return 0;const o=Ds,r=Ys,c=Xs;_.getVelocityAtWorldPoint(t,o),e.getVelocityAtWorldPoint(s,r),o.vsub(r,c);const a=n.dot(c),d=.2,u=1/(_.invMass+e.invMass);return-d*a*u}class bi extends F{constructor(t){if(super({type:F.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new l);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const c=o[r];s[c]=t[c]-i,n[c]=t[c]+i}}}new l;new l;new l;new l;new l;new l;new l;new l;new l;class Ei extends dt{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,o=[],r=[],c=[],a=[],d=[],u=Math.cos,h=Math.sin;o.push(new l(-e*h(0),-s*.5,e*u(0))),a.push(0),o.push(new l(-t*h(0),s*.5,t*u(0))),d.push(1);for(let p=0;p<i;p++){const m=2*Math.PI/i*(p+1),y=2*Math.PI/i*(p+.5);p<i-1?(o.push(new l(-e*h(m),-s*.5,e*u(m))),a.push(2*p+2),o.push(new l(-t*h(m),s*.5,t*u(m))),d.push(2*p+3),c.push([2*p,2*p+1,2*p+3,2*p+2])):c.push([2*p,2*p+1,1,0]),(i%2===1||p<i/2)&&r.push(new l(-h(y),0,u(y)))}c.push(a),r.push(new l(0,1,0));const f=[];for(let p=0;p<d.length;p++)f.push(d[d.length-p-1]);c.push(f),super({vertices:o,faces:c,axes:r}),this.type=F.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new l;new U;new l;new U;new l;new l;new l;new l;new l;new l;new l;new U;new l;new V;new U;class $s{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class Zs extends $s{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,a=c.length,d=t;let u,h,f,p,m,y;if(r!==0)for(let E=0;E!==a;E++)c[E].updateSolveMassProperties();const w=Qs,v=Js,b=Ks;w.length=r,v.length=r,b.length=r;for(let E=0;E!==r;E++){const I=o[E];b[E]=0,v[E]=I.computeB(d),w[E]=1/I.computeC()}if(r!==0){for(let R=0;R!==a;R++){const M=c[R],C=M.vlambda,S=M.wlambda;C.set(0,0,0),S.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let R=0;R!==r;R++){const M=o[R];u=v[R],h=w[R],y=b[R],m=M.computeGWlambda(),f=h*(u-m-M.eps*y),y+f<M.minForce?f=M.minForce-y:y+f>M.maxForce&&(f=M.maxForce-y),b[R]+=f,p+=f>0?f:-f,M.addToWlambda(f)}if(p*p<i)break}for(let R=0;R!==a;R++){const M=c[R],C=M.velocity,S=M.angularVelocity;M.vlambda.vmul(M.linearFactor,M.vlambda),C.vadd(M.vlambda,C),M.wlambda.vmul(M.angularFactor,M.wlambda),S.vadd(M.wlambda,S)}let E=o.length;const I=1/d;for(;E--;)o[E].multiplier=b[E]*I}return s}}const Ks=[],Qs=[],Js=[];P.STATIC;class tn{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class en extends tn{constructor(){super(...arguments),this.type=l}constructObject(){return new l}}const O={sphereSphere:F.types.SPHERE,spherePlane:F.types.SPHERE|F.types.PLANE,boxBox:F.types.BOX|F.types.BOX,sphereBox:F.types.SPHERE|F.types.BOX,planeBox:F.types.PLANE|F.types.BOX,convexConvex:F.types.CONVEXPOLYHEDRON,sphereConvex:F.types.SPHERE|F.types.CONVEXPOLYHEDRON,planeConvex:F.types.PLANE|F.types.CONVEXPOLYHEDRON,boxConvex:F.types.BOX|F.types.CONVEXPOLYHEDRON,sphereHeightfield:F.types.SPHERE|F.types.HEIGHTFIELD,boxHeightfield:F.types.BOX|F.types.HEIGHTFIELD,convexHeightfield:F.types.CONVEXPOLYHEDRON|F.types.HEIGHTFIELD,sphereParticle:F.types.PARTICLE|F.types.SPHERE,planeParticle:F.types.PLANE|F.types.PARTICLE,boxParticle:F.types.BOX|F.types.PARTICLE,convexParticle:F.types.PARTICLE|F.types.CONVEXPOLYHEDRON,cylinderCylinder:F.types.CYLINDER,sphereCylinder:F.types.SPHERE|F.types.CYLINDER,planeCylinder:F.types.PLANE|F.types.CYLINDER,boxCylinder:F.types.BOX|F.types.CYLINDER,convexCylinder:F.types.CONVEXPOLYHEDRON|F.types.CYLINDER,heightfieldCylinder:F.types.HEIGHTFIELD|F.types.CYLINDER,particleCylinder:F.types.PARTICLE|F.types.CYLINDER,sphereTrimesh:F.types.SPHERE|F.types.TRIMESH,planeTrimesh:F.types.PLANE|F.types.TRIMESH};class sn{get[O.sphereSphere](){return this.sphereSphere}get[O.spherePlane](){return this.spherePlane}get[O.boxBox](){return this.boxBox}get[O.sphereBox](){return this.sphereBox}get[O.planeBox](){return this.planeBox}get[O.convexConvex](){return this.convexConvex}get[O.sphereConvex](){return this.sphereConvex}get[O.planeConvex](){return this.planeConvex}get[O.boxConvex](){return this.boxConvex}get[O.sphereHeightfield](){return this.sphereHeightfield}get[O.boxHeightfield](){return this.boxHeightfield}get[O.convexHeightfield](){return this.convexHeightfield}get[O.sphereParticle](){return this.sphereParticle}get[O.planeParticle](){return this.planeParticle}get[O.boxParticle](){return this.boxParticle}get[O.convexParticle](){return this.convexParticle}get[O.cylinderCylinder](){return this.convexConvex}get[O.sphereCylinder](){return this.sphereConvex}get[O.planeCylinder](){return this.planeConvex}get[O.boxCylinder](){return this.boxConvex}get[O.convexCylinder](){return this.convexConvex}get[O.heightfieldCylinder](){return this.heightfieldCylinder}get[O.particleCylinder](){return this.particleCylinder}get[O.sphereTrimesh](){return this.sphereTrimesh}get[O.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new en,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new ms(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,d=n.material||e.material;return a&&d&&a.restitution>=0&&d.restitution>=0&&(r.restitution=a.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,c=this.currentContactMaterial;let a=c.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(a=d.friction*u.friction),a>0){const h=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,m=p.length?p.pop():new ie(s,n,h*f),y=p.length?p.pop():new ie(s,n,h*f);return m.bi=y.bi=s,m.bj=y.bj=n,m.minForce=y.minForce=-h*f,m.maxForce=y.maxForce=h*f,m.ri.copy(t.ri),m.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(m.t,y.t),m.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),y.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),m.enabled=y.enabled=t.enabled,e.push(m,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];rt.setZero(),at.setZero(),ht.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(rt.vadd(e.ni,rt),at.vadd(e.ri,at),ht.vadd(e.rj,ht)):(rt.vsub(e.ni,rt),at.vadd(e.rj,at),ht.vadd(e.ri,ht));const o=1/t;at.scale(o,s.ri),ht.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),rt.normalize(),rt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=rn,a=cn,d=nn,u=on;for(let h=0,f=t.length;h!==f;h++){const p=t[h],m=e[h];let y=null;p.material&&m.material&&(y=s.getContactMaterial(p.material,m.material)||null);const w=p.type&P.KINEMATIC&&m.type&P.STATIC||p.type&P.STATIC&&m.type&P.KINEMATIC||p.type&P.KINEMATIC&&m.type&P.KINEMATIC;for(let v=0;v<p.shapes.length;v++){p.quaternion.mult(p.shapeOrientations[v],c),p.quaternion.vmult(p.shapeOffsets[v],d),d.vadd(p.position,d);const b=p.shapes[v];for(let E=0;E<m.shapes.length;E++){m.quaternion.mult(m.shapeOrientations[E],a),m.quaternion.vmult(m.shapeOffsets[E],u),u.vadd(m.position,u);const I=m.shapes[E];if(!(b.collisionFilterMask&I.collisionFilterGroup&&I.collisionFilterMask&b.collisionFilterGroup)||d.distanceTo(u)>b.boundingSphereRadius+I.boundingSphereRadius)continue;let R=null;b.material&&I.material&&(R=s.getContactMaterial(b.material,I.material)||null),this.currentContactMaterial=R||y||s.defaultContactMaterial;const M=b.type|I.type,C=this[M];if(C){let S=!1;b.type<I.type?S=C.call(this,b,I,d,u,c,a,p,m,b,I,w):S=C.call(this,I,b,u,d,a,c,m,p,b,I,w),S&&w&&(s.shapeOverlapKeeper.set(b.id,I.id),s.bodyOverlapKeeper.set(p.id,m.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,a,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,c,t,e,a,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(c.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,a,d,u){const h=this.createContactEquation(r,c,t,e,a,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Ct),h.ni.scale(h.ni.dot(Ct),le),Ct.vsub(le,h.rj),-Ct.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(c.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,a,d,u){const h=this.v3pool,f=Tn;s.vsub(n,St),e.getSideNormals(f,o);const p=t.radius;let m=!1;const y=_n,w=Ln,v=Wn;let b=null,E=0,I=0,R=0,M=null;for(let g=0,W=f.length;g!==W&&m===!1;g++){const q=Fn;q.copy(f[g]);const k=q.length();q.normalize();const Y=St.dot(q);if(Y<k+p&&Y>0){const D=Nn,L=Mn;D.copy(f[(g+1)%3]),L.copy(f[(g+2)%3]);const lt=D.length(),xt=L.length();D.normalize(),L.normalize();const At=St.dot(D),Rt=St.dot(L);if(At<lt&&At>-lt&&Rt<xt&&Rt>-xt){const Ot=Math.abs(Y-k-p);if((M===null||Ot<M)&&(M=Ot,I=At,R=Rt,b=k,y.copy(q),w.copy(D),v.copy(L),E++,u))return!0}}}if(E){m=!0;const g=this.createContactEquation(r,c,t,e,a,d);y.scale(-p,g.ri),g.ni.copy(y),g.ni.negate(g.ni),y.scale(b,y),w.scale(I,w),y.vadd(w,y),v.scale(R,v),y.vadd(v,g.rj),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),g.rj.vadd(n,g.rj),g.rj.vsub(c.position,g.rj),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}let C=h.get();const S=Pn;for(let g=0;g!==2&&!m;g++)for(let W=0;W!==2&&!m;W++)for(let q=0;q!==2&&!m;q++)if(C.set(0,0,0),g?C.vadd(f[0],C):C.vsub(f[0],C),W?C.vadd(f[1],C):C.vsub(f[1],C),q?C.vadd(f[2],C):C.vsub(f[2],C),n.vadd(C,S),S.vsub(s,S),S.lengthSquared()<p*p){if(u)return!0;m=!0;const k=this.createContactEquation(r,c,t,e,a,d);k.ri.copy(S),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(p,k.ri),k.rj.copy(C),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),k.rj.vadd(n,k.rj),k.rj.vsub(c.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}h.release(C),C=null;const B=h.get(),T=h.get(),N=h.get(),x=h.get(),A=h.get(),z=f.length;for(let g=0;g!==z&&!m;g++)for(let W=0;W!==z&&!m;W++)if(g%3!==W%3){f[W].cross(f[g],B),B.normalize(),f[g].vadd(f[W],T),N.copy(s),N.vsub(T,N),N.vsub(n,N);const q=N.dot(B);B.scale(q,x);let k=0;for(;k===g%3||k===W%3;)k++;A.copy(s),A.vsub(x,A),A.vsub(T,A),A.vsub(n,A);const Y=Math.abs(q),D=A.length();if(Y<f[k].length()&&D<p){if(u)return!0;m=!0;const L=this.createContactEquation(r,c,t,e,a,d);T.vadd(x,L.rj),L.rj.copy(L.rj),A.negate(L.ni),L.ni.normalize(),L.ri.copy(L.rj),L.ri.vadd(n,L.ri),L.ri.vsub(s,L.ri),L.ri.normalize(),L.ri.scale(p,L.ri),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(c.position,L.rj),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}}h.release(B,T,N,x,A)}planeBox(t,e,s,n,i,o,r,c,a,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,a,d,u,h,f){const p=Qn;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const m=[],y=Jn;t.clipAgainstHull(s,i,e,n,o,p,-100,100,m);let w=0;for(let v=0;v!==m.length;v++){if(u)return!0;const b=this.createContactEquation(r,c,t,e,a,d),E=b.ri,I=b.rj;p.negate(b.ni),m[v].normal.negate(y),y.scale(m[v].depth,y),m[v].point.vadd(y,E),I.copy(m[v].point),E.vsub(s,E),I.vsub(n,I),E.vadd(s,E),E.vsub(r.position,E),I.vadd(n,I),I.vsub(c.position,I),this.result.push(b),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(b,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,c,a,d,u){const h=this.v3pool;s.vsub(n,qn);const f=e.faceNormals,p=e.faces,m=e.vertices,y=t.radius;let w=!1;for(let v=0;v!==m.length;v++){const b=m[v],E=jn;o.vmult(b,E),n.vadd(E,E);const I=On;if(E.vsub(s,I),I.lengthSquared()<y*y){if(u)return!0;w=!0;const R=this.createContactEquation(r,c,t,e,a,d);R.ri.copy(I),R.ri.normalize(),R.ni.copy(R.ri),R.ri.scale(y,R.ri),E.vsub(n,R.rj),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),R.rj.vadd(n,R.rj),R.rj.vsub(c.position,R.rj),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult);return}}for(let v=0,b=p.length;v!==b&&w===!1;v++){const E=f[v],I=p[v],R=Hn;o.vmult(E,R);const M=Gn;o.vmult(m[I[0]],M),M.vadd(n,M);const C=Dn;R.scale(-y,C),s.vadd(C,C);const S=Yn;C.vsub(M,S);const B=S.dot(R),T=Xn;if(s.vsub(M,T),B<0&&T.dot(R)>0){const N=[];for(let x=0,A=I.length;x!==A;x++){const z=h.get();o.vmult(m[I[x]],z),n.vadd(z,z),N.push(z)}if(Bn(N,R,s)){if(u)return!0;w=!0;const x=this.createContactEquation(r,c,t,e,a,d);R.scale(-y,x.ri),R.negate(x.ni);const A=h.get();R.scale(-B,A);const z=h.get();R.scale(-y,z),s.vsub(n,x.rj),x.rj.vadd(z,x.rj),x.rj.vadd(A,x.rj),x.rj.vadd(n,x.rj),x.rj.vsub(c.position,x.rj),x.ri.vadd(s,x.ri),x.ri.vsub(r.position,x.ri),h.release(A),h.release(z),this.result.push(x),this.createFrictionEquationsFromContact(x,this.frictionResult);for(let g=0,W=N.length;g!==W;g++)h.release(N[g]);return}else for(let x=0;x!==I.length;x++){const A=h.get(),z=h.get();o.vmult(m[I[(x+1)%I.length]],A),o.vmult(m[I[(x+2)%I.length]],z),n.vadd(A,A),n.vadd(z,z);const g=kn;z.vsub(A,g);const W=Vn;g.unit(W);const q=h.get(),k=h.get();s.vsub(A,k);const Y=k.dot(W);W.scale(Y,q),q.vadd(A,q);const D=h.get();if(q.vsub(s,D),Y>0&&Y*Y<g.lengthSquared()&&D.lengthSquared()<y*y){if(u)return!0;const L=this.createContactEquation(r,c,t,e,a,d);q.vsub(n,L.rj),q.vsub(s,L.ni),L.ni.normalize(),L.ni.scale(y,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(c.position,L.rj),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult);for(let lt=0,xt=N.length;lt!==xt;lt++)h.release(N[lt]);h.release(A),h.release(z),h.release(q),h.release(D),h.release(k);return}h.release(A),h.release(z),h.release(q),h.release(D),h.release(k)}for(let x=0,A=N.length;x!==A;x++)h.release(N[x])}}}planeConvex(t,e,s,n,i,o,r,c,a,d,u){const h=Un,f=$n;f.set(0,0,1),i.vmult(f,f);let p=0;const m=Zn;for(let y=0;y!==e.vertices.length;y++)if(h.copy(e.vertices[y]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,m),f.dot(m)<=0){if(u)return!0;const v=this.createContactEquation(r,c,t,e,a,d),b=Kn;f.scale(f.dot(m),b),h.vsub(b,b),b.vsub(s,v.ri),v.ni.copy(f),h.vsub(n,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(r.position,v.ri),v.rj.vadd(n,v.rj),v.rj.vsub(c.position,v.rj),this.result.push(v),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,c,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,a,d,u){const h=e.data,f=t.radius,p=e.elementSize,m=di,y=hi;V.pointToLocalFrame(n,o,s,y);let w=Math.floor((y.x-f)/p)-1,v=Math.ceil((y.x+f)/p)+1,b=Math.floor((y.y-f)/p)-1,E=Math.ceil((y.y+f)/p)+1;if(v<0||E<0||w>h.length||b>h[0].length)return;w<0&&(w=0),v<0&&(v=0),b<0&&(b=0),E<0&&(E=0),w>=h.length&&(w=h.length-1),v>=h.length&&(v=h.length-1),E>=h[0].length&&(E=h[0].length-1),b>=h[0].length&&(b=h[0].length-1);const I=[];e.getRectMinMax(w,b,v,E,I);const R=I[0],M=I[1];if(y.z-f>M||y.z+f<R)return;const C=this.result;for(let S=w;S<v;S++)for(let B=b;B<E;B++){const T=C.length;let N=!1;if(e.getConvexTrianglePillar(S,B,!1),V.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(N=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,c,t,e,u)),u&&N||(e.getConvexTrianglePillar(S,B,!0),V.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(N=this.sphereConvex(t,e.pillarConvex,s,m,i,o,r,c,t,e,u)),u&&N))return!0;if(C.length-T>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,a,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,m=li,y=ai,w=ci;V.pointToLocalFrame(n,o,s,w);let v=Math.floor((w.x-p)/f)-1,b=Math.ceil((w.x+p)/f)+1,E=Math.floor((w.y-p)/f)-1,I=Math.ceil((w.y+p)/f)+1;if(b<0||I<0||v>h.length||E>h[0].length)return;v<0&&(v=0),b<0&&(b=0),E<0&&(E=0),I<0&&(I=0),v>=h.length&&(v=h.length-1),b>=h.length&&(b=h.length-1),I>=h[0].length&&(I=h[0].length-1),E>=h[0].length&&(E=h[0].length-1);const R=[];e.getRectMinMax(v,E,b,I,R);const M=R[0],C=R[1];if(!(w.z-p>C||w.z+p<M))for(let S=v;S<b;S++)for(let B=E;B<I;B++){let T=!1;if(e.getConvexTrianglePillar(S,B,!1),V.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(T=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,c,null,null,u,y,null)),u&&T||(e.getConvexTrianglePillar(S,B,!0),V.pointToWorldFrame(n,o,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(T=this.convexConvex(t,e.pillarConvex,s,m,i,o,r,c,null,null,u,y,null)),u&&T))return!0}}sphereParticle(t,e,s,n,i,o,r,c,a,d,u){const h=ni;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,a,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,a,d,u){const h=ti;h.set(0,0,1),r.quaternion.vmult(h,h);const f=ei;if(n.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const m=this.createContactEquation(c,r,e,t,a,d);m.ni.copy(h),m.ni.negate(m.ni),m.ri.set(0,0,0);const y=si;h.scale(h.dot(n),y),n.vsub(y,y),m.rj.copy(y),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,a,d,u){let h=-1;const f=oi,p=ri;let m=null;const y=ii;if(y.copy(n),y.vsub(s,y),i.conjugate(ae),ae.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,v=t.faces.length;w!==v;w++){const b=[t.worldVertices[t.faces[w][0]]],E=t.worldFaceNormals[w];n.vsub(b[0],he);const I=-E.dot(he);if(m===null||Math.abs(I)<Math.abs(m)){if(u)return!0;m=I,h=w,f.copy(E)}}if(h!==-1){const w=this.createContactEquation(c,r,e,t,a,d);f.scale(m,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const v=w.ri,b=w.rj;v.vadd(n,v),v.vsub(c.position,v),b.vadd(s,b),b.vsub(r.position,b),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,a,d,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,a,d,u)}particleCylinder(t,e,s,n,i,o,r,c,a,d,u){return this.convexParticle(e,t,n,s,o,i,c,r,a,d,u)}sphereTrimesh(t,e,s,n,i,o,r,c,a,d,u){const h=mn,f=vn,p=yn,m=wn,y=xn,w=gn,v=Sn,b=fn,E=un,I=zn;V.pointToLocalFrame(n,o,s,y);const R=t.radius;v.lowerBound.set(y.x-R,y.y-R,y.z-R),v.upperBound.set(y.x+R,y.y+R,y.z+R),e.getTrianglesInAABB(v,I);const M=pn,C=t.radius*t.radius;for(let x=0;x<I.length;x++)for(let A=0;A<3;A++)if(e.getVertex(e.indices[I[x]*3+A],M),M.vsub(y,E),E.lengthSquared()<=C){if(b.copy(M),V.pointToWorldFrame(n,o,b,M),M.vsub(s,E),u)return!0;let z=this.createContactEquation(r,c,t,e,a,d);z.ni.copy(E),z.ni.normalize(),z.ri.copy(z.ni),z.ri.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.copy(M),z.rj.vsub(c.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}for(let x=0;x<I.length;x++)for(let A=0;A<3;A++){e.getVertex(e.indices[I[x]*3+A],h),e.getVertex(e.indices[I[x]*3+(A+1)%3],f),f.vsub(h,p),y.vsub(f,w);const z=w.dot(p);y.vsub(h,w);let g=w.dot(p);if(g>0&&z<0&&(y.vsub(h,w),m.copy(p),m.normalize(),g=w.dot(m),m.scale(g,w),w.vadd(h,w),w.distanceTo(y)<t.radius)){if(u)return!0;const q=this.createContactEquation(r,c,t,e,a,d);w.vsub(y,q.ni),q.ni.normalize(),q.ni.scale(t.radius,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),V.pointToWorldFrame(n,o,w,w),w.vsub(c.position,q.rj),V.vectorToWorldFrame(o,q.ni,q.ni),V.vectorToWorldFrame(o,q.ri,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}const S=bn,B=En,T=Cn,N=dn;for(let x=0,A=I.length;x!==A;x++){e.getTriangleVertices(I[x],S,B,T),e.getNormal(I[x],N),y.vsub(S,w);let z=w.dot(N);if(N.scale(z,w),y.vsub(w,w),z=w.distanceTo(y),H.pointInTriangle(w,S,B,T)&&z<t.radius){if(u)return!0;let g=this.createContactEquation(r,c,t,e,a,d);w.vsub(y,g.ni),g.ni.normalize(),g.ni.scale(t.radius,g.ri),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),V.pointToWorldFrame(n,o,w,w),w.vsub(c.position,g.rj),V.vectorToWorldFrame(o,g.ni,g.ni),V.vectorToWorldFrame(o,g.ri,g.ri),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}}I.length=0}planeTrimesh(t,e,s,n,i,o,r,c,a,d,u){const h=new l,f=ln;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const m=new l;m.copy(h),V.pointToWorldFrame(n,o,m,h);const y=an;if(h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const v=this.createContactEquation(r,c,t,e,a,d);v.ni.copy(f);const b=hn;f.scale(y.dot(f),b),h.vsub(b,b),v.ri.copy(b),v.ri.vsub(r.position,v.ri),v.rj.copy(h),v.rj.vsub(c.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const rt=new l,at=new l,ht=new l,nn=new l,on=new l,rn=new j,cn=new j,ln=new l,an=new l,hn=new l,dn=new l,un=new l;new l;const pn=new l,fn=new l,mn=new l,vn=new l,yn=new l,wn=new l,xn=new l,gn=new l,bn=new l,En=new l,Cn=new l,Sn=new U,zn=[],Ct=new l,le=new l,In=new l,An=new l,Rn=new l;function Bn(_,t,e){let s=null;const n=_.length;for(let i=0;i!==n;i++){const o=_[i],r=In;_[(i+1)%n].vsub(o,r);const c=An;r.cross(t,c);const a=Rn;e.vsub(o,a);const d=c.dot(a);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const St=new l,Fn=new l,Nn=new l,Mn=new l,Tn=[new l,new l,new l,new l,new l,new l],Pn=new l,_n=new l,Ln=new l,Wn=new l,qn=new l,kn=new l,Vn=new l,On=new l,jn=new l,Hn=new l,Gn=new l,Dn=new l,Yn=new l,Xn=new l;new l;new l;const Un=new l,$n=new l,Zn=new l,Kn=new l,Qn=new l,Jn=new l,ti=new l,ei=new l,si=new l,ni=new l,ae=new j,ii=new l;new l;const oi=new l,he=new l,ri=new l,ci=new l,li=new l,ai=[0],hi=new l,di=new l;class de{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let a=!1;const d=s[c];for(;d>n[r];)r++;a=d===n[r],a||ue(t,d)}r=0;for(let c=0;c<o;c++){let a=!1;const d=n[c];for(;d>s[r];)r++;a=s[r]===d,a||ue(e,d)}}}function ue(_,t){_.push((t&4294901760)>>16,t&65535)}const _t=(_,t)=>_<t?`${_}-${t}`:`${t}-${_}`;class ui{constructor(){this.data={keys:[]}}get(t,e){const s=_t(t,e);return this.data[s]}set(t,e,s){const n=_t(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=_t(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Ci extends pe{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new l,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new l,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new Ke,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new Zs,this.constraints=[],this.narrowphase=new sn(this),this.collisionMatrix=new Ut,this.collisionMatrixPrevious=new Ut,this.bodyOverlapKeeper=new de,this.shapeOverlapKeeper=new de,this.contactmaterials=[],this.contactMaterialTable=new ui,this.defaultMaterial=new It("default"),this.defaultContactMaterial=new zt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof yt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ALL,s.from=t,s.to=e,s.callback=n,Lt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ANY,s.from=t,s.to=e,s.result=n,Lt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=H.CLOSEST,s.from=t,s.to=e,s.result=n,Lt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof P&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=G.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=G.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(G.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=yi,n=wi,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,a=this.doProfiling,d=this.profile,u=P.DYNAMIC;let h=-1/0;const f=this.constraints,p=vi;c.length();const m=c.x,y=c.y,w=c.z;let v=0;for(a&&(h=G.now()),v=0;v!==i;v++){const x=o[v];if(x.type===u){const A=x.force,z=x.mass;A.x+=z*m,A.y+=z*y,A.z+=z*w}}for(let x=0,A=this.subsystems.length;x!==A;x++)this.subsystems[x].update();a&&(h=G.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(d.broadphase=G.now()-h);let b=f.length;for(v=0;v!==b;v++){const x=f[v];if(!x.collideConnected)for(let A=s.length-1;A>=0;A-=1)(x.bodyA===s[A]&&x.bodyB===n[A]||x.bodyB===s[A]&&x.bodyA===n[A])&&(s.splice(A,1),n.splice(A,1))}this.collisionMatrixTick(),a&&(h=G.now());const E=mi,I=e.length;for(v=0;v!==I;v++)E.push(e[v]);e.length=0;const R=this.frictionEquations.length;for(v=0;v!==R;v++)p.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,E,this.frictionEquations,p),a&&(d.narrowphase=G.now()-h),a&&(h=G.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const M=e.length;for(let x=0;x!==M;x++){const A=e[x],z=A.bi,g=A.bj,W=A.si,q=A.sj;let k;if(z.material&&g.material?k=this.getContactMaterial(z.material,g.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,z.material&&g.material&&(z.material.friction>=0&&g.material.friction>=0&&z.material.friction*g.material.friction,z.material.restitution>=0&&g.material.restitution>=0&&(A.restitution=z.material.restitution*g.material.restitution)),r.addEquation(A),z.allowSleep&&z.type===P.DYNAMIC&&z.sleepState===P.SLEEPING&&g.sleepState===P.AWAKE&&g.type!==P.STATIC){const Y=g.velocity.lengthSquared()+g.angularVelocity.lengthSquared(),D=g.sleepSpeedLimit**2;Y>=D*2&&(z.wakeUpAfterNarrowphase=!0)}if(g.allowSleep&&g.type===P.DYNAMIC&&g.sleepState===P.SLEEPING&&z.sleepState===P.AWAKE&&z.type!==P.STATIC){const Y=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),D=z.sleepSpeedLimit**2;Y>=D*2&&(g.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(z,g,!0),this.collisionMatrixPrevious.get(z,g)||(pt.body=g,pt.contact=A,z.dispatchEvent(pt),pt.body=z,g.dispatchEvent(pt)),this.bodyOverlapKeeper.set(z.id,g.id),this.shapeOverlapKeeper.set(W.id,q.id)}for(this.emitContactEvents(),a&&(d.makeContactConstraints=G.now()-h,h=G.now()),v=0;v!==i;v++){const x=o[v];x.wakeUpAfterNarrowphase&&(x.wakeUp(),x.wakeUpAfterNarrowphase=!1)}for(b=f.length,v=0;v!==b;v++){const x=f[v];x.update();for(let A=0,z=x.equations.length;A!==z;A++){const g=x.equations[A];r.addEquation(g)}}r.solve(t,this),a&&(d.solve=G.now()-h),r.removeAllEquations();const C=Math.pow;for(v=0;v!==i;v++){const x=o[v];if(x.type&u){const A=C(1-x.linearDamping,t),z=x.velocity;z.scale(A,z);const g=x.angularVelocity;if(g){const W=C(1-x.angularDamping,t);g.scale(W,g)}}}this.dispatchEvent(fi),a&&(h=G.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)===0,T=this.quatNormalizeFast;for(v=0;v!==i;v++)o[v].integrate(t,B,T);this.clearForces(),this.broadphase.dirty=!0,a&&(d.integrate=G.now()-h),this.stepnumber+=1,this.dispatchEvent(pi);let N=!0;if(this.allowSleep)for(N=!1,v=0;v!==i;v++){const x=o[v];x.sleepTick(this.time),x.sleepState!==P.SLEEPING&&(N=!0)}this.hasActiveBodies=N}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(tt,et),t){for(let i=0,o=tt.length;i<o;i+=2)ft.bodyA=this.getBodyById(tt[i]),ft.bodyB=this.getBodyById(tt[i+1]),this.dispatchEvent(ft);ft.bodyA=ft.bodyB=null}if(e){for(let i=0,o=et.length;i<o;i+=2)mt.bodyA=this.getBodyById(et[i]),mt.bodyB=this.getBodyById(et[i+1]),this.dispatchEvent(mt);mt.bodyA=mt.bodyB=null}tt.length=et.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(tt,et),s){for(let i=0,o=tt.length;i<o;i+=2){const r=this.getShapeById(tt[i]),c=this.getShapeById(tt[i+1]);st.shapeA=r,st.shapeB=c,r&&(st.bodyA=r.body),c&&(st.bodyB=c.body),this.dispatchEvent(st)}st.bodyA=st.bodyB=st.shapeA=st.shapeB=null}if(n){for(let i=0,o=et.length;i<o;i+=2){const r=this.getShapeById(et[i]),c=this.getShapeById(et[i+1]);nt.shapeA=r,nt.shapeB=c,r&&(nt.bodyA=r.body),c&&(nt.bodyB=c.body),this.dispatchEvent(nt)}nt.bodyA=nt.bodyB=nt.shapeA=nt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new U;const Lt=new H,G=globalThis.performance||{};if(!G.now){let _=Date.now();G.timing&&G.timing.navigationStart&&(_=G.timing.navigationStart),G.now=()=>Date.now()-_}new l;const pi={type:"postStep"},fi={type:"preStep"},pt={type:P.COLLIDE_EVENT_NAME,body:null,contact:null},mi=[],vi=[],yi=[],wi=[],tt=[],et=[],ft={type:"beginContact",bodyA:null,bodyB:null},mt={type:"endContact",bodyA:null,bodyB:null},st={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},nt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};function Si(_,t,e){let{color:s=65280,scale:n=1,onInit:i,onUpdate:o}=e===void 0?{}:e;const r=[],c=new Ce({color:s??65280,wireframe:!0}),a=new l,d=new l,u=new l,h=new j,f=new jt(1),p=new Ht(1,1,1),m=new Gt(10,10,10,10);m.translate(0,0,1e-4);function y(C){const S=new Bt,B=[];for(let N=0;N<C.vertices.length;N++){const x=C.vertices[N];B.push(x.x,x.y,x.z)}S.setAttribute("position",new Ft(B,3));const T=[];for(let N=0;N<C.faces.length;N++){const x=C.faces[N],A=x[0];for(let z=1;z<x.length-1;z++){const g=x[z],W=x[z+1];T.push(A,g,W)}}return S.setIndex(T),S.computeBoundingSphere(),S.computeVertexNormals(),S}function w(C){const S=new Bt,B=[],T=a,N=d,x=u;for(let A=0;A<C.indices.length/3;A++)C.getTriangleVertices(A,T,N,x),B.push(T.x,T.y,T.z),B.push(N.x,N.y,N.z),B.push(x.x,x.y,x.z);return S.setAttribute("position",new Ft(B,3)),S.computeBoundingSphere(),S.computeVertexNormals(),S}function v(C){const S=new Bt,B=C.elementSize||1,T=C.data.flatMap((x,A)=>x.flatMap((z,g)=>[A*B,g*B,z])),N=[];for(let x=0;x<C.data.length-1;x++)for(let A=0;A<C.data[x].length-1;A++){const z=C.data[x].length,g=x*z+A;N.push(g+1,g+z,g+z+1),N.push(g+z,g+1,g)}return S.setIndex(N),S.setAttribute("position",new Ft(T,3)),S.computeBoundingSphere(),S.computeVertexNormals(),S}function b(C){let S=new it;const{SPHERE:B,BOX:T,PLANE:N,CYLINDER:x,CONVEXPOLYHEDRON:A,TRIMESH:z,HEIGHTFIELD:g}=F.types;switch(C.type){case B:{S=new it(f,c);break}case T:{S=new it(p,c);break}case N:{S=new it(m,c);break}case x:{const W=new Se(C.radiusTop,C.radiusBottom,C.height,C.numSegments);S=new it(W,c),C.geometryId=W.id;break}case A:{const W=y(C);S=new it(W,c),C.geometryId=W.id;break}case z:{const W=w(C);S=new it(W,c),C.geometryId=W.id;break}case g:{const W=v(C);S=new it(W,c),C.geometryId=W.id;break}}return _.add(S),S}function E(C,S){const{SPHERE:B,BOX:T,PLANE:N,CYLINDER:x,CONVEXPOLYHEDRON:A,TRIMESH:z,HEIGHTFIELD:g}=F.types;switch(S.type){case B:{const{radius:W}=S;C.scale.set(W*n,W*n,W*n);break}case T:{C.scale.copy(S.halfExtents),C.scale.multiplyScalar(2*n);break}case N:break;case x:{C.scale.set(1*n,1*n,1*n);break}case A:{C.scale.set(1*n,1*n,1*n);break}case z:{C.scale.copy(S.scale).multiplyScalar(n);break}case g:{C.scale.set(1*n,1*n,1*n);break}}}function I(C,S){if(!C)return!1;const{geometry:B}=C;return B instanceof jt&&S.type===F.types.SPHERE||B instanceof Ht&&S.type===F.types.BOX||B instanceof Gt&&S.type===F.types.PLANE||B.id===S.geometryId&&S.type===F.types.CYLINDER||B.id===S.geometryId&&S.type===F.types.CONVEXPOLYHEDRON||B.id===S.geometryId&&S.type===F.types.TRIMESH||B.id===S.geometryId&&S.type===F.types.HEIGHTFIELD}function R(C,S){let B=r[C],T=!1;return I(B,S)||(B&&_.remove(B),r[C]=B=b(S),T=!0),E(B,S),T}function M(){const C=r,S=a,B=h;let T=0;for(const N of t.bodies)for(let x=0;x!==N.shapes.length;x++){const A=N.shapes[x],z=R(T,A),g=C[T];g&&(N.quaternion.vmult(N.shapeOffsets[x],S),N.position.vadd(S,S),N.quaternion.mult(N.shapeOrientations[x],B),g.position.copy(S),g.quaternion.copy(B),z&&i instanceof Function&&i(N,g,A),!z&&o instanceof Function&&o(N,g,A)),T++}for(let N=T;N<C.length;N++){const x=C[N];x&&_.remove(x)}C.length=T}return{update:M}}export{Wt as B,Ei as C,It as M,j as Q,gi as R,bi as S,l as V,Ci as W,dt as a,qt as b,P as c,zt as d,vt as e,Si as f};
