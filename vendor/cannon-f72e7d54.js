import{M as Ye,S as Jt,B as te,P as ee,a as ct,C as Xe,b as Et,F as jt,V as st,L as Ue,c as $e,T as Ze,d as Re,e as Ke,f as Ne,Q as Qe}from"./three-cf704d0e.js";class K{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new h);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new h);const s=this.elements,n=t.x,i=t.y,r=t.z;return e.x=s[0]*n+s[1]*i+s[2]*r,e.y=s[3]*n+s[4]*i+s[5]*r,e.z=s[6]*n+s[7]*i+s[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new K);const s=this.elements,n=t.elements,i=e.elements,r=s[0],a=s[1],o=s[2],c=s[3],u=s[4],d=s[5],l=s[6],p=s[7],f=s[8],m=n[0],y=n[1],w=n[2],v=n[3],E=n[4],z=n[5],g=n[6],I=n[7],M=n[8];return i[0]=r*m+a*v+o*g,i[1]=r*y+a*E+o*I,i[2]=r*w+a*z+o*M,i[3]=c*m+u*v+d*g,i[4]=c*y+u*E+d*I,i[5]=c*w+u*z+d*M,i[6]=l*m+p*v+f*g,i[7]=l*y+p*E+f*I,i[8]=l*w+p*z+f*M,e}scale(t,e){e===void 0&&(e=new K);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new h);const s=3,n=4,i=[];let r,a;for(r=0;r<s*n;r++)i.push(0);for(r=0;r<3;r++)for(a=0;a<3;a++)i[r+n*a]=this.elements[r+3*a];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let o=3;const c=o;let u;const d=4;let l;do{if(r=c-o,i[r+n*r]===0){for(a=r+1;a<c;a++)if(i[r+n*a]!==0){u=d;do l=d-u,i[l+n*r]+=i[l+n*a];while(--u);break}}if(i[r+n*r]!==0)for(a=r+1;a<c;a++){const p=i[r+n*a]/i[r+n*r];u=d;do l=d-u,i[l+n*a]=l<=r?0:i[l+n*a]-i[l+n*r]*p;while(--u)}}while(--o);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new K);const e=3,s=6,n=Je;let i,r;for(i=0;i<3;i++)for(r=0;r<3;r++)n[i+s*r]=this.elements[i+3*r];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let a=3;const o=a;let c;const u=s;let d;do{if(i=o-a,n[i+s*i]===0){for(r=i+1;r<o;r++)if(n[i+s*r]!==0){c=u;do d=u-c,n[d+s*i]+=n[d+s*r];while(--c);break}}if(n[i+s*i]!==0)for(r=i+1;r<o;r++){const l=n[i+s*r]/n[i+s*i];c=u;do d=u-c,n[d+s*r]=d<=i?0:n[d+s*r]-n[d+s*i]*l;while(--c)}}while(--a);i=2;do{r=i-1;do{const l=n[i+s*r]/n[i+s*i];c=s;do d=s-c,n[d+s*r]=n[d+s*r]-n[d+s*i]*l;while(--c)}while(r--)}while(--i);i=2;do{const l=1/n[i+s*i];c=s;do d=s-c,n[d+s*i]=n[d+s*i]*l;while(--c)}while(i--);i=2;do{r=2;do{if(d=n[e+r+s*i],isNaN(d)||d===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,r,d)}while(r--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,r=e+e,a=s+s,o=n+n,c=e*r,u=e*a,d=e*o,l=s*a,p=s*o,f=n*o,m=i*r,y=i*a,w=i*o,v=this.elements;return v[3*0+0]=1-(l+f),v[3*0+1]=u-w,v[3*0+2]=d+y,v[3*1+0]=u+w,v[3*1+1]=1-(c+f),v[3*1+2]=p-m,v[3*2+0]=d-y,v[3*2+1]=p+m,v[3*2+2]=1-(c+l),this}transpose(t){t===void 0&&(t=new K);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const Je=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class h{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new h);const s=t.x,n=t.y,i=t.z,r=this.x,a=this.y,o=this.z;return e.x=a*i-o*n,e.y=o*s-r*i,e.z=r*n-a*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new h(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new h(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new K([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new h);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,r=t.y,a=t.z;return Math.sqrt((i-e)*(i-e)+(r-s)*(r-s)+(a-n)*(a-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,r=t.y,a=t.z;return(i-e)*(i-e)+(r-s)*(r-s)+(a-n)*(a-n)}scale(t,e){e===void 0&&(e=new h);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new h),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new h),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new h),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=ts,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const r=es;Math.abs(n.x)<.9?(r.set(1,0,0),n.cross(r,t)):(r.set(0,1,0),n.cross(r,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,r=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=r+(t.z-r)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(se),se.almostEquals(t,e)}clone(){return new h(this.x,this.y,this.z)}}h.ZERO=new h(0,0,0);h.UNIT_X=new h(1,0,0);h.UNIT_Y=new h(0,1,0);h.UNIT_Z=new h(0,0,1);const ts=new h,es=new h,se=new h;class H{constructor(t){t===void 0&&(t={}),this.lowerBound=new h,this.upperBound=new h,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,r=this.upperBound,a=s;i.copy(t[0]),a&&a.vmult(i,i),r.copy(i);for(let o=1;o<t.length;o++){let c=t[o];a&&(a.vmult(c,ne),c=ne),c.x>r.x&&(r.x=c.x),c.x<i.x&&(i.x=c.x),c.y>r.y&&(r.y=c.y),c.y<i.y&&(i.y=c.y),c.z>r.z&&(r.z=c.z),c.z<i.z&&(i.z=c.z)}return e&&(e.vadd(i,i),e.vadd(r,r)),n&&(i.x-=n,i.y-=n,i.z-=n,r.x+=n,r.y+=n,r.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new H().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,r=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,a=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,o=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return r&&a&&o}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,r,a,o){const c=this.lowerBound,u=this.upperBound;t.copy(c),e.set(u.x,c.y,c.z),s.set(u.x,u.y,c.z),n.set(c.x,u.y,u.z),i.set(u.x,c.y,u.z),r.set(c.x,u.y,c.z),a.set(c.x,c.y,u.z),o.copy(u)}toLocalFrame(t,e){const s=ie,n=s[0],i=s[1],r=s[2],a=s[3],o=s[4],c=s[5],u=s[6],d=s[7];this.getCorners(n,i,r,a,o,c,u,d);for(let l=0;l!==8;l++){const p=s[l];t.pointToLocal(p,p)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=ie,n=s[0],i=s[1],r=s[2],a=s[3],o=s[4],c=s[5],u=s[6],d=s[7];this.getCorners(n,i,r,a,o,c,u,d);for(let l=0;l!==8;l++){const p=s[l];t.pointToWorld(p,p)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,r=1/e.z,a=(this.lowerBound.x-s.x)*n,o=(this.upperBound.x-s.x)*n,c=(this.lowerBound.y-s.y)*i,u=(this.upperBound.y-s.y)*i,d=(this.lowerBound.z-s.z)*r,l=(this.upperBound.z-s.z)*r,p=Math.max(Math.max(Math.min(a,o),Math.min(c,u)),Math.min(d,l)),f=Math.min(Math.min(Math.max(a,o),Math.max(c,u)),Math.max(d,l));return!(f<0||p>f)}}const ne=new h,ie=[new h,new h,new h,new h,new h,new h,new h,new h];class oe{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const r=i;i=n,n=r}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class Le{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class j{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new h),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=ss,n=ns;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new j);const s=this.x,n=this.y,i=this.z,r=this.w,a=t.x,o=t.y,c=t.z,u=t.w;return e.x=s*u+r*a+n*c-i*o,e.y=n*u+r*o+i*a-s*c,e.z=i*u+r*c+s*o-n*a,e.w=r*u-s*a-n*o-i*c,e}inverse(t){t===void 0&&(t=new j);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const r=1/(e*e+s*s+n*n+i*i);return t.x*=r,t.y*=r,t.z*=r,t.w*=r,t}conjugate(t){return t===void 0&&(t=new j),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new h);const s=t.x,n=t.y,i=t.z,r=this.x,a=this.y,o=this.z,c=this.w,u=c*s+a*i-o*n,d=c*n+o*s-r*i,l=c*i+r*n-a*s,p=-r*s-a*n-o*i;return e.x=u*c+p*-r+d*-o-l*-a,e.y=d*c+p*-a+l*-r-u*-o,e.z=l*c+p*-o+u*-a-d*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const r=this.x,a=this.y,o=this.z,c=this.w;switch(e){case"YZX":const u=r*a+o*c;if(u>.499&&(s=2*Math.atan2(r,c),n=Math.PI/2,i=0),u<-.499&&(s=-2*Math.atan2(r,c),n=-Math.PI/2,i=0),s===void 0){const d=r*r,l=a*a,p=o*o;s=Math.atan2(2*a*c-2*r*o,1-2*l-2*p),n=Math.asin(2*u),i=Math.atan2(2*r*c-2*a*o,1-2*d-2*p)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),r=Math.cos(e/2),a=Math.cos(s/2),o=Math.sin(t/2),c=Math.sin(e/2),u=Math.sin(s/2);return n==="XYZ"?(this.x=o*r*a+i*c*u,this.y=i*c*a-o*r*u,this.z=i*r*u+o*c*a,this.w=i*r*a-o*c*u):n==="YXZ"?(this.x=o*r*a+i*c*u,this.y=i*c*a-o*r*u,this.z=i*r*u-o*c*a,this.w=i*r*a+o*c*u):n==="ZXY"?(this.x=o*r*a-i*c*u,this.y=i*c*a+o*r*u,this.z=i*r*u+o*c*a,this.w=i*r*a-o*c*u):n==="ZYX"?(this.x=o*r*a-i*c*u,this.y=i*c*a+o*r*u,this.z=i*r*u-o*c*a,this.w=i*r*a+o*c*u):n==="YZX"?(this.x=o*r*a+i*c*u,this.y=i*c*a+o*r*u,this.z=i*r*u-o*c*a,this.w=i*r*a-o*c*u):n==="XZY"&&(this.x=o*r*a-i*c*u,this.y=i*c*a-o*r*u,this.z=i*r*u+o*c*a,this.w=i*r*a+o*c*u),this}clone(){return new j(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new j);const n=this.x,i=this.y,r=this.z,a=this.w;let o=t.x,c=t.y,u=t.z,d=t.w,l,p,f,m,y;return p=n*o+i*c+r*u+a*d,p<0&&(p=-p,o=-o,c=-c,u=-u,d=-d),1-p>1e-6?(l=Math.acos(p),f=Math.sin(l),m=Math.sin((1-e)*l)/f,y=Math.sin(e*l)/f):(m=1-e,y=e),s.x=m*n+y*o,s.y=m*i+y*c,s.z=m*r+y*u,s.w=m*a+y*d,s}integrate(t,e,s,n){n===void 0&&(n=new j);const i=t.x*s.x,r=t.y*s.y,a=t.z*s.z,o=this.x,c=this.y,u=this.z,d=this.w,l=e*.5;return n.x+=l*(i*d+r*u-a*c),n.y+=l*(r*d+a*o-i*u),n.z+=l*(a*d+i*c-r*o),n.w+=l*(-i*o-r*c-a*u),n}}const ss=new h,ns=new h,is={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class R{constructor(t){t===void 0&&(t={}),this.id=R.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}R.idCounter=0;R.types=is;class O{constructor(t){t===void 0&&(t={}),this.position=new h,this.quaternion=new j,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return O.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return O.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new h),s.vsub(t,n),e.conjugate(re),re.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new h),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new h),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new h),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const re=new j;class pt extends R{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:r}=t;super({type:R.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),r?this.boundingSphereRadius=r:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new h;for(let i=0;i!==t.length;i++){const r=t[i],a=r.length;for(let o=0;o!==a;o++){const c=(o+1)%a;e[r[o]].vsub(e[r[c]],n),n.normalize();let u=!1;for(let d=0;d!==s.length;d++)if(s[d].almostEquals(n)||s[d].almostEquals(n)){u=!0;break}u||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new h;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],r=this.vertices[s[2]];pt.computeNormal(n,i,r,e)}static computeNormal(t,e,s,n){const i=new h,r=new h;e.vsub(t,r),s.vsub(e,i),i.cross(r,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,r,a,o,c){const u=new h;let d=-1,l=-Number.MAX_VALUE;for(let f=0;f<s.faces.length;f++){u.copy(s.faceNormals[f]),i.vmult(u,u);const m=u.dot(r);m>l&&(l=m,d=f)}const p=[];for(let f=0;f<s.faces[d].length;f++){const m=s.vertices[s.faces[d][f]],y=new h;y.copy(m),i.vmult(y,y),n.vadd(y,y),p.push(y)}d>=0&&this.clipFaceAgainstHull(r,t,e,p,a,o,c)}findSeparatingAxis(t,e,s,n,i,r,a,o){const c=new h,u=new h,d=new h,l=new h,p=new h,f=new h;let m=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],c);const v=y.testSepAxis(c,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,r.copy(c))}else{const w=a?a.length:y.faces.length;for(let v=0;v<w;v++){const E=a?a[v]:v;c.copy(y.faceNormals[E]),s.vmult(c,c);const z=y.testSepAxis(c,t,e,s,n,i);if(z===!1)return!1;z<m&&(m=z,r.copy(c))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],u);const v=y.testSepAxis(u,t,e,s,n,i);if(v===!1)return!1;v<m&&(m=v,r.copy(u))}else{const w=o?o.length:t.faces.length;for(let v=0;v<w;v++){const E=o?o[v]:v;u.copy(t.faceNormals[E]),i.vmult(u,u);const z=y.testSepAxis(u,t,e,s,n,i);if(z===!1)return!1;z<m&&(m=z,r.copy(u))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],l);for(let v=0;v!==t.uniqueEdges.length;v++)if(i.vmult(t.uniqueEdges[v],p),l.cross(p,f),!f.almostZero()){f.normalize();const E=y.testSepAxis(f,t,e,s,n,i);if(E===!1)return!1;E<m&&(m=E,r.copy(f))}}return n.vsub(e,d),d.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,s,n,i,r){const a=this;pt.project(a,t,s,n,Ht),pt.project(e,t,i,r,Gt);const o=Ht[0],c=Ht[1],u=Gt[0],d=Gt[1];if(o<d||u<c)return!1;const l=o-d,p=u-c;return l<p?l:p}calculateLocalInertia(t,e){const s=new h,n=new h;this.computeLocalAABB(n,s);const i=s.x-n.x,r=s.y-n.y,a=s.z-n.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*i*2*i+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,r,a){const o=new h,c=new h,u=new h,d=new h,l=new h,p=new h,f=new h,m=new h,y=this,w=[],v=n,E=w;let z=-1,g=Number.MAX_VALUE;for(let T=0;T<y.faces.length;T++){o.copy(y.faceNormals[T]),s.vmult(o,o);const P=o.dot(t);P<g&&(g=P,z=T)}if(z<0)return;const I=y.faces[z];I.connectedFaces=[];for(let T=0;T<y.faces.length;T++)for(let P=0;P<y.faces[T].length;P++)I.indexOf(y.faces[T][P])!==-1&&T!==z&&I.connectedFaces.indexOf(T)===-1&&I.connectedFaces.push(T);const M=I.length;for(let T=0;T<M;T++){const P=y.vertices[I[T]],N=y.vertices[I[(T+1)%M]];P.vsub(N,c),u.copy(c),s.vmult(u,u),e.vadd(u,u),d.copy(this.faceNormals[z]),s.vmult(d,d),e.vadd(d,d),u.cross(d,l),l.negate(l),p.copy(P),s.vmult(p,p),e.vadd(p,p);const x=I.connectedFaces[T];f.copy(this.faceNormals[x]);const F=this.getPlaneConstantOfFace(x);m.copy(f),s.vmult(m,m);const A=F-m.dot(e);for(this.clipFaceAgainstPlane(v,E,m,A);v.length;)v.shift();for(;E.length;)v.push(E.shift())}f.copy(this.faceNormals[z]);const C=this.getPlaneConstantOfFace(z);m.copy(f),s.vmult(m,m);const S=C-m.dot(e);for(let T=0;T<v.length;T++){let P=m.dot(v[T])+S;if(P<=i&&(console.log(`clamped: depth=${P} to minDist=${i}`),P=i),P<=r){const N=v[T];if(P<=1e-6){const x={point:N,normal:m,depth:P};a.push(x)}}}}clipFaceAgainstPlane(t,e,s,n){let i,r;const a=t.length;if(a<2)return e;let o=t[t.length-1],c=t[0];i=s.dot(o)+n;for(let u=0;u<a;u++){if(c=t[u],r=s.dot(c)+n,i<0)if(r<0){const d=new h;d.copy(c),e.push(d)}else{const d=new h;o.lerp(c,i/(i-r),d),e.push(d)}else if(r<0){const d=new h;o.lerp(c,i/(i-r),d),e.push(d),e.push(c)}o=c,i=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new h);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new h);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let r,a,o,c,u,d,l=new h;for(let p=0;p<i.length;p++){l.copy(i[p]),e.vmult(l,l),t.vadd(l,l);const f=l;(r===void 0||f.x<r)&&(r=f.x),(c===void 0||f.x>c)&&(c=f.x),(a===void 0||f.y<a)&&(a=f.y),(u===void 0||f.y>u)&&(u=f.y),(o===void 0||f.z<o)&&(o=f.z),(d===void 0||f.z>d)&&(d=f.z)}s.set(r,a,o),n.set(c,u,d)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new h);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const r=n[i];e.vmult(r,r)}for(let i=0;i<this.faceNormals.length;i++){const r=this.faceNormals[i];e.vmult(r,r)}}if(t)for(let i=0;i<s;i++){const r=n[i];r.vadd(t,r)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,r=new h;this.getAveragePointLocal(r);for(let a=0;a<this.faces.length;a++){let o=n[a];const c=e[s[a][0]],u=new h;t.vsub(c,u);const d=o.dot(u),l=new h;r.vsub(c,l);const p=o.dot(l);if(d<0&&p>0||d>0&&p<0)return!1}return i?1:-1}static project(t,e,s,n,i){const r=t.vertices.length,a=os;let o=0,c=0;const u=rs,d=t.vertices;u.setZero(),O.vectorToLocalFrame(s,n,e,a),O.pointToLocalFrame(s,n,u,u);const l=u.dot(a);c=o=d[0].dot(a);for(let p=1;p<r;p++){const f=d[p].dot(a);f>o&&(o=f),f<c&&(c=f)}if(c-=l,o-=l,c>o){const p=c;c=o,o=p}i[0]=o,i[1]=c}}const Ht=[],Gt=[];new h;const os=new h,rs=new h;class Wt extends R{constructor(t){super({type:R.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=h,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],r=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],a=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],o=new pt({vertices:i,faces:r,axes:a});this.convexPolyhedronRepresentation=o,o.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new h),Wt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let r=0;r<i.length;r++)at.set(i[r][0],i[r][1],i[r][2]),e.vmult(at,at),t.vadd(at,at),s(at.x,at.y,at.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;Q[0].set(i.x,i.y,i.z),Q[1].set(-i.x,i.y,i.z),Q[2].set(-i.x,-i.y,i.z),Q[3].set(-i.x,-i.y,-i.z),Q[4].set(i.x,-i.y,-i.z),Q[5].set(i.x,i.y,-i.z),Q[6].set(-i.x,i.y,-i.z),Q[7].set(i.x,-i.y,i.z);const r=Q[0];e.vmult(r,r),t.vadd(r,r),n.copy(r),s.copy(r);for(let a=1;a<8;a++){const o=Q[a];e.vmult(o,o),t.vadd(o,o);const c=o.x,u=o.y,d=o.z;c>n.x&&(n.x=c),u>n.y&&(n.y=u),d>n.z&&(n.z=d),c<s.x&&(s.x=c),u<s.y&&(s.y=u),d<s.z&&(s.z=d)}}}const at=new h,Q=[new h,new h,new h,new h,new h,new h,new h,new h],$t={DYNAMIC:1,STATIC:2,KINEMATIC:4},Zt={AWAKE:0,SLEEPY:1,SLEEPING:2};class L extends Le{constructor(t){t===void 0&&(t={}),super(),this.id=L.idCounter++,this.index=-1,this.world=null,this.vlambda=new h,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new h,this.previousPosition=new h,this.interpolatedPosition=new h,this.initPosition=new h,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new h,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new h,this.force=new h;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?L.STATIC:L.DYNAMIC,typeof t.type==typeof L.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=L.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new h,this.quaternion=new j,this.initQuaternion=new j,this.previousQuaternion=new j,this.interpolatedQuaternion=new j,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new h,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new h,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new h,this.invInertia=new h,this.invInertiaWorld=new K,this.invMassSolve=0,this.invInertiaSolve=new h,this.invInertiaWorldSolve=new K,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new h(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new h(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new H,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new h,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=L.AWAKE,this.wakeUpAfterNarrowphase=!1,t===L.SLEEPING&&this.dispatchEvent(L.wakeupEvent)}sleep(){this.sleepState=L.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===L.AWAKE&&s<n?(this.sleepState=L.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(L.sleepyEvent)):e===L.SLEEPY&&s>n?this.wakeUp():e===L.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(L.sleepEvent))}}updateSolveMassProperties(){this.sleepState===L.SLEEPING||this.type===L.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new h),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new h),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new h),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new h,i=new j;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const r=t[i];r.updateBoundingSphereRadius();const a=e[i].length(),o=r.boundingSphereRadius;a+o>n&&(n=a+o)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=cs,r=as,a=this.quaternion,o=this.aabb,c=ls;for(let u=0;u!==n;u++){const d=t[u];a.vmult(e[u],i),i.vadd(this.position,i),a.mult(s[u],r),d.calculateWorldAABB(i,r,c.lowerBound,c.upperBound),u===0?o.copy(c):o.extend(c)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=hs,n=us;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new h),this.type!==L.DYNAMIC)return;this.sleepState===L.SLEEPING&&this.wakeUp();const s=ps;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new h),this.type!==L.DYNAMIC)return;const s=fs,n=ms;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===L.DYNAMIC&&(this.sleepState===L.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new h),this.type!==L.DYNAMIC)return;this.sleepState===L.SLEEPING&&this.wakeUp();const s=e,n=vs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=ys;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new h),this.type!==L.DYNAMIC)return;const s=ws,n=gs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=xs;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Wt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new h;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===L.DYNAMIC||this.type===L.KINEMATIC)||this.sleepState===L.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,r=this.position,a=this.force,o=this.torque,c=this.quaternion,u=this.invMass,d=this.invInertiaWorld,l=this.linearFactor,p=u*t;n.x+=a.x*p*l.x,n.y+=a.y*p*l.y,n.z+=a.z*p*l.z;const f=d.elements,m=this.angularFactor,y=o.x*m.x,w=o.y*m.y,v=o.z*m.z;i.x+=t*(f[0]*y+f[1]*w+f[2]*v),i.y+=t*(f[3]*y+f[4]*w+f[5]*v),i.z+=t*(f[6]*y+f[7]*w+f[8]*v),r.x+=n.x*t,r.y+=n.y*t,r.z+=n.z*t,c.integrate(this.angularVelocity,t,this.angularFactor,c),e&&(s?c.normalizeFast():c.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}L.idCounter=0;L.COLLIDE_EVENT_NAME="collide";L.DYNAMIC=$t.DYNAMIC;L.STATIC=$t.STATIC;L.KINEMATIC=$t.KINEMATIC;L.AWAKE=Zt.AWAKE;L.SLEEPY=Zt.SLEEPY;L.SLEEPING=Zt.SLEEPING;L.wakeupEvent={type:"wakeup"};L.sleepyEvent={type:"sleepy"};L.sleepEvent={type:"sleep"};const cs=new h,as=new j,ls=new H,hs=new K,us=new K,ds=new K,ps=new h,fs=new h,ms=new h,vs=new h,ys=new h,ws=new h,gs=new h,xs=new h;class _e{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&L.STATIC||t.sleepState===L.SLEEPING)&&(e.type&L.STATIC||e.sleepState===L.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=bs;e.position.vsub(t.position,i);const r=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<r&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=Es,n=Cs,i=Bs,r=t.length;for(let a=0;a!==r;a++)n[a]=t[a],i[a]=e[a];t.length=0,e.length=0;for(let a=0;a!==r;a++){const o=n[a].id,c=i[a].id,u=o<c?`${o},${c}`:`${c},${o}`;s[u]=a,s.keys.push(u)}for(let a=0;a!==s.keys.length;a++){const o=s.keys.pop(),c=s[o];t.push(n[c]),e.push(i[c]),delete s[o]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new h;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const bs=new h;new h;new j;new h;const Es={keys:[]},Cs=[],Bs=[];new h;new h;new h;class zs extends _e{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let r,a;for(let o=0;o!==i;o++)for(let c=0;c!==o;c++)r=n[o],a=n[c],this.needBroadphaseCollision(r,a)&&this.intersectionTest(r,a,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Ct{constructor(){this.rayFromWorld=new h,this.rayToWorld=new h,this.hitNormalWorld=new h,this.hitPointWorld=new h,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,r,a){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=r,this.distance=a}}let We,qe,Ve,Oe,ke,je,He;const Kt={CLOSEST:1,ANY:2,ALL:4};We=R.types.SPHERE;qe=R.types.PLANE;Ve=R.types.BOX;Oe=R.types.CYLINDER;ke=R.types.CONVEXPOLYHEDRON;je=R.types.HEIGHTFIELD;He=R.types.TRIMESH;class D{get[We](){return this._intersectSphere}get[qe](){return this._intersectPlane}get[Ve](){return this._intersectBox}get[Oe](){return this._intersectConvex}get[ke](){return this._intersectConvex}get[je](){return this._intersectHeightfield}get[He](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new h),e===void 0&&(e=new h),this.from=t.clone(),this.to=e.clone(),this.direction=new h,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=D.ANY,this.result=new Ct,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||D.ANY,this.result=e.result||new Ct,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ce),Dt.length=0,t.broadphase.aabbQuery(t,ce,Dt),this.intersectBodies(Dt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=Ss,i=As;for(let r=0,a=t.shapes.length;r<a;r++){const o=t.shapes[r];if(!(s&&!o.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[r],i),t.quaternion.vmult(t.shapeOffsets[r],n),n.vadd(t.position,n),this.intersectShape(o,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(ks(i,this.direction,s)>t.boundingSphereRadius)return;const a=this[t.type];a&&a.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const r=this.from,a=this.to,o=this.direction,c=new h(0,0,1);e.vmult(c,c);const u=new h;r.vsub(s,u);const d=u.dot(c);a.vsub(s,u);const l=u.dot(c);if(d*l>0||r.distanceTo(a)<d)return;const p=c.dot(o);if(Math.abs(p)<this.precision)return;const f=new h,m=new h,y=new h;r.vsub(s,f);const w=-c.dot(f)/p;o.scale(w,m),r.vadd(m,y),this.reportIntersection(c,y,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const r=Is;r.from.copy(this.from),r.to.copy(this.to),O.pointToLocalFrame(s,e,r.from,r.from),O.pointToLocalFrame(s,e,r.to,r.to),r.updateDirection();const a=Fs;let o,c,u,d;o=c=0,u=d=t.data.length-1;const l=new H;r.getAABB(l),t.getIndexOfPosition(l.lowerBound.x,l.lowerBound.y,a,!0),o=Math.max(o,a[0]),c=Math.max(c,a[1]),t.getIndexOfPosition(l.upperBound.x,l.upperBound.y,a,!0),u=Math.min(u,a[0]+1),d=Math.min(d,a[1]+1);for(let p=o;p<u;p++)for(let f=c;f<d;f++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(p,f,l),!!l.overlapsRay(r)){if(t.getConvexTrianglePillar(p,f,!1),O.pointToWorldFrame(s,e,t.pillarOffset,St),this._intersectConvex(t.pillarConvex,e,St,n,i,ae),this.result.shouldStop)return;t.getConvexTrianglePillar(p,f,!0),O.pointToWorldFrame(s,e,t.pillarOffset,St),this._intersectConvex(t.pillarConvex,e,St,n,i,ae)}}}_intersectSphere(t,e,s,n,i){const r=this.from,a=this.to,o=t.radius,c=(a.x-r.x)**2+(a.y-r.y)**2+(a.z-r.z)**2,u=2*((a.x-r.x)*(r.x-s.x)+(a.y-r.y)*(r.y-s.y)+(a.z-r.z)*(r.z-s.z)),d=(r.x-s.x)**2+(r.y-s.y)**2+(r.z-s.z)**2-o**2,l=u**2-4*c*d,p=Ts,f=Ms;if(!(l<0))if(l===0)r.lerp(a,l,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1);else{const m=(-u-Math.sqrt(l))/(2*c),y=(-u+Math.sqrt(l))/(2*c);if(m>=0&&m<=1&&(r.lerp(a,m,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(r.lerp(a,y,p),p.vsub(s,f),f.normalize(),this.reportIntersection(f,p,i,n,-1))}}_intersectConvex(t,e,s,n,i,r){const a=Ps,o=le,c=r&&r.faceList||null,u=t.faces,d=t.vertices,l=t.faceNormals,p=this.direction,f=this.from,m=this.to,y=f.distanceTo(m),w=c?c.length:u.length,v=this.result;for(let E=0;!v.shouldStop&&E<w;E++){const z=c?c[E]:E,g=u[z],I=l[z],M=e,C=s;o.copy(d[g[0]]),M.vmult(o,o),o.vadd(C,o),o.vsub(f,o),M.vmult(I,a);const S=p.dot(a);if(Math.abs(S)<this.precision)continue;const T=a.dot(o)/S;if(!(T<0)){p.scale(T,$),$.vadd(f,$),Z.copy(d[g[0]]),M.vmult(Z,Z),C.vadd(Z,Z);for(let P=1;!v.shouldStop&&P<g.length-1;P++){J.copy(d[g[P]]),tt.copy(d[g[P+1]]),M.vmult(J,J),M.vmult(tt,tt),C.vadd(J,J),C.vadd(tt,tt);const N=$.distanceTo(f);!(D.pointInTriangle($,Z,J,tt)||D.pointInTriangle($,J,Z,tt))||N>y||this.reportIntersection(a,$,i,n,z)}}}}_intersectTrimesh(t,e,s,n,i,r){const a=Rs,o=Vs,c=Os,u=le,d=Ns,l=Ls,p=_s,f=qs,m=Ws,y=t.indices;t.vertices;const w=this.from,v=this.to,E=this.direction;c.position.copy(s),c.quaternion.copy(e),O.vectorToLocalFrame(s,e,E,d),O.pointToLocalFrame(s,e,w,l),O.pointToLocalFrame(s,e,v,p),p.x*=t.scale.x,p.y*=t.scale.y,p.z*=t.scale.z,l.x*=t.scale.x,l.y*=t.scale.y,l.z*=t.scale.z,p.vsub(l,d),d.normalize();const z=l.distanceSquared(p);t.tree.rayQuery(this,c,o);for(let g=0,I=o.length;!this.result.shouldStop&&g!==I;g++){const M=o[g];t.getNormal(M,a),t.getVertex(y[M*3],Z),Z.vsub(l,u);const C=d.dot(a),S=a.dot(u)/C;if(S<0)continue;d.scale(S,$),$.vadd(l,$),t.getVertex(y[M*3+1],J),t.getVertex(y[M*3+2],tt);const T=$.distanceSquared(l);!(D.pointInTriangle($,J,Z,tt)||D.pointInTriangle($,Z,J,tt))||T>z||(O.vectorToWorldFrame(e,a,m),O.pointToWorldFrame(s,e,$,f),this.reportIntersection(m,f,i,n,M))}o.length=0}reportIntersection(t,e,s,n,i){const r=this.from,a=this.to,o=r.distanceTo(e),c=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(c.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case D.ALL:this.hasHit=!0,c.set(r,a,t,e,s,n,o),c.hasHit=!0,this.callback(c);break;case D.CLOSEST:(o<c.distance||!c.hasHit)&&(this.hasHit=!0,c.hasHit=!0,c.set(r,a,t,e,s,n,o));break;case D.ANY:this.hasHit=!0,c.hasHit=!0,c.set(r,a,t,e,s,n,o),c.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,dt),s.vsub(e,yt),t.vsub(e,Yt);const i=dt.dot(dt),r=dt.dot(yt),a=dt.dot(Yt),o=yt.dot(yt),c=yt.dot(Yt);let u,d;return(u=o*a-r*c)>=0&&(d=i*c-r*a)>=0&&u+d<i*o-r*r}}D.CLOSEST=Kt.CLOSEST;D.ANY=Kt.ANY;D.ALL=Kt.ALL;const ce=new H,Dt=[],yt=new h,Yt=new h,Ss=new h,As=new j,$=new h,Z=new h,J=new h,tt=new h;new h;new Ct;const ae={faceList:[0]},St=new h,Is=new D,Fs=[],Ts=new h,Ms=new h,Ps=new h;new h;new h;const le=new h,Rs=new h,Ns=new h,Ls=new h,_s=new h,Ws=new h,qs=new h;new H;const Vs=[],Os=new O,dt=new h,At=new h;function ks(b,t,e){e.vsub(b,dt);const s=dt.dot(t);return t.scale(s,At),At.vadd(b,At),e.distanceTo(At)}class bt extends _e{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const r=t.boundingRadius,a=e.boundingRadius,o=n+r;return i-a<o}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,r=this.axisIndex;let a,o;for(this.dirty&&(this.sortList(),this.dirty=!1),a=0;a!==i;a++){const c=n[a];for(o=a+1;o<i;o++){const u=n[o];if(this.needBroadphaseCollision(c,u)){if(!bt.checkBounds(c,u,r))break;this.intersectionTest(c,u,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?bt.insertionSortX(t):e===1?bt.insertionSortY(t):e===2&&bt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,r=0;const a=this.axisList,o=a.length,c=1/o;for(let p=0;p!==o;p++){const f=a[p],m=f.position.x;t+=m,e+=m*m;const y=f.position.y;s+=y,n+=y*y;const w=f.position.z;i+=w,r+=w*w}const u=e-t*t*c,d=n-s*s*c,l=r-i*i*c;u>d?u>l?this.axisIndex=0:this.axisIndex=2:d>l?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const r=this.axisList;e.lowerBound[i],e.upperBound[i];for(let a=0;a<r.length;a++){const o=r[a];o.aabbNeedsUpdate&&o.updateAABB(),o.aabb.overlaps(e)&&s.push(o)}return s}}class Ge{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class he{constructor(){this.spatial=new h,this.rotational=new h}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Bt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=Bt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new he,this.jacobianElementB=new he,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,r=s;this.a=4/(r*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(r*r*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),r=this.computeGiMf();return-i*t-n*e-r*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,r=n.position;return t.spatial.dot(i)+e.spatial.dot(r)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,r=n.velocity,a=s.angularVelocity,o=n.angularVelocity;return t.multiplyVectors(i,a)+e.multiplyVectors(r,o)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,r=n.vlambda,a=s.wlambda,o=n.wlambda;return t.multiplyVectors(i,a)+e.multiplyVectors(r,o)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,r=s.torque,a=n.force,o=n.torque,c=s.invMassSolve,u=n.invMassSolve;return i.scale(c,ue),a.scale(u,de),s.invInertiaWorldSolve.vmult(r,pe),n.invInertiaWorldSolve.vmult(o,fe),t.multiplyVectors(ue,pe)+e.multiplyVectors(de,fe)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,r=n.invMassSolve,a=s.invInertiaWorldSolve,o=n.invInertiaWorldSolve;let c=i+r;return a.vmult(t.rotational,It),c+=It.dot(t.rotational),o.vmult(e.rotational,It),c+=It.dot(e.rotational),c}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,r=js;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,r),n.wlambda.addScaledVector(t,r,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,r),i.wlambda.addScaledVector(t,r,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Bt.idCounter=0;const ue=new h,de=new h,pe=new h,fe=new h,It=new h,js=new h;class Hs extends Bt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new h,this.rj=new h,this.ni=new h}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,r=this.ri,a=this.rj,o=Gs,c=Ds,u=n.velocity,d=n.angularVelocity;n.force,n.torque;const l=i.velocity,p=i.angularVelocity;i.force,i.torque;const f=Ys,m=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;r.cross(w,o),a.cross(w,c),w.negate(m.spatial),o.negate(m.rotational),y.spatial.copy(w),y.rotational.copy(c),f.copy(i.position),f.vadd(a,f),f.vsub(n.position,f),f.vsub(r,f);const v=w.dot(f),E=this.restitution+1,z=E*l.dot(w)-E*u.dot(w)+p.dot(c)-d.dot(o),g=this.computeGiMf();return-v*e-z*s-t*g}getImpactVelocityAlongNormal(){const t=Xs,e=Us,s=$s,n=Zs,i=Ks;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Gs=new h,Ds=new h,Ys=new h,Xs=new h,Us=new h,$s=new h,Zs=new h,Ks=new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;class me extends Bt{constructor(t,e,s){super(t,e,-s,s),this.ri=new h,this.rj=new h,this.t=new h}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Qs,r=Js,a=this.t;s.cross(a,i),n.cross(a,r);const o=this.jacobianElementA,c=this.jacobianElementB;a.negate(o.spatial),i.negate(o.rotational),c.spatial.copy(a),c.rotational.copy(r);const u=this.computeGW(),d=this.computeGiMf();return-u*e-t*d}}const Qs=new h,Js=new h;class qt{constructor(t,e,s){s=Ge.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=qt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}qt.idCounter=0;class Vt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Vt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Vt.idCounter=0;new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;class tn{constructor(t){t===void 0&&(t={}),t=Ge.defaults(t,{chassisConnectionPointLocal:new h,chassisConnectionPointWorld:new h,directionLocal:new h,directionWorld:new h,axleLocal:new h,axleWorld:new h,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new Ct,this.worldTransform=new O,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,ye),t.getVelocityAtWorldPoint(ye,ve);const n=e.hitNormalWorld.dot(ve);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=1/.1;else{const i=-1/s;this.suspensionRelativeVelocity=n*i,this.clippedInvContactDotSuspension=i}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const ve=new h,ye=new h;class Co{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis=typeof t.indexRightAxis<"u"?t.indexRightAxis:2,this.indexForwardAxis=typeof t.indexForwardAxis<"u"?t.indexForwardAxis:0,this.indexUpAxis=typeof t.indexUpAxis<"u"?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){t===void 0&&(t={});const e=new tn(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){const s=this.wheelInfos[e];s.steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(t===0?1:0,t===1?1:0,t===2?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,n=this.chassisBody;for(let d=0;d<s;d++)this.updateWheelTransform(d);this.currentVehicleSpeedKmHour=3.6*n.velocity.length();const i=new h;this.getVehicleAxisWorld(this.indexForwardAxis,i),i.dot(n.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let d=0;d<s;d++)this.castRay(e[d]);this.updateSuspension(t);const r=new h,a=new h;for(let d=0;d<s;d++){const l=e[d];let p=l.suspensionForce;p>l.maxSuspensionForce&&(p=l.maxSuspensionForce),l.raycastResult.hitNormalWorld.scale(p*t,r),l.raycastResult.hitPointWorld.vsub(n.position,a),n.applyImpulse(r,a)}this.updateFriction(t);const o=new h,c=new h,u=new h;for(let d=0;d<s;d++){const l=e[d];n.getVelocityAtWorldPoint(l.chassisConnectionPointWorld,u);let p=1;switch(this.indexUpAxis){case 1:p=-1;break}if(l.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,c);const f=c.dot(l.raycastResult.hitNormalWorld);l.raycastResult.hitNormalWorld.scale(f,o),c.vsub(o,c);const m=c.dot(u);l.deltaRotation=p*m*t/l.radius}(l.sliding||!l.isInContact)&&l.engineForce!==0&&l.useCustomSlidingRotationalSpeed&&(l.deltaRotation=(l.engineForce>0?1:-1)*l.customSlidingRotationalSpeed*t),Math.abs(l.brake)>Math.abs(l.engineForce)&&(l.deltaRotation=0),l.rotation+=l.deltaRotation,l.deltaRotation*=.99}}updateSuspension(t){const s=this.chassisBody.mass,n=this.wheelInfos,i=n.length;for(let r=0;r<i;r++){const a=n[r];if(a.isInContact){let o;const c=a.suspensionRestLength,u=a.suspensionLength,d=c-u;o=a.suspensionStiffness*d*a.clippedInvContactDotSuspension;const l=a.suspensionRelativeVelocity;let p;l<0?p=a.dampingCompression:p=a.dampingRelaxation,o-=p*l,a.suspensionForce=o*s,a.suspensionForce<0&&(a.suspensionForce=0)}else a.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=on,s=rn;this.updateWheelTransformWorld(t);const n=this.chassisBody;let i=-1;const r=t.suspensionRestLength+t.radius;t.directionWorld.scale(r,e);const a=t.chassisConnectionPointWorld;a.vadd(e,s);const o=t.raycastResult;o.reset();const c=n.collisionResponse;n.collisionResponse=!1,this.world.rayTest(a,s,o),n.collisionResponse=c;const u=o.body;if(t.raycastResult.groundObject=0,u){i=o.distance,t.raycastResult.hitNormalWorld=o.hitNormalWorld,t.isInContact=!0;const d=o.distance;t.suspensionLength=d-t.radius;const l=t.suspensionRestLength-t.maxSuspensionTravel,p=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<l&&(t.suspensionLength=l),t.suspensionLength>p&&(t.suspensionLength=p,t.raycastResult.reset());const f=t.raycastResult.hitNormalWorld.dot(t.directionWorld),m=new h;n.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,m);const y=t.raycastResult.hitNormalWorld.dot(m);if(f>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=1/.1;else{const w=-1/f;t.suspensionRelativeVelocity=y*w,t.clippedInvContactDotSuspension=w}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return i}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=en,s=sn,n=nn,i=this.wheelInfos[t];this.updateWheelTransformWorld(i),i.directionLocal.scale(-1,e),s.copy(i.axleLocal),e.cross(s,n),n.normalize(),s.normalize();const r=i.steering,a=new j;a.setFromAxisAngle(e,r);const o=new j;o.setFromAxisAngle(s,i.rotation);const c=i.worldTransform.quaternion;this.chassisBody.quaternion.mult(a,c),c.mult(o,c),c.normalize();const u=i.worldTransform.position;u.copy(i.directionWorld),u.scale(i.suspensionLength,u),u.vadd(i.chassisConnectionPointWorld,u)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=an,s=this.wheelInfos,n=s.length,i=this.chassisBody,r=hn,a=ln;this.numWheelsOnGround=0;for(let u=0;u<n;u++){const d=s[u];d.raycastResult.body&&this.numWheelsOnGround++,d.sideImpulse=0,d.forwardImpulse=0,r[u]||(r[u]=new h),a[u]||(a[u]=new h)}for(let u=0;u<n;u++){const d=s[u],l=d.raycastResult.body;if(l){const p=a[u];this.getWheelTransformWorld(u).vectorToWorldFrame(cn[this.indexRightAxis],p);const m=d.raycastResult.hitNormalWorld,y=p.dot(m);m.scale(y,e),p.vsub(e,p),p.normalize(),m.cross(p,r[u]),r[u].normalize(),d.sideImpulse=Cn(i,d.raycastResult.hitPointWorld,l,d.raycastResult.hitPointWorld,p),d.sideImpulse*=un}}const o=1,c=.5;this.sliding=!1;for(let u=0;u<n;u++){const d=s[u],l=d.raycastResult.body;let p=0;if(d.slipInfo=1,l){const m=d.brake?d.brake:0;p=mn(i,l,d.raycastResult.hitPointWorld,r[u],m),p+=d.engineForce*t;const y=m/p;d.slipInfo*=y}if(d.forwardImpulse=0,d.skidInfo=1,l){d.skidInfo=1;const f=d.suspensionForce*t*d.frictionSlip,y=f*f;d.forwardImpulse=p;const w=d.forwardImpulse*c/d.forwardAcceleration,v=d.sideImpulse*o/d.sideAcceleration,E=w*w+v*v;if(d.sliding=!1,E>y){this.sliding=!0,d.sliding=!0;const z=f/Math.sqrt(E);d.skidInfo*=z}}}if(this.sliding)for(let u=0;u<n;u++){const d=s[u];d.sideImpulse!==0&&d.skidInfo<1&&(d.forwardImpulse*=d.skidInfo,d.sideImpulse*=d.skidInfo)}for(let u=0;u<n;u++){const d=s[u],l=new h;if(d.raycastResult.hitPointWorld.vsub(i.position,l),d.forwardImpulse!==0){const p=new h;r[u].scale(d.forwardImpulse,p),i.applyImpulse(p,l)}if(d.sideImpulse!==0){const p=d.raycastResult.body,f=new h;d.raycastResult.hitPointWorld.vsub(p.position,f);const m=new h;a[u].scale(d.sideImpulse,m),i.vectorToLocalFrame(l,l),l["xyz"[this.indexUpAxis]]*=d.rollInfluence,i.vectorToWorldFrame(l,l),i.applyImpulse(m,l),m.scale(-1,m),p.applyImpulse(m,f)}}}}new h;new h;new h;const en=new h,sn=new h,nn=new h;new D;new h;const on=new h,rn=new h,cn=[new h(1,0,0),new h(0,1,0),new h(0,0,1)],an=new h,ln=[],hn=[],un=1,dn=new h,pn=new h,fn=new h;function mn(b,t,e,s,n){let i=0;const r=e,a=dn,o=pn,c=fn;b.getVelocityAtWorldPoint(r,a),t.getVelocityAtWorldPoint(r,o),a.vsub(o,c);const u=s.dot(c),d=we(b,e,s),l=we(t,e,s),f=1/(d+l);return i=-u*f,n<i&&(i=n),i<-n&&(i=-n),i}const vn=new h,yn=new h,wn=new h,gn=new h;function we(b,t,e){const s=vn,n=yn,i=wn,r=gn;return t.vsub(b.position,s),s.cross(e,n),b.invInertiaWorld.vmult(n,r),r.cross(s,i),b.invMass+e.dot(i)}const xn=new h,bn=new h,En=new h;function Cn(b,t,e,s,n){if(n.lengthSquared()>1.1)return 0;const r=xn,a=bn,o=En;b.getVelocityAtWorldPoint(t,r),e.getVelocityAtWorldPoint(s,a),r.vsub(a,o);const c=n.dot(o),u=.2,d=1/(b.invMass+e.invMass);return-u*c*d}class Bn extends R{constructor(t){if(super({type:R.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new h);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,r=["x","y","z"];for(let a=0;a<r.length;a++){const o=r[a];s[o]=t[o]-i,n[o]=t[o]+i}}}new h;new h;new h;new h;new h;new h;new h;new h;new h;class zn extends pt{constructor(t,e,s,n){if(t===void 0&&(t=1),e===void 0&&(e=1),s===void 0&&(s=1),n===void 0&&(n=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const i=n,r=[],a=[],o=[],c=[],u=[],d=Math.cos,l=Math.sin;r.push(new h(-e*l(0),-s*.5,e*d(0))),c.push(0),r.push(new h(-t*l(0),s*.5,t*d(0))),u.push(1);for(let f=0;f<i;f++){const m=2*Math.PI/i*(f+1),y=2*Math.PI/i*(f+.5);f<i-1?(r.push(new h(-e*l(m),-s*.5,e*d(m))),c.push(2*f+2),r.push(new h(-t*l(m),s*.5,t*d(m))),u.push(2*f+3),o.push([2*f,2*f+1,2*f+3,2*f+2])):o.push([2*f,2*f+1,1,0]),(i%2===1||f<i/2)&&a.push(new h(-l(y),0,d(y)))}o.push(c),a.push(new h(0,1,0));const p=[];for(let f=0;f<u.length;f++)p.push(u[u.length-f-1]);o.push(p),super({vertices:r,faces:o,axes:a}),this.type=R.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=n}}new h;new h;new h;new h;new h;new h;new h;new h;new h;new h;class et{constructor(t){t===void 0&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new H,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){s===void 0&&(s=0);const n=this.data;if(!this.aabb.contains(t))return!1;const i=this.children,r=this.maxDepth||this.root.maxDepth;if(s<r){let a=!1;i.length||(this.subdivide(),a=!0);for(let o=0;o!==8;o++)if(i[o].insert(t,e,s+1))return!0;a&&(i.length=0)}return n.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,n=this.children;n.push(new et({aabb:new H({lowerBound:new h(0,0,0)})}),new et({aabb:new H({lowerBound:new h(1,0,0)})}),new et({aabb:new H({lowerBound:new h(1,1,0)})}),new et({aabb:new H({lowerBound:new h(1,1,1)})}),new et({aabb:new H({lowerBound:new h(0,1,1)})}),new et({aabb:new H({lowerBound:new h(0,0,1)})}),new et({aabb:new H({lowerBound:new h(1,0,1)})}),new et({aabb:new H({lowerBound:new h(0,1,0)})})),s.vsub(e,lt),lt.scale(.5,lt);const i=this.root||this;for(let r=0;r!==8;r++){const a=n[r];a.root=i;const o=a.aabb.lowerBound;o.x*=lt.x,o.y*=lt.y,o.z*=lt.z,o.vadd(e,o),o.vadd(lt,a.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const n=s.pop();n.aabb.overlaps(t)&&Array.prototype.push.apply(e,n.data),Array.prototype.push.apply(s,n.children)}return e}rayQuery(t,e,s){return t.getAABB(Ft),Ft.toLocalFrame(e,Ft),this.aabbQuery(Ft,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),!this.children[t].children.length&&!this.children[t].data.length&&this.children.splice(t,1)}}class Sn extends et{constructor(t,e){e===void 0&&(e={}),super({root:null,aabb:t}),this.maxDepth=typeof e.maxDepth<"u"?e.maxDepth:8}}const lt=new h,Ft=new H;class Lt extends R{constructor(t,e){super({type:R.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new H,this.edges=null,this.scale=new h(1,1,1),this.tree=new Sn,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new H,n=new h,i=new h,r=new h,a=[n,i,r];for(let o=0;o<this.indices.length/3;o++){const c=o*3;this._getUnscaledVertex(this.indices[c],n),this._getUnscaledVertex(this.indices[c+1],i),this._getUnscaledVertex(this.indices[c+2],r),s.setFromPoints(a),t.insert(s,o)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){Tt.copy(t);const s=this.scale,n=s.x,i=s.y,r=s.z,a=Tt.lowerBound,o=Tt.upperBound;return a.x/=n,a.y/=i,a.z/=r,o.x/=n,o.y/=i,o.z/=r,this.tree.aabbQuery(Tt,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=An,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const n=s*3,i=this.indices[n],r=this.indices[n+1],a=this.indices[n+2];this.getVertex(i,be),this.getVertex(r,Ee),this.getVertex(a,Ce),Lt.computeNormal(Ee,be,Ce,t),e[n]=t.x,e[n+1]=t.y,e[n+2]=t.z}}updateEdges(){const t={},e=(n,i)=>{const r=n<i?`${n}_${i}`:`${i}_${n}`;t[r]=!0};for(let n=0;n<this.indices.length/3;n++){const i=n*3,r=this.indices[i],a=this.indices[i+1],o=this.indices[i+2];e(r,a),e(a,o),e(o,r)}const s=Object.keys(t);this.edges=new Int16Array(s.length*2);for(let n=0;n<s.length;n++){const i=s[n].split("_");this.edges[2*n]=parseInt(i[0],10),this.edges[2*n+1]=parseInt(i[1],10)}}getEdgeVertex(t,e,s){const n=this.edges[t*2+(e?1:0)];this.getVertex(n,s)}getEdgeVector(t,e){const s=In,n=Fn;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,n),n.vsub(s,e)}static computeNormal(t,e,s,n){e.vsub(t,xe),s.vsub(e,ge),ge.cross(xe,n),n.isZero()||n.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=t*3,n=this.vertices;return e.set(n[s],n[s+1],n[s+2])}getWorldVertex(t,e,s,n){return this.getVertex(t,n),O.pointToWorldFrame(e,s,n,n),n}getTriangleVertices(t,e,s,n){const i=t*3;this.getVertex(this.indices[i],e),this.getVertex(this.indices[i+1],s),this.getVertex(this.indices[i+2],n)}getNormal(t,e){const s=t*3;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(ht);const s=ht.upperBound.x-ht.lowerBound.x,n=ht.upperBound.y-ht.lowerBound.y,i=ht.upperBound.z-ht.lowerBound.z;return e.set(1/12*t*(2*n*2*n+2*i*2*i),1/12*t*(2*s*2*s+2*i*2*i),1/12*t*(2*n*2*n+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,n=this.vertices.length;this.vertices;const i=Tn;this.getVertex(0,i),e.copy(i),s.copy(i);for(let r=0;r!==n;r++)this.getVertex(r,i),i.x<e.x?e.x=i.x:i.x>s.x&&(s.x=i.x),i.y<e.y?e.y=i.y:i.y>s.y&&(s.y=i.y),i.z<e.z?e.z=i.z:i.z>s.z&&(s.z=i.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new h;for(let n=0,i=e.length/3;n!==i;n++){this.getVertex(n,s);const r=s.lengthSquared();r>t&&(t=r)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=Mn,r=Pn;i.position=t,i.quaternion=e,this.aabb.toWorldFrame(i,r),s.copy(r.lowerBound),n.copy(r.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,n,i){t===void 0&&(t=1),e===void 0&&(e=.5),s===void 0&&(s=8),n===void 0&&(n=6),i===void 0&&(i=Math.PI*2);const r=[],a=[];for(let o=0;o<=s;o++)for(let c=0;c<=n;c++){const u=c/n*i,d=o/s*Math.PI*2,l=(t+e*Math.cos(d))*Math.cos(u),p=(t+e*Math.cos(d))*Math.sin(u),f=e*Math.sin(d);r.push(l,p,f)}for(let o=1;o<=s;o++)for(let c=1;c<=n;c++){const u=(n+1)*o+c-1,d=(n+1)*(o-1)+c-1,l=(n+1)*(o-1)+c,p=(n+1)*o+c;a.push(u,d,p),a.push(d,l,p)}return new Lt(r,a)}}const An=new h,Tt=new H,In=new h,Fn=new h,ge=new h,xe=new h,be=new h,Ee=new h,Ce=new h,ht=new H,Tn=new h,Mn=new O,Pn=new H;class Rn{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class Nn extends Rn{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,r=this.equations,a=r.length,o=e.bodies,c=o.length,u=t;let d,l,p,f,m,y;if(a!==0)for(let z=0;z!==c;z++)o[z].updateSolveMassProperties();const w=_n,v=Wn,E=Ln;w.length=a,v.length=a,E.length=a;for(let z=0;z!==a;z++){const g=r[z];E[z]=0,v[z]=g.computeB(u),w[z]=1/g.computeC()}if(a!==0){for(let I=0;I!==c;I++){const M=o[I],C=M.vlambda,S=M.wlambda;C.set(0,0,0),S.set(0,0,0)}for(s=0;s!==n;s++){f=0;for(let I=0;I!==a;I++){const M=r[I];d=v[I],l=w[I],y=E[I],m=M.computeGWlambda(),p=l*(d-m-M.eps*y),y+p<M.minForce?p=M.minForce-y:y+p>M.maxForce&&(p=M.maxForce-y),E[I]+=p,f+=p>0?p:-p,M.addToWlambda(p)}if(f*f<i)break}for(let I=0;I!==c;I++){const M=o[I],C=M.velocity,S=M.angularVelocity;M.vlambda.vmul(M.linearFactor,M.vlambda),C.vadd(M.vlambda,C),M.wlambda.vmul(M.angularFactor,M.wlambda),S.vadd(M.wlambda,S)}let z=r.length;const g=1/u;for(;z--;)r[z].multiplier=E[z]*g}return s}}const Ln=[],_n=[],Wn=[];L.STATIC;class qn{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Vn extends qn{constructor(){super(...arguments),this.type=h}constructObject(){return new h}}const k={sphereSphere:R.types.SPHERE,spherePlane:R.types.SPHERE|R.types.PLANE,boxBox:R.types.BOX|R.types.BOX,sphereBox:R.types.SPHERE|R.types.BOX,planeBox:R.types.PLANE|R.types.BOX,convexConvex:R.types.CONVEXPOLYHEDRON,sphereConvex:R.types.SPHERE|R.types.CONVEXPOLYHEDRON,planeConvex:R.types.PLANE|R.types.CONVEXPOLYHEDRON,boxConvex:R.types.BOX|R.types.CONVEXPOLYHEDRON,sphereHeightfield:R.types.SPHERE|R.types.HEIGHTFIELD,boxHeightfield:R.types.BOX|R.types.HEIGHTFIELD,convexHeightfield:R.types.CONVEXPOLYHEDRON|R.types.HEIGHTFIELD,sphereParticle:R.types.PARTICLE|R.types.SPHERE,planeParticle:R.types.PLANE|R.types.PARTICLE,boxParticle:R.types.BOX|R.types.PARTICLE,convexParticle:R.types.PARTICLE|R.types.CONVEXPOLYHEDRON,cylinderCylinder:R.types.CYLINDER,sphereCylinder:R.types.SPHERE|R.types.CYLINDER,planeCylinder:R.types.PLANE|R.types.CYLINDER,boxCylinder:R.types.BOX|R.types.CYLINDER,convexCylinder:R.types.CONVEXPOLYHEDRON|R.types.CYLINDER,heightfieldCylinder:R.types.HEIGHTFIELD|R.types.CYLINDER,particleCylinder:R.types.PARTICLE|R.types.CYLINDER,sphereTrimesh:R.types.SPHERE|R.types.TRIMESH,planeTrimesh:R.types.PLANE|R.types.TRIMESH};class On{get[k.sphereSphere](){return this.sphereSphere}get[k.spherePlane](){return this.spherePlane}get[k.boxBox](){return this.boxBox}get[k.sphereBox](){return this.sphereBox}get[k.planeBox](){return this.planeBox}get[k.convexConvex](){return this.convexConvex}get[k.sphereConvex](){return this.sphereConvex}get[k.planeConvex](){return this.planeConvex}get[k.boxConvex](){return this.boxConvex}get[k.sphereHeightfield](){return this.sphereHeightfield}get[k.boxHeightfield](){return this.boxHeightfield}get[k.convexHeightfield](){return this.convexHeightfield}get[k.sphereParticle](){return this.sphereParticle}get[k.planeParticle](){return this.planeParticle}get[k.boxParticle](){return this.boxParticle}get[k.convexParticle](){return this.convexParticle}get[k.cylinderCylinder](){return this.convexConvex}get[k.sphereCylinder](){return this.sphereConvex}get[k.planeCylinder](){return this.planeConvex}get[k.boxCylinder](){return this.boxConvex}get[k.convexCylinder](){return this.convexConvex}get[k.heightfieldCylinder](){return this.heightfieldCylinder}get[k.particleCylinder](){return this.particleCylinder}get[k.sphereTrimesh](){return this.sphereTrimesh}get[k.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Vn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,r){let a;this.contactPointPool.length?(a=this.contactPointPool.pop(),a.bi=t,a.bj=e):a=new Hs(t,e),a.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const o=this.currentContactMaterial;a.restitution=o.restitution,a.setSpookParams(o.contactEquationStiffness,o.contactEquationRelaxation,this.world.dt);const c=s.material||t.material,u=n.material||e.material;return c&&u&&c.restitution>=0&&u.restitution>=0&&(a.restitution=c.restitution*u.restitution),a.si=i||s,a.sj=r||n,a}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,r=t.sj,a=this.world,o=this.currentContactMaterial;let c=o.friction;const u=i.material||s.material,d=r.material||n.material;if(u&&d&&u.friction>=0&&d.friction>=0&&(c=u.friction*d.friction),c>0){const l=c*(a.frictionGravity||a.gravity).length();let p=s.invMass+n.invMass;p>0&&(p=1/p);const f=this.frictionEquationPool,m=f.length?f.pop():new me(s,n,l*p),y=f.length?f.pop():new me(s,n,l*p);return m.bi=y.bi=s,m.bj=y.bj=n,m.minForce=y.minForce=-l*p,m.maxForce=y.maxForce=l*p,m.ri.copy(t.ri),m.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(m.t,y.t),m.setSpookParams(o.frictionEquationStiffness,o.frictionEquationRelaxation,a.dt),y.setSpookParams(o.frictionEquationStiffness,o.frictionEquationRelaxation,a.dt),m.enabled=y.enabled=t.enabled,e.push(m,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];ut.setZero(),mt.setZero(),vt.setZero();const i=e.bi;e.bj;for(let a=0;a!==t;a++)e=this.result[this.result.length-1-a],e.bi!==i?(ut.vadd(e.ni,ut),mt.vadd(e.ri,mt),vt.vadd(e.rj,vt)):(ut.vsub(e.ni,ut),mt.vadd(e.rj,mt),vt.vadd(e.ri,vt));const r=1/t;mt.scale(r,s.ri),vt.scale(r,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),ut.normalize(),ut.tangents(s.t,n.t)}getContacts(t,e,s,n,i,r,a){this.contactPointPool=i,this.frictionEquationPool=a,this.result=n,this.frictionResult=r;const o=Hn,c=Gn,u=kn,d=jn;for(let l=0,p=t.length;l!==p;l++){const f=t[l],m=e[l];let y=null;f.material&&m.material&&(y=s.getContactMaterial(f.material,m.material)||null);const w=f.type&L.KINEMATIC&&m.type&L.STATIC||f.type&L.STATIC&&m.type&L.KINEMATIC||f.type&L.KINEMATIC&&m.type&L.KINEMATIC;for(let v=0;v<f.shapes.length;v++){f.quaternion.mult(f.shapeOrientations[v],o),f.quaternion.vmult(f.shapeOffsets[v],u),u.vadd(f.position,u);const E=f.shapes[v];for(let z=0;z<m.shapes.length;z++){m.quaternion.mult(m.shapeOrientations[z],c),m.quaternion.vmult(m.shapeOffsets[z],d),d.vadd(m.position,d);const g=m.shapes[z];if(!(E.collisionFilterMask&g.collisionFilterGroup&&g.collisionFilterMask&E.collisionFilterGroup)||u.distanceTo(d)>E.boundingSphereRadius+g.boundingSphereRadius)continue;let I=null;E.material&&g.material&&(I=s.getContactMaterial(E.material,g.material)||null),this.currentContactMaterial=I||y||s.defaultContactMaterial;const M=E.type|g.type,C=this[M];if(C){let S=!1;E.type<g.type?S=C.call(this,E,g,u,d,o,c,f,m,E,g,w):S=C.call(this,g,E,d,u,c,o,m,f,E,g,w),S&&w&&(s.shapeOverlapKeeper.set(E.id,g.id),s.bodyOverlapKeeper.set(f.id,m.id))}}}}}sphereSphere(t,e,s,n,i,r,a,o,c,u,d){if(d)return s.distanceSquared(n)<(t.radius+e.radius)**2;const l=this.createContactEquation(a,o,t,e,c,u);n.vsub(s,l.ni),l.ni.normalize(),l.ri.copy(l.ni),l.rj.copy(l.ni),l.ri.scale(t.radius,l.ri),l.rj.scale(-e.radius,l.rj),l.ri.vadd(s,l.ri),l.ri.vsub(a.position,l.ri),l.rj.vadd(n,l.rj),l.rj.vsub(o.position,l.rj),this.result.push(l),this.createFrictionEquationsFromContact(l,this.frictionResult)}spherePlane(t,e,s,n,i,r,a,o,c,u,d){const l=this.createContactEquation(a,o,t,e,c,u);if(l.ni.set(0,0,1),r.vmult(l.ni,l.ni),l.ni.negate(l.ni),l.ni.normalize(),l.ni.scale(t.radius,l.ri),s.vsub(n,Mt),l.ni.scale(l.ni.dot(Mt),Be),Mt.vsub(Be,l.rj),-Mt.dot(l.ni)<=t.radius){if(d)return!0;const p=l.ri,f=l.rj;p.vadd(s,p),p.vsub(a.position,p),f.vadd(n,f),f.vsub(o.position,f),this.result.push(l),this.createFrictionEquationsFromContact(l,this.frictionResult)}}boxBox(t,e,s,n,i,r,a,o,c,u,d){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,r,a,o,t,e,d)}sphereBox(t,e,s,n,i,r,a,o,c,u,d){const l=this.v3pool,p=vi;s.vsub(n,Pt),e.getSideNormals(p,r);const f=t.radius;let m=!1;const y=wi,w=gi,v=xi;let E=null,z=0,g=0,I=0,M=null;for(let B=0,W=p.length;B!==W&&m===!1;B++){const q=pi;q.copy(p[B]);const V=q.length();q.normalize();const U=Pt.dot(q);if(U<V+f&&U>0){const X=fi,_=mi;X.copy(p[(B+1)%3]),_.copy(p[(B+2)%3]);const ft=X.length(),zt=_.length();X.normalize(),_.normalize();const Ot=Pt.dot(X),kt=Pt.dot(_);if(Ot<ft&&Ot>-ft&&kt<zt&&kt>-zt){const Qt=Math.abs(U-V-f);if((M===null||Qt<M)&&(M=Qt,g=Ot,I=kt,E=V,y.copy(q),w.copy(X),v.copy(_),z++,d))return!0}}}if(z){m=!0;const B=this.createContactEquation(a,o,t,e,c,u);y.scale(-f,B.ri),B.ni.copy(y),B.ni.negate(B.ni),y.scale(E,y),w.scale(g,w),y.vadd(w,y),v.scale(I,v),y.vadd(v,B.rj),B.ri.vadd(s,B.ri),B.ri.vsub(a.position,B.ri),B.rj.vadd(n,B.rj),B.rj.vsub(o.position,B.rj),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}let C=l.get();const S=yi;for(let B=0;B!==2&&!m;B++)for(let W=0;W!==2&&!m;W++)for(let q=0;q!==2&&!m;q++)if(C.set(0,0,0),B?C.vadd(p[0],C):C.vsub(p[0],C),W?C.vadd(p[1],C):C.vsub(p[1],C),q?C.vadd(p[2],C):C.vsub(p[2],C),n.vadd(C,S),S.vsub(s,S),S.lengthSquared()<f*f){if(d)return!0;m=!0;const V=this.createContactEquation(a,o,t,e,c,u);V.ri.copy(S),V.ri.normalize(),V.ni.copy(V.ri),V.ri.scale(f,V.ri),V.rj.copy(C),V.ri.vadd(s,V.ri),V.ri.vsub(a.position,V.ri),V.rj.vadd(n,V.rj),V.rj.vsub(o.position,V.rj),this.result.push(V),this.createFrictionEquationsFromContact(V,this.frictionResult)}l.release(C),C=null;const T=l.get(),P=l.get(),N=l.get(),x=l.get(),F=l.get(),A=p.length;for(let B=0;B!==A&&!m;B++)for(let W=0;W!==A&&!m;W++)if(B%3!==W%3){p[W].cross(p[B],T),T.normalize(),p[B].vadd(p[W],P),N.copy(s),N.vsub(P,N),N.vsub(n,N);const q=N.dot(T);T.scale(q,x);let V=0;for(;V===B%3||V===W%3;)V++;F.copy(s),F.vsub(x,F),F.vsub(P,F),F.vsub(n,F);const U=Math.abs(q),X=F.length();if(U<p[V].length()&&X<f){if(d)return!0;m=!0;const _=this.createContactEquation(a,o,t,e,c,u);P.vadd(x,_.rj),_.rj.copy(_.rj),F.negate(_.ni),_.ni.normalize(),_.ri.copy(_.rj),_.ri.vadd(n,_.ri),_.ri.vsub(s,_.ri),_.ri.normalize(),_.ri.scale(f,_.ri),_.ri.vadd(s,_.ri),_.ri.vsub(a.position,_.ri),_.rj.vadd(n,_.rj),_.rj.vsub(o.position,_.rj),this.result.push(_),this.createFrictionEquationsFromContact(_,this.frictionResult)}}l.release(T,P,N,x,F)}planeBox(t,e,s,n,i,r,a,o,c,u,d){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,r,a,o,t,e,d)}convexConvex(t,e,s,n,i,r,a,o,c,u,d,l,p){const f=Li;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,r,f,l,p)){const m=[],y=_i;t.clipAgainstHull(s,i,e,n,r,f,-100,100,m);let w=0;for(let v=0;v!==m.length;v++){if(d)return!0;const E=this.createContactEquation(a,o,t,e,c,u),z=E.ri,g=E.rj;f.negate(E.ni),m[v].normal.negate(y),y.scale(m[v].depth,y),m[v].point.vadd(y,z),g.copy(m[v].point),z.vsub(s,z),g.vsub(n,g),z.vadd(s,z),z.vsub(a.position,z),g.vadd(n,g),g.vsub(o.position,g),this.result.push(E),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(E,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,r,a,o,c,u,d){const l=this.v3pool;s.vsub(n,bi);const p=e.faceNormals,f=e.faces,m=e.vertices,y=t.radius;let w=!1;for(let v=0;v!==m.length;v++){const E=m[v],z=zi;r.vmult(E,z),n.vadd(z,z);const g=Bi;if(z.vsub(s,g),g.lengthSquared()<y*y){if(d)return!0;w=!0;const I=this.createContactEquation(a,o,t,e,c,u);I.ri.copy(g),I.ri.normalize(),I.ni.copy(I.ri),I.ri.scale(y,I.ri),z.vsub(n,I.rj),I.ri.vadd(s,I.ri),I.ri.vsub(a.position,I.ri),I.rj.vadd(n,I.rj),I.rj.vsub(o.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult);return}}for(let v=0,E=f.length;v!==E&&w===!1;v++){const z=p[v],g=f[v],I=Si;r.vmult(z,I);const M=Ai;r.vmult(m[g[0]],M),M.vadd(n,M);const C=Ii;I.scale(-y,C),s.vadd(C,C);const S=Fi;C.vsub(M,S);const T=S.dot(I),P=Ti;if(s.vsub(M,P),T<0&&P.dot(I)>0){const N=[];for(let x=0,F=g.length;x!==F;x++){const A=l.get();r.vmult(m[g[x]],A),n.vadd(A,A),N.push(A)}if(di(N,I,s)){if(d)return!0;w=!0;const x=this.createContactEquation(a,o,t,e,c,u);I.scale(-y,x.ri),I.negate(x.ni);const F=l.get();I.scale(-T,F);const A=l.get();I.scale(-y,A),s.vsub(n,x.rj),x.rj.vadd(A,x.rj),x.rj.vadd(F,x.rj),x.rj.vadd(n,x.rj),x.rj.vsub(o.position,x.rj),x.ri.vadd(s,x.ri),x.ri.vsub(a.position,x.ri),l.release(F),l.release(A),this.result.push(x),this.createFrictionEquationsFromContact(x,this.frictionResult);for(let B=0,W=N.length;B!==W;B++)l.release(N[B]);return}else for(let x=0;x!==g.length;x++){const F=l.get(),A=l.get();r.vmult(m[g[(x+1)%g.length]],F),r.vmult(m[g[(x+2)%g.length]],A),n.vadd(F,F),n.vadd(A,A);const B=Ei;A.vsub(F,B);const W=Ci;B.unit(W);const q=l.get(),V=l.get();s.vsub(F,V);const U=V.dot(W);W.scale(U,q),q.vadd(F,q);const X=l.get();if(q.vsub(s,X),U>0&&U*U<B.lengthSquared()&&X.lengthSquared()<y*y){if(d)return!0;const _=this.createContactEquation(a,o,t,e,c,u);q.vsub(n,_.rj),q.vsub(s,_.ni),_.ni.normalize(),_.ni.scale(y,_.ri),_.rj.vadd(n,_.rj),_.rj.vsub(o.position,_.rj),_.ri.vadd(s,_.ri),_.ri.vsub(a.position,_.ri),this.result.push(_),this.createFrictionEquationsFromContact(_,this.frictionResult);for(let ft=0,zt=N.length;ft!==zt;ft++)l.release(N[ft]);l.release(F),l.release(A),l.release(q),l.release(X),l.release(V);return}l.release(F),l.release(A),l.release(q),l.release(X),l.release(V)}for(let x=0,F=N.length;x!==F;x++)l.release(N[x])}}}planeConvex(t,e,s,n,i,r,a,o,c,u,d){const l=Mi,p=Pi;p.set(0,0,1),i.vmult(p,p);let f=0;const m=Ri;for(let y=0;y!==e.vertices.length;y++)if(l.copy(e.vertices[y]),r.vmult(l,l),n.vadd(l,l),l.vsub(s,m),p.dot(m)<=0){if(d)return!0;const v=this.createContactEquation(a,o,t,e,c,u),E=Ni;p.scale(p.dot(m),E),l.vsub(E,E),E.vsub(s,v.ri),v.ni.copy(p),l.vsub(n,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(a.position,v.ri),v.rj.vadd(n,v.rj),v.rj.vsub(o.position,v.rj),this.result.push(v),f++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&f&&this.createFrictionFromAverage(f)}boxConvex(t,e,s,n,i,r,a,o,c,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,r,a,o,t,e,d)}sphereHeightfield(t,e,s,n,i,r,a,o,c,u,d){const l=e.data,p=t.radius,f=e.elementSize,m=Ui,y=Xi;O.pointToLocalFrame(n,r,s,y);let w=Math.floor((y.x-p)/f)-1,v=Math.ceil((y.x+p)/f)+1,E=Math.floor((y.y-p)/f)-1,z=Math.ceil((y.y+p)/f)+1;if(v<0||z<0||w>l.length||E>l[0].length)return;w<0&&(w=0),v<0&&(v=0),E<0&&(E=0),z<0&&(z=0),w>=l.length&&(w=l.length-1),v>=l.length&&(v=l.length-1),z>=l[0].length&&(z=l[0].length-1),E>=l[0].length&&(E=l[0].length-1);const g=[];e.getRectMinMax(w,E,v,z,g);const I=g[0],M=g[1];if(y.z-p>M||y.z+p<I)return;const C=this.result;for(let S=w;S<v;S++)for(let T=E;T<z;T++){const P=C.length;let N=!1;if(e.getConvexTrianglePillar(S,T,!1),O.pointToWorldFrame(n,r,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(N=this.sphereConvex(t,e.pillarConvex,s,m,i,r,a,o,t,e,d)),d&&N||(e.getConvexTrianglePillar(S,T,!0),O.pointToWorldFrame(n,r,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(N=this.sphereConvex(t,e.pillarConvex,s,m,i,r,a,o,t,e,d)),d&&N))return!0;if(C.length-P>2)return}}boxHeightfield(t,e,s,n,i,r,a,o,c,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,r,a,o,t,e,d)}convexHeightfield(t,e,s,n,i,r,a,o,c,u,d){const l=e.data,p=e.elementSize,f=t.boundingSphereRadius,m=Di,y=Yi,w=Gi;O.pointToLocalFrame(n,r,s,w);let v=Math.floor((w.x-f)/p)-1,E=Math.ceil((w.x+f)/p)+1,z=Math.floor((w.y-f)/p)-1,g=Math.ceil((w.y+f)/p)+1;if(E<0||g<0||v>l.length||z>l[0].length)return;v<0&&(v=0),E<0&&(E=0),z<0&&(z=0),g<0&&(g=0),v>=l.length&&(v=l.length-1),E>=l.length&&(E=l.length-1),g>=l[0].length&&(g=l[0].length-1),z>=l[0].length&&(z=l[0].length-1);const I=[];e.getRectMinMax(v,z,E,g,I);const M=I[0],C=I[1];if(!(w.z-f>C||w.z+f<M))for(let S=v;S<E;S++)for(let T=z;T<g;T++){let P=!1;if(e.getConvexTrianglePillar(S,T,!1),O.pointToWorldFrame(n,r,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,m,i,r,a,o,null,null,d,y,null)),d&&P||(e.getConvexTrianglePillar(S,T,!0),O.pointToWorldFrame(n,r,e.pillarOffset,m),s.distanceTo(m)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,m,i,r,a,o,null,null,d,y,null)),d&&P))return!0}}sphereParticle(t,e,s,n,i,r,a,o,c,u,d){const l=Oi;if(l.set(0,0,1),n.vsub(s,l),l.lengthSquared()<=t.radius*t.radius){if(d)return!0;const f=this.createContactEquation(o,a,e,t,c,u);l.normalize(),f.rj.copy(l),f.rj.scale(t.radius,f.rj),f.ni.copy(l),f.ni.negate(f.ni),f.ri.set(0,0,0),this.result.push(f),this.createFrictionEquationsFromContact(f,this.frictionResult)}}planeParticle(t,e,s,n,i,r,a,o,c,u,d){const l=Wi;l.set(0,0,1),a.quaternion.vmult(l,l);const p=qi;if(n.vsub(a.position,p),l.dot(p)<=0){if(d)return!0;const m=this.createContactEquation(o,a,e,t,c,u);m.ni.copy(l),m.ni.negate(m.ni),m.ri.set(0,0,0);const y=Vi;l.scale(l.dot(n),y),n.vsub(y,y),m.rj.copy(y),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}boxParticle(t,e,s,n,i,r,a,o,c,u,d){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,r,a,o,t,e,d)}convexParticle(t,e,s,n,i,r,a,o,c,u,d){let l=-1;const p=ji,f=Hi;let m=null;const y=ki;if(y.copy(n),y.vsub(s,y),i.conjugate(ze),ze.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,v=t.faces.length;w!==v;w++){const E=[t.worldVertices[t.faces[w][0]]],z=t.worldFaceNormals[w];n.vsub(E[0],Se);const g=-z.dot(Se);if(m===null||Math.abs(g)<Math.abs(m)){if(d)return!0;m=g,l=w,p.copy(z)}}if(l!==-1){const w=this.createContactEquation(o,a,e,t,c,u);p.scale(m,f),f.vadd(n,f),f.vsub(s,f),w.rj.copy(f),p.negate(w.ni),w.ri.set(0,0,0);const v=w.ri,E=w.rj;v.vadd(n,v),v.vsub(o.position,v),E.vadd(s,E),E.vsub(a.position,E),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,r,a,o,c,u,d){return this.convexHeightfield(e,t,n,s,r,i,o,a,c,u,d)}particleCylinder(t,e,s,n,i,r,a,o,c,u,d){return this.convexParticle(e,t,n,s,r,i,o,a,c,u,d)}sphereTrimesh(t,e,s,n,i,r,a,o,c,u,d){const l=Qn,p=Jn,f=ti,m=ei,y=si,w=ni,v=ci,E=Kn,z=$n,g=ai;O.pointToLocalFrame(n,r,s,y);const I=t.radius;v.lowerBound.set(y.x-I,y.y-I,y.z-I),v.upperBound.set(y.x+I,y.y+I,y.z+I),e.getTrianglesInAABB(v,g);const M=Zn,C=t.radius*t.radius;for(let x=0;x<g.length;x++)for(let F=0;F<3;F++)if(e.getVertex(e.indices[g[x]*3+F],M),M.vsub(y,z),z.lengthSquared()<=C){if(E.copy(M),O.pointToWorldFrame(n,r,E,M),M.vsub(s,z),d)return!0;let A=this.createContactEquation(a,o,t,e,c,u);A.ni.copy(z),A.ni.normalize(),A.ri.copy(A.ni),A.ri.scale(t.radius,A.ri),A.ri.vadd(s,A.ri),A.ri.vsub(a.position,A.ri),A.rj.copy(M),A.rj.vsub(o.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}for(let x=0;x<g.length;x++)for(let F=0;F<3;F++){e.getVertex(e.indices[g[x]*3+F],l),e.getVertex(e.indices[g[x]*3+(F+1)%3],p),p.vsub(l,f),y.vsub(p,w);const A=w.dot(f);y.vsub(l,w);let B=w.dot(f);if(B>0&&A<0&&(y.vsub(l,w),m.copy(f),m.normalize(),B=w.dot(m),m.scale(B,w),w.vadd(l,w),w.distanceTo(y)<t.radius)){if(d)return!0;const q=this.createContactEquation(a,o,t,e,c,u);w.vsub(y,q.ni),q.ni.normalize(),q.ni.scale(t.radius,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(a.position,q.ri),O.pointToWorldFrame(n,r,w,w),w.vsub(o.position,q.rj),O.vectorToWorldFrame(r,q.ni,q.ni),O.vectorToWorldFrame(r,q.ri,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}const S=ii,T=oi,P=ri,N=Un;for(let x=0,F=g.length;x!==F;x++){e.getTriangleVertices(g[x],S,T,P),e.getNormal(g[x],N),y.vsub(S,w);let A=w.dot(N);if(N.scale(A,w),y.vsub(w,w),A=w.distanceTo(y),D.pointInTriangle(w,S,T,P)&&A<t.radius){if(d)return!0;let B=this.createContactEquation(a,o,t,e,c,u);w.vsub(y,B.ni),B.ni.normalize(),B.ni.scale(t.radius,B.ri),B.ri.vadd(s,B.ri),B.ri.vsub(a.position,B.ri),O.pointToWorldFrame(n,r,w,w),w.vsub(o.position,B.rj),O.vectorToWorldFrame(r,B.ni,B.ni),O.vectorToWorldFrame(r,B.ri,B.ri),this.result.push(B),this.createFrictionEquationsFromContact(B,this.frictionResult)}}g.length=0}planeTrimesh(t,e,s,n,i,r,a,o,c,u,d){const l=new h,p=Dn;p.set(0,0,1),i.vmult(p,p);for(let f=0;f<e.vertices.length/3;f++){e.getVertex(f,l);const m=new h;m.copy(l),O.pointToWorldFrame(n,r,m,l);const y=Yn;if(l.vsub(s,y),p.dot(y)<=0){if(d)return!0;const v=this.createContactEquation(a,o,t,e,c,u);v.ni.copy(p);const E=Xn;p.scale(y.dot(p),E),l.vsub(E,E),v.ri.copy(E),v.ri.vsub(a.position,v.ri),v.rj.copy(l),v.rj.vsub(o.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const ut=new h,mt=new h,vt=new h,kn=new h,jn=new h,Hn=new j,Gn=new j,Dn=new h,Yn=new h,Xn=new h,Un=new h,$n=new h;new h;const Zn=new h,Kn=new h,Qn=new h,Jn=new h,ti=new h,ei=new h,si=new h,ni=new h,ii=new h,oi=new h,ri=new h,ci=new H,ai=[],Mt=new h,Be=new h,li=new h,hi=new h,ui=new h;function di(b,t,e){let s=null;const n=b.length;for(let i=0;i!==n;i++){const r=b[i],a=li;b[(i+1)%n].vsub(r,a);const o=hi;a.cross(t,o);const c=ui;e.vsub(r,c);const u=o.dot(c);if(s===null||u>0&&s===!0||u<=0&&s===!1){s===null&&(s=u>0);continue}else return!1}return!0}const Pt=new h,pi=new h,fi=new h,mi=new h,vi=[new h,new h,new h,new h,new h,new h],yi=new h,wi=new h,gi=new h,xi=new h,bi=new h,Ei=new h,Ci=new h,Bi=new h,zi=new h,Si=new h,Ai=new h,Ii=new h,Fi=new h,Ti=new h;new h;new h;const Mi=new h,Pi=new h,Ri=new h,Ni=new h,Li=new h,_i=new h,Wi=new h,qi=new h,Vi=new h,Oi=new h,ze=new j,ki=new h;new h;const ji=new h,Se=new h,Hi=new h,Gi=new h,Di=new h,Yi=[0],Xi=new h,Ui=new h;class Ae{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let r=n.length-1;r>=i;r--)n[r+1]=n[r];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,r=n.length;let a=0;for(let o=0;o<i;o++){let c=!1;const u=s[o];for(;u>n[a];)a++;c=u===n[a],c||Ie(t,u)}a=0;for(let o=0;o<r;o++){let c=!1;const u=n[o];for(;u>s[a];)a++;c=s[a]===u,c||Ie(e,u)}}}function Ie(b,t){b.push((t&4294901760)>>16,t&65535)}const Xt=(b,t)=>b<t?`${b}-${t}`:`${t}-${b}`;class $i{constructor(){this.data={keys:[]}}get(t,e){const s=Xt(t,e);return this.data[s]}set(t,e,s){const n=Xt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=Xt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Bo extends Le{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new h,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new h,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new zs,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new Nn,this.constraints=[],this.narrowphase=new On(this),this.collisionMatrix=new oe,this.collisionMatrixPrevious=new oe,this.bodyOverlapKeeper=new Ae,this.shapeOverlapKeeper=new Ae,this.contactmaterials=[],this.contactMaterialTable=new $i,this.defaultMaterial=new Vt("default"),this.defaultContactMaterial=new qt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Ct?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=D.ALL,s.from=t,s.to=e,s.callback=n,Ut.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=D.ANY,s.from=t,s.to=e,s.result=n,Ut.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=D.CLOSEST,s.from=t,s.to=e,s.result=n,Ut.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof L&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const r=n[i];if(r.id===t)return r}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=Y.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=Y.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(Y.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const r=this.accumulator/t;for(let a=0;a!==this.bodies.length;a++){const o=this.bodies[a];o.previousPosition.lerp(o.position,r,o.interpolatedPosition),o.previousQuaternion.slerp(o.quaternion,r,o.interpolatedQuaternion),o.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=to,n=eo,i=this.bodies.length,r=this.bodies,a=this.solver,o=this.gravity,c=this.doProfiling,u=this.profile,d=L.DYNAMIC;let l=-1/0;const p=this.constraints,f=Ji;o.length();const m=o.x,y=o.y,w=o.z;let v=0;for(c&&(l=Y.now()),v=0;v!==i;v++){const x=r[v];if(x.type===d){const F=x.force,A=x.mass;F.x+=A*m,F.y+=A*y,F.z+=A*w}}for(let x=0,F=this.subsystems.length;x!==F;x++)this.subsystems[x].update();c&&(l=Y.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),c&&(u.broadphase=Y.now()-l);let E=p.length;for(v=0;v!==E;v++){const x=p[v];if(!x.collideConnected)for(let F=s.length-1;F>=0;F-=1)(x.bodyA===s[F]&&x.bodyB===n[F]||x.bodyB===s[F]&&x.bodyA===n[F])&&(s.splice(F,1),n.splice(F,1))}this.collisionMatrixTick(),c&&(l=Y.now());const z=Qi,g=e.length;for(v=0;v!==g;v++)z.push(e[v]);e.length=0;const I=this.frictionEquations.length;for(v=0;v!==I;v++)f.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,z,this.frictionEquations,f),c&&(u.narrowphase=Y.now()-l),c&&(l=Y.now()),v=0;v<this.frictionEquations.length;v++)a.addEquation(this.frictionEquations[v]);const M=e.length;for(let x=0;x!==M;x++){const F=e[x],A=F.bi,B=F.bj,W=F.si,q=F.sj;let V;if(A.material&&B.material?V=this.getContactMaterial(A.material,B.material)||this.defaultContactMaterial:V=this.defaultContactMaterial,V.friction,A.material&&B.material&&(A.material.friction>=0&&B.material.friction>=0&&A.material.friction*B.material.friction,A.material.restitution>=0&&B.material.restitution>=0&&(F.restitution=A.material.restitution*B.material.restitution)),a.addEquation(F),A.allowSleep&&A.type===L.DYNAMIC&&A.sleepState===L.SLEEPING&&B.sleepState===L.AWAKE&&B.type!==L.STATIC){const U=B.velocity.lengthSquared()+B.angularVelocity.lengthSquared(),X=B.sleepSpeedLimit**2;U>=X*2&&(A.wakeUpAfterNarrowphase=!0)}if(B.allowSleep&&B.type===L.DYNAMIC&&B.sleepState===L.SLEEPING&&A.sleepState===L.AWAKE&&A.type!==L.STATIC){const U=A.velocity.lengthSquared()+A.angularVelocity.lengthSquared(),X=A.sleepSpeedLimit**2;U>=X*2&&(B.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(A,B,!0),this.collisionMatrixPrevious.get(A,B)||(wt.body=B,wt.contact=F,A.dispatchEvent(wt),wt.body=A,B.dispatchEvent(wt)),this.bodyOverlapKeeper.set(A.id,B.id),this.shapeOverlapKeeper.set(W.id,q.id)}for(this.emitContactEvents(),c&&(u.makeContactConstraints=Y.now()-l,l=Y.now()),v=0;v!==i;v++){const x=r[v];x.wakeUpAfterNarrowphase&&(x.wakeUp(),x.wakeUpAfterNarrowphase=!1)}for(E=p.length,v=0;v!==E;v++){const x=p[v];x.update();for(let F=0,A=x.equations.length;F!==A;F++){const B=x.equations[F];a.addEquation(B)}}a.solve(t,this),c&&(u.solve=Y.now()-l),a.removeAllEquations();const C=Math.pow;for(v=0;v!==i;v++){const x=r[v];if(x.type&d){const F=C(1-x.linearDamping,t),A=x.velocity;A.scale(F,A);const B=x.angularVelocity;if(B){const W=C(1-x.angularDamping,t);B.scale(W,B)}}}this.dispatchEvent(Ki),c&&(l=Y.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)===0,P=this.quatNormalizeFast;for(v=0;v!==i;v++)r[v].integrate(t,T,P);this.clearForces(),this.broadphase.dirty=!0,c&&(u.integrate=Y.now()-l),this.stepnumber+=1,this.dispatchEvent(Zi);let N=!0;if(this.allowSleep)for(N=!1,v=0;v!==i;v++){const x=r[v];x.sleepTick(this.time),x.sleepState!==L.SLEEPING&&(N=!0)}this.hasActiveBodies=N}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(nt,it),t){for(let i=0,r=nt.length;i<r;i+=2)gt.bodyA=this.getBodyById(nt[i]),gt.bodyB=this.getBodyById(nt[i+1]),this.dispatchEvent(gt);gt.bodyA=gt.bodyB=null}if(e){for(let i=0,r=it.length;i<r;i+=2)xt.bodyA=this.getBodyById(it[i]),xt.bodyB=this.getBodyById(it[i+1]),this.dispatchEvent(xt);xt.bodyA=xt.bodyB=null}nt.length=it.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(nt,it),s){for(let i=0,r=nt.length;i<r;i+=2){const a=this.getShapeById(nt[i]),o=this.getShapeById(nt[i+1]);ot.shapeA=a,ot.shapeB=o,a&&(ot.bodyA=a.body),o&&(ot.bodyB=o.body),this.dispatchEvent(ot)}ot.bodyA=ot.bodyB=ot.shapeA=ot.shapeB=null}if(n){for(let i=0,r=it.length;i<r;i+=2){const a=this.getShapeById(it[i]),o=this.getShapeById(it[i+1]);rt.shapeA=a,rt.shapeB=o,a&&(rt.bodyA=a.body),o&&(rt.bodyB=o.body),this.dispatchEvent(rt)}rt.bodyA=rt.bodyB=rt.shapeA=rt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new H;const Ut=new D,Y=globalThis.performance||{};if(!Y.now){let b=Date.now();Y.timing&&Y.timing.navigationStart&&(b=Y.timing.navigationStart),Y.now=()=>Date.now()-b}new h;const Zi={type:"postStep"},Ki={type:"preStep"},wt={type:L.COLLIDE_EVENT_NAME,body:null,contact:null},Qi=[],Ji=[],to=[],eo=[],nt=[],it=[],gt={type:"beginContact",bodyA:null,bodyB:null},xt={type:"endContact",bodyA:null,bodyB:null},ot={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},rt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};function zo(b,t,e){let{color:s=65280,scale:n=1,onInit:i,onUpdate:r}=e===void 0?{}:e;const a=[],o=new Ye({color:s??65280,wireframe:!0}),c=new h,u=new h,d=new h,l=new j,p=new Jt(1),f=new te(1,1,1),m=new ee(10,10,10,10);m.translate(0,0,1e-4);function y(C){const S=new Et,T=[];for(let N=0;N<C.vertices.length;N++){const x=C.vertices[N];T.push(x.x,x.y,x.z)}S.setAttribute("position",new jt(T,3));const P=[];for(let N=0;N<C.faces.length;N++){const x=C.faces[N],F=x[0];for(let A=1;A<x.length-1;A++){const B=x[A],W=x[A+1];P.push(F,B,W)}}return S.setIndex(P),S.computeBoundingSphere(),S.computeVertexNormals(),S}function w(C){const S=new Et,T=[],P=c,N=u,x=d;for(let F=0;F<C.indices.length/3;F++)C.getTriangleVertices(F,P,N,x),T.push(P.x,P.y,P.z),T.push(N.x,N.y,N.z),T.push(x.x,x.y,x.z);return S.setAttribute("position",new jt(T,3)),S.computeBoundingSphere(),S.computeVertexNormals(),S}function v(C){const S=new Et,T=C.elementSize||1,P=C.data.flatMap((x,F)=>x.flatMap((A,B)=>[F*T,B*T,A])),N=[];for(let x=0;x<C.data.length-1;x++)for(let F=0;F<C.data[x].length-1;F++){const A=C.data[x].length,B=x*A+F;N.push(B+1,B+A,B+A+1),N.push(B+A,B+1,B)}return S.setIndex(N),S.setAttribute("position",new jt(P,3)),S.computeBoundingSphere(),S.computeVertexNormals(),S}function E(C){let S=new ct;const{SPHERE:T,BOX:P,PLANE:N,CYLINDER:x,CONVEXPOLYHEDRON:F,TRIMESH:A,HEIGHTFIELD:B}=R.types;switch(C.type){case T:{S=new ct(p,o);break}case P:{S=new ct(f,o);break}case N:{S=new ct(m,o);break}case x:{const W=new Xe(C.radiusTop,C.radiusBottom,C.height,C.numSegments);S=new ct(W,o),C.geometryId=W.id;break}case F:{const W=y(C);S=new ct(W,o),C.geometryId=W.id;break}case A:{const W=w(C);S=new ct(W,o),C.geometryId=W.id;break}case B:{const W=v(C);S=new ct(W,o),C.geometryId=W.id;break}}return b.add(S),S}function z(C,S){const{SPHERE:T,BOX:P,PLANE:N,CYLINDER:x,CONVEXPOLYHEDRON:F,TRIMESH:A,HEIGHTFIELD:B}=R.types;switch(S.type){case T:{const{radius:W}=S;C.scale.set(W*n,W*n,W*n);break}case P:{C.scale.copy(S.halfExtents),C.scale.multiplyScalar(2*n);break}case N:break;case x:{C.scale.set(1*n,1*n,1*n);break}case F:{C.scale.set(1*n,1*n,1*n);break}case A:{C.scale.copy(S.scale).multiplyScalar(n);break}case B:{C.scale.set(1*n,1*n,1*n);break}}}function g(C,S){if(!C)return!1;const{geometry:T}=C;return T instanceof Jt&&S.type===R.types.SPHERE||T instanceof te&&S.type===R.types.BOX||T instanceof ee&&S.type===R.types.PLANE||T.id===S.geometryId&&S.type===R.types.CYLINDER||T.id===S.geometryId&&S.type===R.types.CONVEXPOLYHEDRON||T.id===S.geometryId&&S.type===R.types.TRIMESH||T.id===S.geometryId&&S.type===R.types.HEIGHTFIELD}function I(C,S){let T=a[C],P=!1;return g(T,S)||(T&&b.remove(T),a[C]=T=E(S),P=!0),z(T,S),P}function M(){const C=a,S=c,T=l;let P=0;for(const N of t.bodies)for(let x=0;x!==N.shapes.length;x++){const F=N.shapes[x],A=I(P,F),B=C[P];B&&(N.quaternion.vmult(N.shapeOffsets[x],S),N.position.vadd(S,S),N.quaternion.mult(N.shapeOrientations[x],T),B.position.copy(S),B.quaternion.copy(T),A&&i instanceof Function&&i(N,B,F),!A&&r instanceof Function&&r(N,B,F)),P++}for(let N=P;N<C.length;N++){const x=C[N];x&&b.remove(x)}C.length=P}return{update:M}}var so=function(){var b=0,t=1,e=new st;function s(){this.tolerance=-1,this.faces=[],this.newFaces=[],this.assigned=new a,this.unassigned=new a,this.vertices=[]}Object.assign(s.prototype,{toJSON:function(){const o=this.faces.map(p=>p.toArray()),c=Array.from(new Set(o.flat())).sort(),u=[];for(let p=0;p<c.length;p++)u.push(this.vertices[c[p]].point.x,this.vertices[c[p]].point.y,this.vertices[c[p]].point.z);const d=new Map;for(let p=0;p<c.length;p++)d.set(c[p],p);const l=[];for(let p=0;p<o.length;p++)l.push([d.get(o[p][0]),d.get(o[p][1]),d.get(o[p][2])]);return[u,l]},setFromPoints:function(o){Array.isArray(o)!==!0&&console.error("THREE.ConvexHull: Points parameter is not an array."),o.length<4&&console.error("THREE.ConvexHull: The algorithm needs at least four points."),this.makeEmpty();for(var c=0,u=o.length;c<u;c++)this.vertices.push(new r(o[c],c));return this.compute(),this},setFromObject:function(o){var c=[];return o.updateMatrixWorld(!0),o.traverse(function(u){var d,l,p,f=u.geometry;if(f!==void 0&&(f.isGeometry&&(f=f.toBufferGeometry?f.toBufferGeometry():new BufferGeometry().fromGeometry(f)),f.isBufferGeometry)){var m=f.attributes.position;if(m!==void 0)for(d=0,l=m.count;d<l;d++)p=new st,p.fromBufferAttribute(m,d).applyMatrix4(u.matrixWorld),c.push(p)}}),this.setFromPoints(c)},containsPoint:function(o){for(var c=this.faces,u=0,d=c.length;u<d;u++){var l=c[u];if(l.distanceToPoint(o)>this.tolerance)return!1}return!0},intersectRay:function(o,c){for(var u=this.faces,d=-1/0,l=1/0,p=0,f=u.length;p<f;p++){var m=u[p],y=m.distanceToPoint(o.origin),w=m.normal.dot(o.direction);if(y>0&&w>=0)return null;var v=w!==0?-y/w:0;if(!(v<=0)&&(w>0?l=Math.min(v,l):d=Math.max(v,d),d>l))return null}return d!==-1/0?o.at(d,c):o.at(l,c),c},intersectsRay:function(o){return this.intersectRay(o,e)!==null},makeEmpty:function(){return this.faces=[],this.vertices=[],this},addVertexToFace:function(o,c){return o.face=c,c.outside===null?this.assigned.append(o):this.assigned.insertBefore(c.outside,o),c.outside=o,this},removeVertexFromFace:function(o,c){return o===c.outside&&(o.next!==null&&o.next.face===c?c.outside=o.next:c.outside=null),this.assigned.remove(o),this},removeAllVerticesFromFace:function(o){if(o.outside!==null){for(var c=o.outside,u=o.outside;u.next!==null&&u.next.face===o;)u=u.next;return this.assigned.removeSubList(c,u),c.prev=u.next=null,o.outside=null,c}},deleteFaceVertices:function(o,c){var u=this.removeAllVerticesFromFace(o);if(u!==void 0)if(c===void 0)this.unassigned.appendChain(u);else{var d=u;do{var l=d.next,p=c.distanceToPoint(d.point);p>this.tolerance?this.addVertexToFace(d,c):this.unassigned.append(d),d=l}while(d!==null)}return this},resolveUnassignedPoints:function(o){if(this.unassigned.isEmpty()===!1){var c=this.unassigned.first();do{for(var u=c.next,d=this.tolerance,l=null,p=0;p<o.length;p++){var f=o[p];if(f.mark===b){var m=f.distanceToPoint(c.point);if(m>d&&(d=m,l=f),d>1e3*this.tolerance)break}}l!==null&&this.addVertexToFace(c,l),c=u}while(c!==null)}return this},computeExtremes:function(){var o=new st,c=new st,u=[],d=[],l,p,f;for(l=0;l<3;l++)u[l]=d[l]=this.vertices[0];for(o.copy(this.vertices[0].point),c.copy(this.vertices[0].point),l=0,p=this.vertices.length;l<p;l++){var m=this.vertices[l],y=m.point;for(f=0;f<3;f++)y.getComponent(f)<o.getComponent(f)&&(o.setComponent(f,y.getComponent(f)),u[f]=m);for(f=0;f<3;f++)y.getComponent(f)>c.getComponent(f)&&(c.setComponent(f,y.getComponent(f)),d[f]=m)}return this.tolerance=3*Number.EPSILON*(Math.max(Math.abs(o.x),Math.abs(c.x))+Math.max(Math.abs(o.y),Math.abs(c.y))+Math.max(Math.abs(o.z),Math.abs(c.z))),{min:u,max:d}},computeInitialHull:function(){var o,c,u;return function(){o===void 0&&(o=new Ue,c=new $e,u=new st);var l,p=this.vertices,f=this.computeExtremes(),m=f.min,y=f.max,w,v,E,z,g,I,M,C,S=0,T=0;for(g=0;g<3;g++)C=y[g].point.getComponent(g)-m[g].point.getComponent(g),C>S&&(S=C,T=g);for(w=m[T],v=y[T],S=0,o.set(w.point,v.point),g=0,I=this.vertices.length;g<I;g++)l=p[g],l!==w&&l!==v&&(o.closestPointToPoint(l.point,!0,u),C=u.distanceToSquared(l.point),C>S&&(S=C,E=l));for(S=-1,c.setFromCoplanarPoints(w.point,v.point,E.point),g=0,I=this.vertices.length;g<I;g++)l=p[g],l!==w&&l!==v&&l!==E&&(C=Math.abs(c.distanceToPoint(l.point)),C>S&&(S=C,z=l));var P=[];if(c.distanceToPoint(z.point)<0)for(P.push(n.create(w,v,E),n.create(z,v,w),n.create(z,E,v),n.create(z,w,E)),g=0;g<3;g++)M=(g+1)%3,P[g+1].getEdge(2).setTwin(P[0].getEdge(M)),P[g+1].getEdge(1).setTwin(P[M+1].getEdge(0));else for(P.push(n.create(w,E,v),n.create(z,w,v),n.create(z,v,E),n.create(z,E,w)),g=0;g<3;g++)M=(g+1)%3,P[g+1].getEdge(2).setTwin(P[0].getEdge((3-g)%3)),P[g+1].getEdge(0).setTwin(P[M+1].getEdge(1));for(g=0;g<4;g++)this.faces.push(P[g]);for(g=0,I=p.length;g<I;g++)if(l=p[g],l!==w&&l!==v&&l!==E&&l!==z){S=this.tolerance;var N=null;for(M=0;M<4;M++)C=this.faces[M].distanceToPoint(l.point),C>S&&(S=C,N=this.faces[M]);N!==null&&this.addVertexToFace(l,N)}return this}}(),reindexFaces:function(){for(var o=[],c=0;c<this.faces.length;c++){var u=this.faces[c];u.mark===b&&o.push(u)}return this.faces=o,this},nextVertexToAdd:function(){if(this.assigned.isEmpty()===!1){var o,c=0,u=this.assigned.first().face,d=u.outside;do{var l=u.distanceToPoint(d.point);l>c&&(c=l,o=d),d=d.next}while(d!==null&&d.face===u);return o}},computeHorizon:function(o,c,u,d){this.deleteFaceVertices(u),u.mark=t;var l;c===null?l=c=u.getEdge(0):l=c.next;do{var p=l.twin,f=p.face;f.mark===b&&(f.distanceToPoint(o)>this.tolerance?this.computeHorizon(o,p,f,d):d.push(l)),l=l.next}while(l!==c);return this},addAdjoiningFace:function(o,c){var u=n.create(o,c.tail(),c.head());return this.faces.push(u),u.getEdge(-1).setTwin(c.twin),u.getEdge(0)},addNewFaces:function(o,c){this.newFaces=[];for(var u=null,d=null,l=0;l<c.length;l++){var p=c[l],f=this.addAdjoiningFace(o,p);u===null?u=f:f.next.setTwin(d),this.newFaces.push(f.face),d=f}return u.next.setTwin(d),this},addVertexToHull:function(o){var c=[];return this.unassigned.clear(),this.removeVertexFromFace(o,o.face),this.computeHorizon(o.point,null,o.face,c),this.addNewFaces(o,c),this.resolveUnassignedPoints(this.newFaces),this},cleanup:function(){return this.assigned.clear(),this.unassigned.clear(),this.newFaces=[],this},compute:function(){var o;for(this.computeInitialHull();(o=this.nextVertexToAdd())!==void 0;)this.addVertexToHull(o);return this.reindexFaces(),this.cleanup(),this}});function n(){this.normal=new st,this.midpoint=new st,this.area=0,this.constant=0,this.outside=null,this.mark=b,this.edge=null}Object.assign(n,{create:function(o,c,u){var d=new n,l=new i(o,d),p=new i(c,d),f=new i(u,d);return l.next=f.prev=p,p.next=l.prev=f,f.next=p.prev=l,d.edge=l,d.compute()}}),Object.assign(n.prototype,{toArray:function(){const o=[];let c=this.edge;do o.push(c.head().index),c=c.next;while(c!==this.edge);return o},getEdge:function(o){for(var c=this.edge;o>0;)c=c.next,o--;for(;o<0;)c=c.prev,o++;return c},compute:function(){var o;return function(){o===void 0&&(o=new Ze);var u=this.edge.tail(),d=this.edge.head(),l=this.edge.next.head();return o.set(u.point,d.point,l.point),o.getNormal(this.normal),o.getMidpoint(this.midpoint),this.area=o.getArea(),this.constant=this.normal.dot(this.midpoint),this}}(),distanceToPoint:function(o){return this.normal.dot(o)-this.constant}});function i(o,c){this.vertex=o,this.prev=null,this.next=null,this.twin=null,this.face=c}Object.assign(i.prototype,{head:function(){return this.vertex},tail:function(){return this.prev?this.prev.vertex:null},length:function(){var o=this.head(),c=this.tail();return c!==null?c.point.distanceTo(o.point):-1},lengthSquared:function(){var o=this.head(),c=this.tail();return c!==null?c.point.distanceToSquared(o.point):-1},setTwin:function(o){return this.twin=o,o.twin=this,this}});function r(o,c){this.point=o,this.index=c,this.prev=null,this.next=null,this.face=null}function a(){this.head=null,this.tail=null}return Object.assign(a.prototype,{first:function(){return this.head},last:function(){return this.tail},clear:function(){return this.head=this.tail=null,this},insertBefore:function(o,c){return c.prev=o.prev,c.next=o,c.prev===null?this.head=c:c.prev.next=c,o.prev=c,this},insertAfter:function(o,c){return c.prev=o,c.next=o.next,c.next===null?this.tail=c:c.next.prev=c,o.next=c,this},append:function(o){return this.head===null?this.head=o:this.tail.next=o,o.prev=this.tail,o.next=null,this.tail=o,this},appendChain:function(o){for(this.head===null?this.head=o:this.tail.next=o,o.prev=this.tail;o.next!==null;)o=o.next;return this.tail=o,this},remove:function(o){return o.prev===null?this.head=o.next:o.prev.next=o.next,o.next===null?this.tail=o.prev:o.next.prev=o.prev,this},removeSubList:function(o,c){return o.prev===null?this.head=c.next:o.prev.next=c.next,c.next===null?this.tail=o.prev:c.next.prev=o.prev,this},isEmpty:function(){return this.head===null}}),s}();const no=new st,Rt=new st,io=new Qe;function _t(b){const t=ro(b);if(t.length===0)return null;if(t.length===1)return Fe(t[0]);let e;const s=[];for(;e=t.pop();)s.push(co(Fe(e)));return oo(s)}function Fe(b){let t=b.geometry;return t.toBufferGeometry?t=t.toBufferGeometry():t=t.clone(),b.updateMatrixWorld(),b.matrixWorld.decompose(no,io,Rt),t.scale(Rt.x,Rt.y,Rt.z),t}function oo(b){let t=0;for(let n=0;n<b.length;n++){const i=b[n].attributes.position;i&&i.itemSize===3&&(t+=i.count)}const e=new Float32Array(t*3);let s=0;for(let n=0;n<b.length;n++){const i=b[n].attributes.position;if(i&&i.itemSize===3)for(let r=0;r<i.count;r++)e[s++]=i.getX(r),e[s++]=i.getY(r),e[s++]=i.getZ(r)}return new Et().setAttribute("position",new Ne(e,3))}function De(b){const t=b.attributes.position,e=new Float32Array(t.count*3);for(let s=0;s<t.count;s++)e[s*3]=t.getX(s),e[s*3+1]=t.getY(s),e[s*3+2]=t.getZ(s);return e}function ro(b){const t=[];return b.traverse(function(e){e.isMesh&&t.push(e)}),t}function Nt(b,t){switch(t){case"x":return b.x;case"y":return b.y;case"z":return b.z}throw new Error(`Unexpected component ${t}`)}function co(b,t=1e-4){t=Math.max(t,Number.EPSILON);const e={},s=b.getIndex(),n=b.getAttribute("position"),i=s?s.count:n.count;let r=0;const a=[],o=[],c=Math.log10(1/t),u=Math.pow(10,c);for(let p=0;p<i;p++){const f=s?s.getX(p):p;let m="";m+=`${~~(n.getX(f)*u)},`,m+=`${~~(n.getY(f)*u)},`,m+=`${~~(n.getZ(f)*u)},`,m in e?a.push(e[m]):(o.push(n.getX(f)),o.push(n.getY(f)),o.push(n.getZ(f)),e[m]=r,a.push(r),r++)}const d=new Ne(new Float32Array(o),n.itemSize,n.normalized),l=new Et;return l.setAttribute("position",d),l.setIndex(a),l}const Te=Math.PI/2;var G;(function(b){b.BOX="Box",b.CYLINDER="Cylinder",b.SPHERE="Sphere",b.HULL="ConvexPolyhedron",b.MESH="Trimesh"})(G||(G={}));const ao=function(t,e={}){let s;if(e.type===G.BOX)return Pe(t);if(e.type===G.CYLINDER)return yo(t,e);if(e.type===G.SPHERE)return xo(t,e);if(e.type===G.HULL)return mo(t);if(e.type===G.MESH)return s=_t(t),s?bo(s):null;if(e.type)throw new Error(`[CANNON.getShapeParameters] Invalid type "${e.type}".`);if(s=_t(t),!s)return null;switch(s.type){case"BoxGeometry":case"BoxBufferGeometry":return Me(s);case"CylinderGeometry":case"CylinderBufferGeometry":return vo(s);case"PlaneGeometry":case"PlaneBufferGeometry":return wo(s);case"SphereGeometry":case"SphereBufferGeometry":return go(s);case"TubeGeometry":case"BufferGeometry":return Pe(t);default:return console.warn('Unrecognized geometry: "%s". Using bounding box as shape.',s.type),Me(s)}},So=function(t,e={}){const s=ao(t,e);if(!s)return null;const{type:n,params:i,offset:r,orientation:a}=s;let o;return n===G.BOX?o=lo(i):n===G.CYLINDER?o=ho(i):n===G.SPHERE?o=uo(i):n===G.HULL?o=po(i):o=fo(i),{shape:o,offset:r,orientation:a}};function lo(b){const{x:t,y:e,z:s}=b;return new Wt(new h(t,e,s))}function ho(b){const{radiusTop:t,radiusBottom:e,height:s,segments:n}=b,i=new zn(t,e,s,n);return i.radiusTop=e,i.radiusBottom=e,i.height=s,i.numSegments=n,i}function uo(b){return new Bn(b.radius)}function po(b){const{faces:t,vertices:e}=b,s=[];for(let i=0;i<e.length;i+=3)s.push(new h(e[i],e[i+1],e[i+2]));return new pt({faces:t,vertices:s})}function fo(b){const{vertices:t,indices:e}=b;return new Lt(t,e)}function Me(b){if(!De(b).length)return null;b.computeBoundingBox();const e=b.boundingBox;return{type:G.BOX,params:{x:(e.max.x-e.min.x)/2,y:(e.max.y-e.min.y)/2,z:(e.max.z-e.min.z)/2}}}function Pe(b){const t=b.clone();t.quaternion.set(0,0,0,1),t.updateMatrixWorld();const e=new Re().setFromObject(t);if(!isFinite(e.min.lengthSq()))return null;const s=e.translate(t.position.negate()).getCenter(new st);return{type:G.BOX,params:{x:(e.max.x-e.min.x)/2,y:(e.max.y-e.min.y)/2,z:(e.max.z-e.min.z)/2},offset:s.lengthSq()?new h(s.x,s.y,s.z):void 0}}function mo(b){const t=_t(b);if(!t)return null;const e=1e-4;for(let i=0;i<t.attributes.position.count;i++)t.attributes.position.setXYZ(i,t.attributes.position.getX(i)+(Math.random()-.5)*e,t.attributes.position.getY(i)+(Math.random()-.5)*e,t.attributes.position.getZ(i)+(Math.random()-.5)*e);const[s,n]=new so().setFromObject(new ct(t)).toJSON();return{type:G.HULL,params:{vertices:new Float32Array(s),faces:n}}}function vo(b){const t=b.parameters;return{type:G.CYLINDER,params:{radiusTop:t.radiusTop,radiusBottom:t.radiusBottom,height:t.height,segments:t.radialSegments},orientation:new j().setFromEuler(Ke.degToRad(-90),0,0,"XYZ").normalize()}}function yo(b,t){const e=["x","y","z"],s=t.cylinderAxis||"y",n=e.splice(e.indexOf(s),1)&&e,i=new Re().setFromObject(b);if(!isFinite(i.min.lengthSq()))return null;const r=i.max[s]-i.min[s],a=.5*Math.max(Nt(i.max,n[0])-Nt(i.min,n[0]),Nt(i.max,n[1])-Nt(i.min,n[1])),o=s==="y"?Te:0,c=s==="z"?Te:0;return{type:G.CYLINDER,params:{radiusTop:a,radiusBottom:a,height:r,segments:12},orientation:new j().setFromEuler(o,c,0,"XYZ").normalize()}}function wo(b){b.computeBoundingBox();const t=b.boundingBox;return{type:G.BOX,params:{x:(t.max.x-t.min.x)/2||.1,y:(t.max.y-t.min.y)/2||.1,z:(t.max.z-t.min.z)/2||.1}}}function go(b){return{type:G.SPHERE,params:{radius:b.parameters.radius}}}function xo(b,t){if(t.sphereRadius)return{type:G.SPHERE,params:{radius:t.sphereRadius}};const e=_t(b);return e?(e.computeBoundingSphere(),{type:G.SPHERE,params:{radius:e.boundingSphere.radius}}):null}function bo(b){const t=De(b);if(!t.length)return null;const e=new Uint32Array(t.length);for(let s=0;s<t.length;s++)e[s]=s;return{type:G.MESH,params:{vertices:t,indices:e}}}export{Wt as B,zn as C,Vt as M,j as Q,Co as R,G as S,h as V,Bo as W,Bn as a,pt as b,$t as c,L as d,qt as e,bt as f,zo as g,So as t};
